/* File cgen.h Created 17.05.2019 Last Modified 17.06.2020 */

/* Not a commercial goal of this laborious work is to popularize among
 * potential fans of 8-bit computers the old HI-TECH C compiler V3.09
 * (HI-TECH Software) and extend its life, outside of the CP/M environment
 * (Digital Research, Inc), for full operation in a  Unix-like operating
 * system UZI-180 without using the CP/M emulator.
 *
 * The HI-TECH C compiler V3.09 is provided free of charge for any use,
 * private or commercial, strictly as-is. No warranty or product support
 * is offered or implied including merchantability, fitness for a particular
 * purpose, or non-infringement. In no event will HI-TECH Software or its
 * corporate affiliates be liable for any direct or indirect damages.
 *
 * You may use this software for whatever you like, providing you acknowledge
 * that the copyright to this software remains with HI-TECH Software and its
 * corporate affiliates.
 *
 * All copyrights to the algorithms used, binary code, trademarks, etc.
 * belong to the legal owner - Microchip Technology Inc. and its subsidiaries.
 * Commercial use and distribution of recreated source codes without permission
 * from the copyright holderis strictly prohibited.
 *
 * The solution to this problem is to recreate the object code being moved,
 * replace the CP/M system functions (I/O, memory allocation, etc.) with
 * similar UZI-180 calls, and compile an executable file for this operating
 * system.
 */

/*
#define DEBUG
*/

/*
 *	Constant declarations
 */

#define MAXFUN	 0x20  /* Maximum limit nested function */
#define MAXBUF	   60  /* Maximum buffer size 		*/
#define MAXNAME	   40  /* Maximum file name length	*/
#define MAXERR	   30  /* Maximum number nonfatal errors*/

#define MININT -32768	/* min for int (0x8000)	*/
#define MAXINT  32767	/* max for int (0x7fff)	*/


#if 1
#define NULSTR	    0  /*  0  ""	*/
#define NOT	    1  /*  1  "!"	*/
#define NEQL	    2  /*  2  "!="	*/
#define HASHSIGN    3  /*  3  "#"	*/
#define DOLLAR	    4  /*  4  "$"	*/
#define DOLLAR_U    5  /*  5  "$U"	*/
#define MOD	    6  /*  6  "%"	*/
#define BAND	    7  /*  7  "&"	*/
#define LAND	    8  /*  8  "&&"	*/
#define GADDR	    9  /*  9  "&U"	*/
#define LPAREN	  0xA  /* 10  "("	*/
#define RPAREN	  0xB  /* 11  ")"	*/
#define MUL	  0xC  /* 12  "*"	*/
#define MUL_U	  0xD  /* 13  "*U"	*/
#define ADD	  0xE  /* 14  "+"	*/
#define INCR	  0xF  /* 15  "++"	*/
#define PLUS_U	 0x10  /* 16  "+U"	*/
#define COMMA	 0x11  /* 17  ","	*/
#define SUB	 0x12  /* 18  "-"	*/
#define DECR	 0x13  /* 19  "--"	*/
#define CONV	 0x14  /* 20  "->"	*/
#define MINUS_U	 0x15  /* 21  "-U"	*/
#define DOT	 0x16  /* 22  "."	*/
#define DOT_DOT	 0x17  /* 23  ".."	*/
#define DIV	 0x18  /* 24  "/"	*/
#define COLON	 0x19  /* 25  ":"	*/
#define COLON_U	 0x1A  /* 26  ":U"	*/
#define COLON_S	 0x1B  /* 27  ":s"	*/
#define SCOLON	 0x1C  /* 28  ";"	*/
#define T_SCOLON 0x1D  /* 29  ";;"	*/
#define LT	 0x1E  /* 30  "<"	*/
#define LSHIFT	 0x1F  /* 31  "<<"	*/
#define LEQ	 0x20  /* 32  "<="	*/
#define ASSIGN	 0x21  /* 33  "="	*/
#define ASMOD	 0x22  /* 34  "=%"	*/
#define ASAND	 0x23  /* 35  "=&"	*/
#define ASMUL	 0x24  /* 36  "=*"	*/
#define ASADD	 0x25  /* 37  "=+"	*/
#define ASSUB	 0x26  /* 38  "=-"	*/
#define ASDIV	 0x27  /* 39  "=/"	*/
#define ASLSHIFT 0x28  /* 40  "=<<"	*/
#define EQL	 0x29  /* 41  "=="	*/
#define ASRSHIFT 0x2A  /* 42  "=>>"	*/
#define ASEXOR	 0x2B  /* 43  "=^"	*/
#define ASEOR	 0x2C  /* 44  "=|"	*/
#define GT	 0x2D  /* 45  ">"	*/
#define GEQ	 0x2E  /* 46  ">="	*/
#define RSHIFT	 0x2F  /* 47  ">>"	*/
#define QUEST	 0x30  /* 48  "?"	*/
#define ATGIGN	 0x31  /* 49  "@"	*/
#define CASE	 0x32  /* 50  "[\\"	*/
#define UNKNOWN	 0x33  /* 51  "[a"	*/
#define ENUM	 0x34  /* 52  "[c"	*/
#define EXPR	 0x35  /* 53  "[e"	*/
#define INIT	 0x36  /* 54  "[i"	*/
#define STRUCT	 0x37  /* 55  "[s"	*/
#define UNION	 0x38  /* 56  "[u"	*/
#define VAR	 0x39  /* 57  "[v"	*/
#define BXOR	 0x3A  /* 58  "^"	*/
#define LBRACE	 0x3B  /* 59  "{"	*/
#define BOR	 0x3C  /* 60  "|"	*/
#define LOR	 0x3D  /* 61  "||"	*/
#define RBRACE	 0x3E  /* 62  "}"	*/
#define BNOT	 0x3F  /* 63  "~"	*/
#define RECIP	 0x40  /* 64  "RECIP"   */
#define TYPEOP	 0x41  /* 65  "TYPE"    */
#define IDOP	 0x42  /* 66  "ID"	*/
#define CONST	 0x43  /* 67  "CONST"   */
#define FCONST	 0x44  /* 68  "FCONST"  */
#define USEREG	 0x45  /* 69  "REG"     */
#define INAREG	 0x46  /* 70  "INAREG"  */
#define BFIELD   0x47  /* 71  "BITFIELD"*/
#else
enum op {
  NULSTR,	/*  0  0  ""	*/
  NOT,		/*  1  1  "!"	*/
  NEQL,		/*  2  2  "!="	*/
  HASHSIGN,	/*  3  3  "#"	*/
  DOLLAR,	/*  4  4  "$"	*/
  DOLLAR_U,	/*  5  5  "$U"	*/
  MOD,		/*  6  6  "%"	*/
  BAND,		/*  7  7  "&"	*/
  LAND,		/*  8  8  "&&"	*/
  GADDR,	/*  9  9  "&U"	*/
  LPAREN,	/* 10  A  "("	*/
  RPAREN,	/* 11  B  ")"	*/
  MUL,		/* 12  C  "*"	*/
  MUL_U,	/* 13  D  "*U"	*/
  ADD,		/* 14  E  "+"	*/
  INCR,		/* 15  F  "++"	*/
  PLUS_U,	/* 16 10  "+U"	*/
  COMMA,	/* 17 11  ","	*/
  SUB,		/* 18 12  "-"	*/
  DECR,		/* 19 13  "--"	*/
  CONV,		/* 20 14  "->"	*/
  MINUS_U,	/* 21 15  "-U"	*/
  DOT,		/* 22 16  "."	*/
  DOT_DOT,	/* 23 17  ".."	*/
  DIV,		/* 24 18  "/"	*/
  COLON,	/* 25 19  ":"	*/
  COLON_U,	/* 26 1A  ":U"	*/
  COLON_S,	/* 27 1B  ":s"	*/
  SCOLON,	/* 28 1C  ";"	*/
  T_SCOLON,	/* 29 1D  ";;"	*/
  LT,		/* 30 1E  "<"	*/
  LSHIFT,	/* 31 1F  "<<"	*/
  LEQ,		/* 32 20  "<="	*/
  ASSIGN,	/* 33 21  "="	*/
  ASMOD,	/* 34 22  "=%"	*/
  ASAND,	/* 35 23  "=&"	*/
  ASMUL,	/* 36 24  "=*"	*/
  ASADD,	/* 37 25  "=+"	*/
  ASSUB,	/* 38 26  "=-"	*/
  ASDIV,	/* 39 27  "=/"	*/
  ASLSHIFT,	/* 40 28  "=<<"	*/
  EQL,		/* 41 29  "=="	*/
  ASRSHIFT,	/* 42 2A  "=>>"	*/
  ASEXOR,	/* 43 2B  "=^"	*/
  ASEOR,	/* 44 2C  "=|"	*/
  GT,		/* 45 2D  ">"	*/
  GEQ,		/* 46 2E  ">="	*/
  RSHIFT,	/* 47 2F  ">>"	*/
  QUEST,	/* 48 30  "?"	*/
  ATGIGN,	/* 49 31  "@"	*/
  CASE,		/* 50 32  "[\\"	*/
  UNKNOWN,	/* 51 33  "[a"	*/
  ENUM,		/* 52 34  "[c"	*/
  EXPR,		/* 53 35  "[e"	*/
  INIT,		/* 54 36  "[i"	*/
  STRUCT,	/* 55 37  "[s"	*/
  UNION,	/* 56 38  "[u"	*/
  VAR,		/* 57 39  "[v"	*/
  BXOR,		/* 58 3A  "^"	*/
  LBRACE,	/* 59 3B  "{"	*/
  BOR,		/* 60 3C  "|"	*/
  LOR,		/* 61 3D  "||"	*/
  RBRACE,	/* 62 3E  "}"	*/
  BNOT,		/* 63 3F  "~"	*/
  RECIP,	/* 64 40  "RECIP"   */
  TYPEOP,	/* 65 41  "TYPE"    */
  IDOP,		/* 66 42  "ID"	    */
  CONST,	/* 67 43  "CONST"   */
  FCONST,	/* 68 44  "FCONST"  */
  USEREG,	/* 69 45  "REG"     */
  INAREG,	/* 70 46  "INAREG"  */
  BFIELD	/* 71 47  "BITFIELD"*/
};
#endif

/*
 * Classes
 */
 
#define MEMBER   0x16  /*     */
#define EDECL    0x34  /* '4' */
#define SDECL    0x37  /* '7' */
#define UDECL    0x38  /* '8' */
#define DECL9    0x39  /* '9' */
#define TDECL    0x41  /* 'A' */

/*
 *	Used macros
 */

#define LO_CHAR(a)      *((unsigned char *)&a)
#define HI_CHAR(a)      *(((unsigned char *)&a) + 1)
#define LO_WORD(a)      *((unsigned int *)&a)
#define HI_WORD(a)      *(((unsigned int *)&a) + 1)

#define bittst(var,bitno) ((var) & 1 << (bitno))
#define bitset(var,bitno) ((var) |= 1 << (bitno))
#define bitclr(var,bitno) ((var) &= ~(1 << (bitno)))

#ifndef	uchar
#define	uchar	unsigned char
#endif

#define container_of(ptr, type, member) ((type *)((char *)(ptr)-(char *)(&((type *)0)->member)))

/*
 *	Structural declarations
 */

union pw {
  int		* pi;
  char		* pc;
  struct aaa	* pst;
  int		  i;
  unsigned int	  ui;
  char		  ch[2];
  uchar		  uch[2];
};

union lw {
  long		  l;
  unsigned long   ul;
  struct aaa	* wi[2];
  struct bbb	* vi[2];
  char		* ci[2];
  char		  bc[4];
  int		* pl[2];
  unsigned long	* lp[2];
  unsigned	  ii[2];
};

struct	aaa {		/* Offset  	Used values  &  Description	*/
  uchar		a_c0;	/* +0  0	0 - 0x47			*/
  uchar		a_c1;	/* +1  1					*/
  uchar		a_c2;	/* +2  2	0, 1, 2,			*/
  uchar		a_c3;	/* +3  3					*/
  uchar		a_c4;	/* +4  4					*/
  uchar		a_c5;	/* +5  5					*/
  uchar		a_c6;	/* +6  6					*/
  struct aaa  * a_i5;	/* +7  7					*/
			/* +8  8					*/
  unsigned int  a_i6;	/* +9  9					*/
			/* +A 10					*/
  int		a_i7;	/* +B 11					*/
			/* +C 12					*/
  unsigned int  a_i8;	/* +D 13					*/
			/* +E 14					*/
  struct aaa  * a_i9;	/* +F 15					*/
			/*+10 16					*/
  int		a_i10;	/*+11 17					*/
			/*+12 18					*/
  int	      * a_i11;	/*+13 19					*/
			/*+14 20					*/
  unsigned int 	a_i12;	/*+15 21					*/
			/*+16 22					*/
  struct bbb  * a_i14;	/*+17 23					*/
			/*+18 24					*/
  union lw	a_l15;	/*+19 25					*/
			/*+1A 26					*/
			/*+1B 27					*/
			/*+1C 28					*/
};

struct	bbb {		/* Offset Member Description			*/
  char	      * b_name;	/* +0   0 s_name Pointer to Name identifier 	*/
			/* +1   1					*/
  char		b_class;/* +2	2 s_class	    0x16 - MEMBER 	*/
  			/*			    '4' -  EDECL	*/
  			/*			    '7' -  SDECL 	*/
  			/*			    '8' -  UDECL	*/
  			/*			    '9' - 		*/
  			/*			    'A' -  TYPE		*/
  char		b_c3;	/* +3	3 s_strg Bits used: 0 0000001 -		*/
  			/*		            1 0000010 -	global?	*/
  			/*		            2 0000100 -		*/
  			/*		            3 0001000 -	register?*/
  			/*		            4 0010000 -		*/
  char		b_ndpth;/* +4	4 s_ndpth Nesting depth of block	*/
  int		b_i5;	/* +5   5					*/
			/* +6   6					*/
  struct bbb *  b_next; /* +7   7					*/
			/* +8   8					*/
  unsigned	b_size; /* +9   9 s_size Type size			*/
			/* +A  10					*/
  int		b_nelem;/* +B  11 s_nelem				*/
			/* +C  12					*/
  unsigned	b_refl;	/* +D  13 s_refl				*/
			/* +E  14					*/
  struct bbb  * b_type;	/* +F  15 s_type				*/
			/* +10 16					*/
  int		b_i11;	/* +11 17 s_alig Type alig  size stack frame	*/
			/* +12 18					*/
  int	      * b_memb;	/* +13 19 s_memb Struct store			*/
			/* +14 20					*/
  char		b_c13;  /* +15 21	 type flag 0, 1, 2, 3, 4, 5,	*/
};

struct zzz {
  char		c_0;
  char		c_1;
  char		c_2;
  char		c_3;
  char		c_4;
  char		c_5;
  char 	      * p_6;
  char	      * p_8;
};

struct ptr {
  struct ptr * next_ptr;
};

struct header1 {
  uchar size;
  struct ptr next;
};

struct header2 {
  unsigned size;
  char aaa; 
  struct ptr next;
};

struct type {
  char	* t_str;
  int	  t_size;
  int	  t_alig;
  char	  t_flag;
};

/*
 *	Descriptions of variables and arrays
 *
 * Declarations are located in sequence of being in
 * original binary image of CGEN.COM
 *					Purpose				Where it is used
 * ===== Start bss section ======= */
extern char         buffer[MAXBUF];					/* sub_306  */
extern int          lineno;						/* sub_306, sub_6AD0, sub_6B55*/
extern char         progname[MAXNAME];	/*			   */	/* sub_306  */
extern char         byte_AE0C;		/* First call ncsv	   */	/* sub_2BD0 */
extern int          cursect; 		/*  Current section	   */ 	/* selpsect  */
extern int          word_AE0F;		/*			   */ 	/* sub_174C */
extern struct bbb * word_AE11;		/* "l" - long		   */ 	/* sub_1680, sub_415E, sub_43EF */
extern int          array_AE13[MAXFUN]; /*			   */ 	/* sub_406,  sub_17E0, sub_5CF5 */
extern struct bbb * word_AE53;		/* "uc" - unsigned char	   */
extern unsigned     nstdpth;		/* Current nesting depth   */
extern int          array_AE57[MAXFUN]; /*			   */
extern int          array_AE97[MAXFUN]; /*			   */
extern struct bbb * word_AED7;		/* "d" - double 	   */
extern struct bbb * word_AED9;		/* "c" - char 		   */
extern struct bbb * array_AEDB[MAXFUN]; /*			   */
extern struct bbb * word_AF1B;		/* "b"			   */
extern struct bbb * word_AF1D;		/* "x"			   */
extern struct bbb * hashtab[101];	/* hash table (array_AF1F) */
extern struct bbb * word_AFE9;		/* "v" - variable  	   */
extern int          lvlidx;		/* Level nested function   */	/* sub_406, sub_1680 */

extern int          word_AFED;						/* sub_1F4B */
extern char       * word_AFEF;						/* sub_1F4B */
extern char       * word_AFF1;						/* sub_1F4B */
extern char         byte_AFF3;						/* sub_1F4B */
extern int          word_AFF4;						/* sub_1F4B */
extern int          word_AFF6;						/* sub_1F4B */

extern int          word_AFF8;						/* sub_2D09, sub_3564 */
extern char         byte_AFFA;						/* sub_283E, sub_2B79 */
extern int          word_AFFB;						/* sub_2D09, sub_35E6 */
extern struct aaa * array_AFFD[0x14];					/* sub_3CDF, sub_3DC9 */
extern void	  * word_B011;						/* sub_36E0, sub_3712, sub_374C */
extern char         byte_B013;						/* sub_36E0, sub_3712, ... */
extern uchar        byte_B014;						/* sub_3CDF, sub_3DC9 */
extern char       * word_B015;	/* msgptr  Pointer str printf       */
extern int          word_B017;						/* sub_406, sub_6D1, sub_283E, sub_2BD0, sub_61AA */
extern char         wflag;		/* Warning messages	    */	/* main, sub_6AD0 */
extern char         pflag;		/* Not used		    */	/* main */
extern char         hflag;		/* Not used		    */	/* main */
extern int          errcnt;		/* Number of errors	    */	/* main, uerror */
extern char         bflag;		/* Not used		    */	/* main */
extern char       * beg_sbrk;		/* Current highest memory   */	/* main */
extern char         eflag;		/* Not used		    */	/* main */
extern char         rflag;		/*			    */	/* main, sub_61AA */

extern struct header1 word_B023; 					/* sub_6D61, cmalloc, sub_7028 */

#if 0
extern int          word_B026;						/* sprintf */
extern int          word_B028;						/* sprintf */
extern char         byte_B02E;						/* pnum, doprnt */
extern int          word_B02F;						/* pputc */
extern char         byte_B031;						/* pnum, doprnt */
extern char         buf_B032[512];					/* pnum, doprnt */
extern int          __argc_;						/* startup */
extern int          memtop;
#endif						/* brk, sbrk */
/* ===== End of bss section ======= */


/* ===== Start data section ======= */

extern char       * array_805F[];					/*+sub_2D09 */
extern struct zzz   array_80EF[];					/* sub_1F4B, sub_283E, sub_2D09, sub_3564 */
extern int          array_987D[];					/*+sub_13D  */
extern char         array_990D[];					/*+sub_13D  */
extern int          array_9BD4[];					/*+sub_13D  */
extern int          array_A162[];					/*+sub_1F4B */
extern char       * tnames[];						/*+sub_1B2  */
				
extern char         byte_A46A;		/* Initial value middle  */	/*+sub_1B2  */
					/* element used in binary search */
extern char         array_A542[];					/*+sub_153A */
extern char       * off_A592[];						/*+selpsect  */
extern int          dopetab[72];					/*+sub_1F4B, sub_2B8A, sub_2D09, sub_35E6, sub_377A, ... */
extern char         array_A94A[];					/*+sub_1F4B */
extern int          array_AAE8[];					/*+sub_406,  sub_1F4B, sub_283E, sub_61AA, sub_63B8, sub_6589, sub_66BC */
extern uchar        array_AB24[];					/*+sub_283E, sub_2D09, sub_665B */
extern uchar        array_AB54[];					/*+sub_63B8, sub_6589 */


extern struct type  vars[14];  						/* sub_1680 */
extern char       * off_AACA[];

/*
 * Added dummy variable "empty" to eliminate sub_5CF5 function
 * call with different number of parameters
 */

/*
extern int	    empty;
extern FILE	   *f_out, *f_in;
*/

/* ===== End of data section ======= */

/*
 * Function prototype
 *
 * Missing Hi-Tech C header files
 */

/*
long	     atol(char *str);
*/
int	     atoi(char *);
void	     blkclr(char *, unsigned short size);
void	   * sbrk(int);
/****************************************************************
 * Prototype functions are located in sequence of being in
 * original binary image of CGEN.COM
 *
 * ok++ - Full binary compatibility with code in original file;
 * ok+  - Code generated during compilation differs slightly,
 *        but is logically correct;
 * ok   - C source code was compiled successfully, but not verified.
 ****************************************************************/
/* lex.c ----------------------------------------------------------------------*/
int	     sub_13D(int, int);				/*.ok+  sub_13D.c	*/
char         sub_1B2(char *);				/* ok++ sub_1B2.c	*/
struct bbb **gethashptr(char *);	/*sub_21F*/	/* ok++			*/
struct bbb * sub_265(char *);				/* ok++			*/
char 	   * sub_306(void);				/*.ok+  sub_306.c	*/
void         sub_406(void);				/*.ok+  sub_406.c	*/
struct bbb * sub_627(char *, unsigned *);		/* ok++ 		*/
void	     sub_6C8(void);				/* ok++ 		*/
void	     sub_6D1(void);				/*.ok+  sub_6D1.c	*/
void	     sub_76F(int);				/* ok++ sub_76F.c	*/
void         sub_793(void);				/* ok++ 		*/
/* code.c ----------------------------------------------------------------------*/
int	     sub_808(struct bbb *, struct aaa *); 	/*.ok+  sub_808.c	*/
void	     sub_B19(void);				/* ok++ sub_B19.c	*/
void	     sub_B96(int);				/* ok++ 		*/
void         sub_BCC(int, int);				/* ok++ 		*/
void         sub_BEE(int, int);				/* ok++ 		*/
void         sub_C36(struct bbb *);			/* ok++ 		*/
void	     sub_C57(struct bbb *);			/* ok++ 		*/
void	     sub_CAB(struct bbb *);			/* ok++ 		*/
void	     sub_CDF(int);				/* ok++ 		*/
void	     selpsect(int);		/*sub_D37*/	/* ok++ 		*/
void	     sub_D66(int *, int *, int);		/* ok++ 		*/
void	     sub_E43(void);				/* ok++ 		*/
void	     sub_1420(int);				/* ok++ 		*/
void	     sub_143F(uchar);				/* ok++ 		*/
void	     sub_1489(uchar);				/* ok++ 		*/
void	     sub_14D3(struct bbb *);			/* ok++ 		*/
char	     sub_14F3(struct aaa *);			/* ok++ 		*/
void	     sub_153A(struct aaa *);			/* ok++ 		*/
void	     sub_155D(char *, int);			/* ok++ 		*/
void	     sub_15D3(int);				/* ok++ 		*/
void	     sub_15E7(int);				/* ok++ 		*/
void	     sub_15FB(struct bbb *, int, int);		/* ok++ 		*/
int	     sub_1659(int, int);			/* ok++ sub_1659.c	*/
void	     sub_1680(void);				/* ok++ sub_1680.c	*/
int	     sub_174C(void);				/* ok++ 		*/
struct bbb * sub_1754(char *, int);			/* ok++ 		*/
/* sym.c -----------------------------------------------------------------------*/
void	     sub_17E0(void);				/*.ok+  sub_17E0.c	*/
void         sub_19C1(int);				/* ok++ sub_19C1.c	*/

void         sub_1B0C(void);	      /* missing pop bc	   ok+			*/
int	     sub_1C6D(int, int);			/* ok++ sub_1C6D.c	*/
int	     sub_1C8E(struct bbb *);			/* ok++ sub_1C8E.c	*/
int	     sub_1CC4(struct bbb *);			/* ok++ 		*/
void	     sub_1CEF(struct bbb *);			/* ok++ 		*/
void	     sub_1EDF(void);				/* ok++ 		*/
int	     sub_1F4B(struct aaa *,int,int,int,int *);	/*.ok+  optim: out of memory */
int          sub_283E(struct aaa *, int);		/*.ok+  sub_283E.c	*/
int          sub_2B2A(struct aaa *);			/*.ok+  sub_2B2A.c	*/
uchar	     sub_2B79(struct aaa *);			/* ok+  sub_2B79.c	*/
/* cgen.c ----------------------------------------------------------------------*/
void	     sub_2BD0(struct aaa *);			/* ok++			*/
long	     sub_2C5E(struct aaa *, long);		/*.ok+  sub_2C5E.c	*/
void	     sub_2CE0(struct aaa *, long);		/* ok++ sub_2CE0.c	*/
void	     sub_2D09(struct aaa *, char *, int);	/*.ok   optim: out of memory */
void	     sub_3564(struct aaa *);			/*.ok+  sub_3564.c	*/
void         sub_35E6(struct aaa *);			/*.ok+  		*/
void	     sub_36E0(struct aaa *);			/* ok++ 		*/
struct aaa * sub_3712(void);				/* ok++ 		*/
char	     sub_374C(void);				/* ok++ 		*/
struct aaa * sub_377A(struct aaa *);			/* ok++ 		*/
void	     sub_37ED(struct aaa *);			/* ok++ sub_37ED.c	*/
void	     sub_385B(struct aaa *);			/* ok++ sub_385B.c	*/
int	     sub_387A(struct aaa *);			/* ok++ 		*/
int	     sub_38CA(struct aaa *, int);		/* ok++ 		*/
int	     sub_393C(struct aaa *);			/* ok++ 		*/
int	     sub_3952(struct aaa *);			/* ok++ 		*/
int	     sub_3968(struct aaa *);			/* ok++ 		*/
unsigned     nodesize(struct aaa *);	/*sub_3993*/	/* ok++ 		*/
struct aaa * sub_39CA(struct aaa *);			/* ok++ 		*/
void	     sub_3A79(struct aaa *, struct aaa *);	/*.ok+  sub_3A79.c	*/
void	     sub_3B65(unsigned long *, long, int);	/* ok++ sub_3B65.c	*/
void	     sub_3BC6(long *, long, int);		/*.ok+  sub_3BC6.c	*/
struct aaa * sub_3CDF(struct aaa *);			/* ok++ sub_3CDF.c	*/
/* tree.c ----------------------------------------------------------------------*/
void	     sub_3DC9(struct aaa *);			/* ok++			*/
struct aaa * sub_3EAA(struct aaa *);			/*.ok+  sub_3EAA.c	*/
struct aaa * sub_415E(long);				/* ok++ sub_415E.c	*/
struct aaa * sub_4192(void);				/*.ok+  sub_4192.c	*/
struct aaa * sub_43EF(int, struct aaa *, struct aaa *); /*.ok+  sub_43EF.c	*/
uchar	     sub_46F7(long);				/* ok++ sub_46F7.c	*/
void	     sub_475C(struct aaa *);			/* ok++ sub_475C.c	*/
char	     sub_47B2(struct aaa *, int);		/*.ok+  sub_47B2.c	*/
/*
int	     sub_4B89(struct aaa *);			   ok+    
*/
uchar	     sub_4B89(struct aaa *);			/*.ok+  sub_4B89.c	*/
int	     sub_4BE5(struct aaa *);			/* ok++ sub_4BE5.c	*/
int	     sub_4C12(struct aaa *);			/* ok++ 		*/
char	     sub_4C6D(struct aaa *);			/*.ok+  sub_4C6D.c	*/
struct aaa * sub_4C8B(struct aaa *);			/* ok++ sub_4C8B.c	*/
struct aaa * sub_4DA3(struct aaa *);			/* ok++ 		*/
struct aaa * sub_4E8D(struct aaa *);			/* ok++ 		*/
struct aaa * sub_4FA8(struct aaa *);			/* ok++ 		*/
struct aaa * sub_4FCE(struct aaa *);			/*.ok+  sub_4FCE.c	*/
struct aaa * sub_508A(struct aaa *);			/* ok++ sub_508A.c	*/
struct aaa * sub_53EE(struct aaa *);			/* ok++ 		*/
/* local.c ---------------------------------------------------------------------*/
struct aaa * sub_54B6(struct aaa *); 			/*.ok   optim: out of memory */
void         sub_5CF5(struct bbb *, int);		/*.ok+  sub_5CF5.c	*/
struct aaa * sub_5DF6(struct aaa *);			/* ok++ sub_5DF6.c	*/
struct aaa * sub_5F52(struct aaa *);			/* ok++ sub_5F52.c	*/
struct aaa * sub_600E(struct aaa *);			/* ok++ sub_600E.c	*/
int	     sub_605E(int);				/*.ok+  sub_605E.c	*/
char	     sub_60A8(struct aaa *, struct aaa *);	/*.ok+  sub_60A8.c	*/
int	     sub_61AA(struct bbb *, int);		/* ok++ sub_61AA.c	*/
int	     sub_6246(struct aaa *, struct aaa *);	/* ok++ 		*/
char	     sub_628F(struct aaa *, struct aaa *);	/* ok++ 		*/
char	     sub_62BE(struct aaa *, struct aaa *);	/* ok++ 		*/
char	     sub_63B8(int, int, int);			/*.ok+  sub_63B8.c	*/
uchar	     sub_6589(int, int);			/*.ok+  sub_6589.c	*/
unsigned     sub_665B(unsigned, char);			/* ok++ 		*/
int	     sub_66BC(int, int, int, char *);		/* ok++ 		*/
/* main.c  ---------------------------------------------------------------------*/
/* int	     main(int, char **);		*/	/* ok++ 		*/

/*
 * To comply with C standard functions are replaced with
 * similar ones with a variable number of parameters
 */
/*void	     faterror(char * fmt, ...);*/	/*sub_6AA2*/	/* ok   sub_6AA2.c	*/
/*void	     warning(char * fmt, ...);*/	/*sub_6AD0*/	/* ok   		*/
/*void	     uerror(char * p1);*/		/*sub_6B1D*/	/* ok++ sub_6B1D.c	*/
/*
 * sub_6B55 excluded because it is unnecessary
 *
void	     sub_6B55(char *, int, char *);
*/
void	   * allocmem(unsigned int);	/*sub_6B9B*/	/* ok++ sub_6B9B.c	*/

/* int	     fprintf(FILE *, char *, int);	*/

int	     sub_6BF5(char *, char *, FILE *);

void 	   * sub_6D1C(char *, int);			/* ok++ sub_6D1C.c	*/
int	     sub_6D61(void);				/* ok++ 		*/
void 	   * cmalloc(unsigned);				/* ok++ 		*/
void	     sub_7028(struct ptr *);			/* ok++ 		*/

int	     sub_708D(char *, int);					/* printf */

int	     getchar(void);
int	     putchar(int);

/*
 * The following declarations may be required to recreate from a binary image
 */
char	     sub_70CB(char);						/* toupper */

/*char	     sub_70F8(struct fcb *, char *);	*/	/* ok++ */	/* def_fcb */

int	     sub_7247(char *, char *, int);				/* sprintf */

int	     sub_7288(int);						/* pputc   */
int	     sub_7325(FILE *, char *, int *);				/* doprnt  */
/* int	     fgetc(FILE *); */
int	     sub_770B(FILE *);						/* filbuf  */
char	     sub_77F5();						/* Test ^c */
/*	     exit(int); */
int	     sub_7855(FILE *);						/* fclose  */
int	     sub_78F0(FILE *);						/* fflush  */

/* End file cgen.h */

/*
 * Debug function declarations
 */
#ifdef DEBUG1
void pr_st_a(struct aaa * st);
void pr_st_b(struct bbb * st);
#endif



*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - zcrtcpm.asm Created 11.03.2019 Last Modified 11.03.2019

;=========================================================
; start
;=========================================================
	psect	text, global, pure
	psect	data, global
	psect	bss, global

	psect	text

	defs	100h		;Base of CP/M's TPA

	global	start, _main, _exit, __Hbss, __Lbss, __argc_, startup

start:	ld	hl,(6)		; base address of fdos
	ld	sp,hl		; stack grows downwards
	ld	de,__Lbss	; Start of BSS segment
	or	a		; clear carry
	ld	hl,__Hbss
	sbc	hl,de		; Size of uninitialized data area
	ld	c,l
	ld	b,h
	dec	bc	
	ld	l,e
	ld	h,d
	inc	de
	ld	(hl),0
	ldir			; Clear memory
	ld	hl,nularg
	push	hl
	ld	hl,80h		; Argument buffer
	ld	c,(hl)
	inc	hl
	ld	b,0
	add	hl,bc
	ld	(hl),0		; zero terminate it
	ld	hl,81h
	push	hl
	call	startup
	pop	bc		; unjunk stack
	pop	bc
	push	hl
	ld	hl,(__argc_)
	push	hl
	call	_main
	push	hl
	call	_exit
	jp	0

	psect	data

nularg:	defb	0

	end	start

; End function start

; End of file zcrtcpm.asm

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 13D.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_13D OK+
;
; The C source is the ver.3 that is closest to  binary code.
; It does not create unnecessary unconditional jumps.
;=========================================================
	global	_array_987D	;	global	_array_987D
	global	_array_990D	;	global	_array_990D
	global	_array_9BD4	;	global	_array_9BD4
	global	_sub_13D	;	global	_sub_13D
	global	ncsv,cret,indir	;	global	csv

	psect	text

;	Disassembled version	; After compiling C source code
_sub_13D:
	call	ncsv		;	call 	csv
	defw	f159		;	push 	hl
	ld	de,_array_987D	;	ld	de,_array_987D
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-2),c	;	ld	(ix+-2),c
	ld	(ix+-1),b	;	ld	(ix+-1),b
	jp	loc_166		;	jp	l15
loc_159:			;l14:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
loc_166:			;l15:
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,_array_990D	;	ld	hl,_array_990D
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	or	a		;	or	a
	jp	nz,loc_178	;	jp	z,l14
	jp	loc_194		;
loc_178:			;
	ld	e,(ix+-2)	;
	ld	d,(ix+-1)	;
	ld	hl,_array_990D	;	ld	hl,_array_990D
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_197	;	jp	z,l14
	jp	loc_194		;
loc_194:			;
	jp	loc_19D		;
loc_197:			;
	jp	loc_19A		;
loc_19A:			;
	jp	loc_159		;
loc_19D:			;
	ld	de,_array_9BD4	;	ld	de,_array_9BD4
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l, a		;	ld	l,a
	jp	loc_1AF		;
loc_1AF:			;
	jp	cret		;	jp	cret
				;
f159	equ	-2		;

; End of function sub_13D

; End of file 13D.asm

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated with original code

; File - 1B2.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_1B2 OK++
;=========================================================
	global	_sub_1B2	;	global	_sub_1B2
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_byte_A46A	;	global	_byte_A46A
	global	_strcmp		;	global	_strcmp
	global	_tnames		;	global	_tnames
	global	brelop		;	global	brelop
	global	csv		;	global	csv

;psect	data	; Data has been temporarily moved to another location.
;
;_tnames:
;F609:
;	defw	19f
;	defw	29f
;	defw	39f
;	defw	49f
;	defw	59f
;	defw	69f
;	defw	79f
;	defw	89f
;	defw	99f
;	defw	109f
;	defw	119f
;	defw	129f
;	defw	139f
;	defw	149f
;	defw	159f
;	defw	169f
;	defw	179f
;	defw	189f
;	defw	199f
;	defw	209f
;	defw	219f
;	defw	229f
;	defw	239f
;	defw	249f
;	defw	259f
;	defw	269f
;	defw	279f
;	defw	289f
;	defw	299f
;	defw	309f
;	defw	319f
;	defw	329f
;	defw	339f
;	defw	349f
;	defw	359f
;	defw	369f
;	defw	379f
;	defw	389f
;	defw	399f
;	defw	409f
;	defw	419f
;	defw	429f
;	defw	439f
;	defw	449f
;	defw	459f
;	defw	469f
;	defw	479f
;	defw	489f
;	defw	499f
;	defw	509f
;	defw	519f
;	defw	529f
;	defw	539f
;	defw	549f
;	defw	559f
;	defw	569f
;	defw	579f
;	defw	589f
;	defw	599f
;	defw	609f
;	defw	619f
;	defw	629f
;	defw	639f
;	defw	649f
;	defw	659f
;	defw	669f
;	defw	679f
;	defw	689f
;	defw	699f
;	defw	709f
;	defw	719f
;	defw	729f
;_byte_A46A:
;F610:	defb	65

	psect	text

_sub_1B2:
; After compiling C source code	;	Disassembled version
	call 	csv		;	call	  csv
	push 	hl		;	push	  hl
	push 	hl		;	push	  hl
	ld	l,(ix+6)	;	ld	  l,(ix+6)
	ld	h,(ix+7)	;	ld	  h,(ix+7)
	push	hl		;	push	  hl
	pop	iy		;	pop	  iy
	ld	(ix+-2),0	;	ld	  (ix+-2),0
	ld	a,(_byte_A46A)	;	ld	  a,(_byte_A46A)
	ld	(ix+-1),a	;	ld	  (ix+-1),a
l14:				;loc_1CA:
	ld	e,(ix+-2)	;	ld	  e,(ix+-2)
	ld	d,0		;	ld	  d,0
	ld	l,(ix+-1)	;	ld	  l,(ix+-1)
	ld	h,d		;	ld	  h,d
	add	hl,de		;	add	  hl,de
	srl	h		;	srl	  h
	rr	l		;	rr	  l
	ld	(ix+-3),l	;	ld	  (ix+-3),l
	ld	de,_tnames	;	ld	  de,_tnames
	ld	h,0		;	ld	  h,0
	add	hl,hl		;	add	  hl,hl
	add	hl,de		;	add	  hl,de
	ld	c,(hl)		;	ld	  c,(hl)
	inc	hl		;	inc	  hl
	ld	b,(hl)		;	ld	  b,(hl)
	push	bc		;	push	  bc
	push	iy		;	push	  iy
	call	_strcmp		;	call	  _strcmp
	pop	bc		;	pop	  bc
	pop	bc		;	pop	  bc
	ld	a,l		;	ld	  a,l
	ld	(ix+-4),a	;	ld	  (ix+-4),a
	or	a		;	or	  a	 
	jr	nz,l15		;	jp	  nz,loc_1FA	<---- Code difference
	ld	l,(ix+-3)	;	ld	  l,(ix+-3)
	jp	cret		;	jp	  cret
l15:				;loc_1FA:
	ld	a,(ix+-4)	;	ld	  a,(ix+-4)
	or	a		;	or	  a
	ld	a,(ix+-3)	;	ld	  a,(ix+-3)
	jp	p,L1		;	jp	  p,loc_20B
	add	a,255		;	add	  a,0FFh	
	ld	(ix+-1),a	;	ld	  (ix+-1),a
	jr	l12		;	jp	  loc_20F	<---- Code difference
L1:				;loc_20B:
	inc	a		;	inc	  a
	ld	(ix+-2),a	;	ld	  (ix+-2),a
l12:				;loc_20F:	
	ld	b,(ix+-2)	;	ld	  b,(ix+-2)
	ld	a,(ix+-1)	;	ld	  a,(ix+-1)
	call	brelop		;	call	  brelop	
	jr	nc,l14		;	jp	  nc,loc_1CA	<---- Code difference
	ld	l,255		;	ld	  l,255	
	jp	cret		;	jp	  cret		

; End of function sub_1B2 OK++

;=========================================================
; gethashptr OK++
;=========================================================
	global	_gethashptr	;	global	_gethashptr
	global	_hashtab	;	global	_hashtab
	global	lmod		;	global	lmod
	global 	csv		;	global 	csv

; After compiling C source code	;	Disassembled version
_gethashptr:
	call 	csv		;	call	  csv
	push 	hl		;	push	  hl
	ld	l,(ix+6)	;	ld	  l,(ix+6)
	ld	h,(ix+7)	;	ld	  h,(ix+7)
	push	hl		;	push	  hl
	pop	iy		;	pop	  iy
	ld	(ix+-2),0	;	ld	  (ix+-2),0
	ld	(ix+-1),0	;	ld	  (ix+-1),0
	jr	l19		;	jp	  loc_24B	<---- Code difference
l20:				;loc_236:
	ld	e,(iy+0)	;	ld	  e,(iy+0)
	ld	d,0		;	ld	  d,0
	ld	l,(ix+-2)	;	ld	  l,(ix+-2)
	ld	h,(ix+-1)	;	ld	  h,(ix+-1)
	add	hl,hl		;	add	  hl,hl
	add	hl,de		;	add	  hl,de
	ld	(ix+-2),l	;	ld	  (ix+-2),l
	ld	(ix+-1),h	;	ld	  (ix+-1),h
	inc	iy		;	inc	  iy
l19:				;loc_24B:
	ld	a,(iy+0)	;	ld	  a,(iy+0)
	or	a		;	or	  a
	jr	nz,l20		;	jp	  nz,loc_236	<---- Code difference
	ld	de,101		;	ld	  de,65h
	ld	l,(ix+-2)	;	ld	  l,(ix+-2)
	ld	h,(ix+-1)	;	ld	  h,(ix+-1)
	call	lmod		;	call	  lmod
	add	hl,hl		;	add	  hl, hl
	ld	de,_hashtab	;	ld	  de,_hashtab
	add	hl,de		;	add	  hl,de
	jp	cret		;	jp	  cret

; End of function gethashptr OK++

;=========================================================
; sub_265 OK++
;=========================================================
	global	_sub_265	;	global	_sub_265
	global	_allocmem	;	global	_allocmem
	global	_strlen		;	global	_strlen
	global	_strcpy		;	global	_strcpy
	global	_nstdpth	;	global	_nstdpth
	global 	csv		;	global 	csv

; After compiling C source code	;	Disassembled version
_sub_265:
	call 	csv		;	call	  csv
	push 	hl		;	push	  hl
	ld	l,(ix+6)	;	ld	  l,(ix+6)
	ld	h,(ix+7)	;	ld	  h,(ix+7)
	push	hl		;	push	  hl
	call	_gethashptr	;	call	  _gethashptr
	pop	bc		;	pop	  bc
	ld	(ix+-2),l	;	ld	  (ix+-2),l
	ld	(ix+-1),h	;	ld	  (ix+-1),h
	ld	c,(hl)		;	ld	  c,(hl)
	inc	hl		;	inc	  hl
	ld	b,(hl)		;	ld	  b,(hl)
	push	bc		;	push	  bc
	pop	iy		;	pop	  iy	
	jr	l23		;	jp	  loc_2A8	<---- Code difference
l24:				;loc_282:
	ld	l,(ix+6)	;	ld	  l,(ix+6)
	ld	h,(ix+7)	;	ld	  h,(ix+7)
	push	hl		;	push	  hl
	ld	l,(iy+0)	;	ld	  l,(iy+0)
	ld	h,(iy+1)	;	ld	  h,(iy+1)
	push	hl		;	push	  hl
	call	_strcmp		;	call	  _strcmp
	pop	bc		;	pop	  bc		
	pop	bc		;	pop	  bc
	ld	a,l		;	ld	  a,l
	or	h		;	or	  h
	jr	nz,l26		;	jp	  nz,loc_29F	<---- Code difference
L2:				;loc_299:
	push	iy		;	push	  iy
	pop	hl		;	pop	  hl
	jp	cret		;	jp	  cret
l26:				;loc_29F:
	ld	l,(iy+7)	;	ld	  l,(iy+7)
	ld	h,(iy+8)	;	ld	  h,(iy+8)
	push	hl		;	push	  hl
	pop	iy		;	pop	  iy
l23:				;loc_2A8:
	push	iy		;	push	  iy
	pop	hl		;	pop	  hl
	ld	a,l		;	ld	  a,l
	or	h		;	or	  h
	jr	nz,l24		;	jp	  nz,loc_282	<---- Code difference
	ld	hl,22		;	ld	  hl,16h
	push	hl		;	push	  hl
	call	_allocmem	;	call	  _allocmem
	pop	bc		;	pop	  bc
	push	hl		;	push	  hl
	pop	iy		;	pop	  iy
	ld	l,(ix+-2)	;	ld	  l,(ix+-2)
	ld	h,(ix+-1)	;	ld	  h,(ix+-1)
	ld	c,(hl)		;	ld	  c,(hl)
	inc	hl		;	inc	  hl
	ld	b,(hl)		;	ld	  b,(hl)
	ld	(iy+7),c	;	ld	  (iy+7),c
	ld	(iy+8),b	;	ld	  (iy+8),b	
	ld	l,(ix+6)	;	ld	  l,(ix+6)
	ld	h,(ix+7)	;	ld	  h,(ix+7)
	push	hl		;	push	  hl
	call	_strlen		;	call	  _strlen
	pop	bc		;	pop	  bc
	inc	hl		;	inc	  hl
	push	hl		;	push	  hl
	call	_allocmem	;	call	  _allocmem
	ld	(iy+0),l	;	ld	  (iy+0),l
	ld	(iy+1),h	;	ld	  (iy+1),h
	ld	l,(ix+6)	;	ld	  l,(ix+6)
	ld	h,(ix+7)	;	ld	  h,(ix+7)
	ex	(sp),hl		;	ex	  (sp),hl
	ld	l,(iy+0)	;	ld	  l,(iy+0)
	ld	h,(iy+1)	;	ld	  h,(iy+1)
	push	hl		;	push	  hl
	call	_strcpy		;	call	  _strcpy
	pop	bc		;	pop	  bc
	pop	bc		;	pop	  bc
	ld	a,(_nstdpth)	;	ld	  a,(_nstdpth)
	ld	(iy+4),a	;	ld	  (iy+4),a
	push	iy		;	push	  iy
	pop	de		;	pop	  de
	ld	l,(ix+-2)	;	ld	  l,(ix+-2)
	ld	h,(ix+-1)	;	ld	  h,(ix+-1)
	ld	(hl),e		;	ld	  (hl),e
	inc	hl		;	inc	  hl
	ld	(hl),d		;	ld	  (hl),d		
	jr	L2		;	jp	  loc_299	<---- Code difference

;psect	data	; Data has been temporarily moved to another location.

;19:	defb	0
;29:	defb	33,0
;39:	defb	33,61,0
;49:	defb	35,0
;59:	defb	36,0
;69:	defb	36,85,0
;79:	defb	37,0
;89:	defb	38,0
;99:	defb	38,38,0
;109:	defb	38,85,0
;119:	defb	40,0
;129:	defb	41,0
;139:	defb	42,0
;149:	defb	42,85,0
;159:	defb	43,0
;169:	defb	43,43,0
;179:	defb	43,85,0
;189:	defb	44,0
;199:	defb	45,0
;209:	defb	45,45,0
;219:	defb	45,62,0
;229:	defb	45,85,0
;239:	defb	46,0
;249:	defb	46,46,0
;259:	defb	47,0
;269:	defb	58,0
;279:	defb	58,85,0
;289:	defb	58,115,0
;299:	defb	59,0
;309:	defb	59,59,0
;319:	defb	60,0
;329:	defb	60,60,0
;339:	defb	60,61,0
;349:	defb	61,0
;359:	defb	61,37,0
;369:	defb	61,38,0
;379:	defb	61,42,0
;389:	defb	61,43,0
;399:	defb	61,45,0
;409:	defb	61,47,0
;419:	defb	61,60,60,0
;429:	defb	61,61,0
;439:	defb	61,62,62,0
;449:	defb	61,94,0
;459:	defb	61,124,0
;469:	defb	62,0
;479:	defb	62,61,0
;489:	defb	62,62,0
;499:	defb	63,0
;509:	defb	64,0
;519:	defb	91,92,0
;529:	defb	91,97,0
;539:	defb	91,99,0
;549:	defb	91,101,0
;559:	defb	91,105,0
;569:	defb	91,115,0
;579:	defb	91,117,0
;589:	defb	91,118,0
;599:	defb	94,0
;609:	defb	123,0
;619:	defb	124,0
;629:	defb	124,124,0
;639:	defb	125,0
;649:	defb	126,0
;659:	defb	82,69,67,73,80,0
;669:	defb	84,89,80,69,0
;679:	defb	73,68,0
;689:	defb	67,79,78,83,84,0
;699:	defb	70,67,79,78,83,84,0
;709:	defb	82,69,71,0
;719:	defb	73,78,65,82,69,71,0
;729:	defb	66,73,84,70,73,69,76,68,0

	psect	text

; End of function sub_265 OK++

; End of file - 1B2.as */

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 306.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_306 OK+
;=========================================================
	global	_sub_306	;	global	_sub_306
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_buffer		;	global	_buffer
	global	_getchar	;	global	_getchar
	global	__ctype_	;	global	__ctype_
	global	_lineno		;	global	_lineno
	global	_atoi		;	global	_atoi
	global	_strncpy	;	global	_strncpy
	global	_progname	;	global	_progname
	global	_putchar	;	global	_putchar
	global  csv		;	global  csv

	psect	text

;	Disassembled version	; After compiling C source code
_sub_306:
	call	csv		;	call	csv
	push	hl		;	push	hl
	push	hl		;	push	hl
	ld	(ix+-4),0	;	ld	(ix+-4),0
	ld	(ix+-3),0	;	ld	(ix+-3),0
loc_313:			;l12:
	ld	iy,_buffer	;	ld	iy,_buffer
loc_317:			;l17:
	call	_getchar	;	call	_getchar
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	de, -1		;	ld	de,-1
	or	a		;	or	a
	sbc	hl, de		;	sbc	hl,de
	jr	nz, loc_33B	;	jp	nz,l15
loc_328:			;			   <----+
	ld	de, -1		;				; Unnecessary
	ld	l, (ix+-2)	;				; comparison,
	ld	h, (ix+-1)	;				; it was performed
	or	a		;				; in the previous
	sbc	hl, de		;				; step
	jr	nz, loc_34B	;			   <----+
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	jp	cret		;	jp	cret
loc_33B:			;l15:
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	3,(hl)		;	bit	3,(hl)
	jr	nz,loc_317	;	jp	nz,l17
	jr	loc_328		;			   <----; Not required
loc_34B:			;
	ld	a,(ix+-2)	;	ld	a,e
	ld	(iy+0),a	;	ld	(iy+0),a
	inc	iy		;	inc	iy
loc_353:			;l21:
	call	_getchar	;	call	_getchar
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	(iy+0),l	;	ld	(iy+0),l
	inc	iy		;	inc	iy
	ld	de,-1		;	ld	de,-1
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_377	;	jp	z,l20
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	3,(hl)		;	bit	3,(hl)
	jr	z,loc_353	;	jp	z,l21
loc_377:			;l20:
	ld	de,-1		;	ld	de,-1
	add	iy,de		;	add	iy,de
	ld	(iy+0),0	;	ld	(iy+0),0
	ld	a,(_buffer)	;	ld	a,(_buffer)
	cp	34		;	cp	34
	jr	nz,loc_3AD	;	jp	nz,l23
	ld	hl,_buffer+1	;	ld	hl,_buffer+1
	push	hl		;	push	hl
	call	_atoi		;	call	_atoi
	pop	bc		;	pop	bc
	ld	(_lineno),hl	;	ld	(_lineno),hl
	ld	de,10		;	ld	de,10
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	ld	hl,1		;
	jr	nz,loc_3A4	;	jp	nz,L4
				;	ld	hl,0   <----+ Could not find operators
	dec	hl		;	jp	L3	    ; in C language generating
				;	L4:		    ; code that exactly matches
				;	ld	hl,1   <----+ binary codes
loc_3A4:			;L3:		
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	jp	loc_313		;	jp	l12
loc_3AD:			;l23:
	ld	a,(ix+-4)	;	ld	a,(ix+-4)
	or	(ix+-3)		;	or	(ix+-3)
	jr	z,loc_3D2	;	jp	z,l24
	ld	hl,39		;	ld	hl,39
	push	hl		;	push	hl
	ld	hl,_buffer	;	ld	hl,_buffer
	push	hl		;	push	hl
	ld	hl,_progname	;	ld	hl,_progname
	push	hl		;	push	hl
	call	_strncpy	;	call	_strncpy
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-4),0	;	ld	(ix+-4),0
	ld	(ix+-3),0	;	ld	(ix+-3),0
	jp	loc_313		;	jp	l12
loc_3D2:			;l24:
	ld	a,(_buffer)	;	ld	a,(_buffer)
	cp	59		;	cp	59
	jr	nz,loc_400	;	jp	nz,L1
	ld	hl,_buffer+1	;	ld	hl,_buffer+1
	ld	a,(hl)		;	ld	a,(hl)
	cp	59		;	cp	59
	jr	nz,loc_400	;	jp	z,l28
				;L1:
				;	ld	hl,_buffer
				;	jp	cret
loc_3E1:			;l28:
	call	_getchar	;	call	_getchar
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	push	hl		;	push	hl
	call	_putchar	;	call	_putchar
	pop	bc		;	pop	bc
	ld	de,10		;	ld	de,10
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_3E1	;	jp	nz,l28
	jp	loc_313		;	jp	l12
loc_400:			;
	ld	hl,_buffer	;
	jp	cret		;

; End of function sub_306 OK+

; End of file 306.asm



*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 406.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_406 OK+
;=========================================================
	global	d_6c8_A3B6

	global	_sub_406	;	global	_sub_406
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_hashtab	;	global	_hashtab
	global	_word_B017	;	global	_word_B017
	global	_array_AAE8	;	global	_array_AAE8
	global	_sub_5CF5	;	global	_sub_5CF5
	global	_nstdpth	;	global	_nstdpth
	global	wrelop		;	global	wrelop
	global	_sub_7028	;	global	_sub_7028
	global	_lvlidx		;	global	_lvlidx
	global	_array_AE57	;	global	_array_AE57
	global	_array_AEDB	;	global	_array_AEDB
	global	_sub_BEE	;	global	_sub_BEE
	global	_sub_BCC	;	global	_sub_BCC
	global	_array_AE13	;	global	_array_AE13

	psect	text

;	Disassembled version	; After compiling C source code
_sub_406:
	call 	ncsv		;	call 	ncsv
	defw 	0FFF4h		;	defw 	-12
	ld	(ix+-4),65h	;	ld	(ix+-4),101
	ld	(ix+-3),0	;	ld	(ix+-3),0
	ld	hl,_hashtab	;	ld	hl,_hashtab
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
loc_41C:			;l14:				; m1:
	ld	(ix+-6),0	;	ld	(ix+-6),0
	ld	(ix+-5),0	;	ld	(ix+-5),0
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
loc_42E:			;L7:				; m2:
	pop	iy		;	pop	iy
	jp	loc_51C		;	jp	l15
loc_433:			;l16:				; m3:
	ld	a,(iy+2)	;	ld	a,(iy+2)
	cp	39h		;	cp	57
	jp	nz, loc_4AD	;	jp	nz,l18
	ld	a, (iy+15h)	;	ld	a,(iy+21)
	cp	2		;	cp	2
	jr	nz,loc_45C	;	jp	nz,l19
	ld	de,_array_AAE8	;	ld	de,_array_AAE8
	ld	l,(iy+13h)	;	ld	l,(iy+19)
	ld	h,(iy+14h)	;	ld	h,(iy+20)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c, (hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b, (hl)		;	ld	b,(hl)
	ld	hl,(_word_B017)	;	ld	hl,(_word_B017)
	ld	a,l		;	ld	a,l
	or	c		;	or	c
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	or	b		;	or	b
	ld	h,a		;	ld	h,a
	ld	(_word_B017),hl	;	ld	(_word_B017),hl
loc_45C:			;l19:				; m4:
	ld	a,(iy+15h)	;	ld	a,(iy+21)
	cp	4		;	cp	4
	jr	z,loc_467	;	jp	z,L5
	cp	3		;	cp	3
	jr	nz,loc_46D	;	jp	nz,l20
loc_467:			;L5:				; m5:
		  		;	ld	hl,(_empty)	    <----+ Add
		  		;	push	hl		    <----+ parameter
	push	iy		;	push	iy			  . "empty"
	call	_sub_5CF5	;	call	_sub_5CF5		  .
	pop	bc		;	pop	bc			  .
		 		;	pop	bc		    <----+
loc_46D:			;l20:				; m6:
	ld	de,(_nstdpth)	;	ld	de,(_nstdpth)
	ld	hl,0		;	ld	hl,0
	call	wrelop		;	call	wrelop
	jr	nc,loc_4AD	;	jp	nc,l18
	ld	a,(iy+15h)	;	ld	a,(iy+21)
	cp	3		;	cp	3
	jr	nz,loc_4AD	;	jp	nz,l18
	ld	l,(iy+7)	;	ld	l,(iy+7)
	ld	h,(iy+8)	;	ld	h,(iy+8)
	ld	(ix+-8),l	;	ld	(ix+-8),l
	ld	(ix+-7),h	;	ld	(ix+-7),h
	ld	l,(ix+-6)	;	ld	l,(ix+-6)
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	ld	(iy+7),l	;	ld	(iy+7),l
	ld	(iy+8),h	;	ld	(iy+8),h
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	dec	(iy+4)		;	dec	(iy+4)
	ld	l,(ix+-8)	;	ld	l,(ix+-8)
	ld	h,(ix+-7)	;	ld	h,(ix+-7)
	push	hl		;	push	hl
	jr	loc_42E		;	jp	L7
loc_4AD:			;l18:				; m7:
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,(iy+1)	;	ld	h,(iy+1)
	push	hl		;	push	hl
	call	_sub_7028	;	call	_sub_7028
	pop	bc		;	pop	bc
	ld	a,(iy+2)	;	ld	a,(iy+2)
	cp	38h		;	cp	56
	jr	z,loc_4C3	;	jp	z,L3
	cp	37h		;	cp	55
	jr	nz,loc_50D	;	jp	nz,l23
loc_4C3:			;L3:				; m8:
	ld	l,(iy+13h)	;	ld	l,(iy+19)
	ld	h,(iy+14h)	;	ld	h,(iy+20)
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-12),c	;	ld	(ix+-12),c
	ld	(ix+-11),b	;	ld	(ix+-11),b	;     l6 = *(sb->b_i12);
	inc	hl		;	inc	hl
	ld	(ix+-10),l	;	ld	(ix+-10),l
	ld	(ix+-9),h	;	ld	(ix+-9),h	;     l5 = sb->b_i12 + 1;
	jr	loc_4F0		;	jp	l24		;     goto m10;
loc_4DB:			;l25:				; m9:
	ld	l,(ix+-10)	;	ld	l,(ix+-10)
	ld	h,(ix+-9)	;	ld	h,(ix+-9)
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	inc	hl		;	inc	hl
	ld	(ix+-10),l	;	ld	(ix+-10),l
	ld	(ix+-9),h	;	ld	(ix+-9),h
	push	bc		;	push	bc
	call	_sub_7028	;	call	_sub_7028	;     sub_7028((l5++)->next_ptr);
	pop	bc		;	pop	bc
loc_4F0:			;l24:				; m10:
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	dec	hl		;	dec	hl
	ld	(ix+-12),l	;	ld	(ix+-12),l
	ld	(ix+-11),h	;	ld	(ix+-11),h
	inc	hl		;	inc	hl
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_4DB	;	jp	nz,l25		; if(l6-- != 0) goto m9;
	ld	l,(iy+13h)	;	ld	l,(iy+19)
	ld	h,(iy+14h)	;	ld	h,(iy+20)
	push	hl		;	push	hl
	call	_sub_7028	;	call	_sub_7028	; sub_7028((struct ptr *)sb->b_i12);
	pop	bc		;	pop	bc
loc_50D:			;l23:				; m11:
	push	iy		;	push	iy
	call	_sub_7028	;	call	_sub_7028	; sub_7028((struct ptr *)sb);
	pop	bc		;	pop	bc
	ld	l,(iy+7)	;	ld	l,(iy+7)
	ld	h,(iy+8)	;	ld	h,(iy+8)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_51C:			;l15:				; m12:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_532	;	jp	z,l17
	ld	de,(_nstdpth)	;	ld	de,(_nstdpth)
	ld	l,(iy+4)	;	ld	l,(iy+4)
	ld	h,0		;	ld	h,0
	or	a		;	or	a
	sbc	hl, de		;	sbc	hl,de
	jp	z,loc_433	;	jp	z,l16
loc_532:			;l17:				; m13:
	ld	a,(ix+-6)	;	ld	a,(ix+-6)
	or	(ix+-5)		;	or	(ix+-5)
	jr	z,loc_583	;	jp	z,l27
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	jr	loc_568		;	jp	l28
loc_555:			;l29:				; m14:
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	ld	hl,7		;	ld	hl,7
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-6),c	;	ld	(ix+-6),c
	ld	(ix+-5),b	;	ld	(ix+-5),b
loc_568:			;l28:				; m15:
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	ld	hl,7		;	ld	hl,7
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	or	(hl)		;	or	(hl)
	jr	nz,loc_555	;	jp	nz,l29
	ld	hl,7		;	ld	hl,7
	add	hl,de 		;	add	hl,de
	push	iy		;	push	iy
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	jr	loc_599		;	jp	l12
loc_583:			;l27:				; m16:
	push	iy		;	push	iy
	pop	de		;	pop	de
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h;
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
loc_599:			;l12:				; m17:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	dec	hl		;	dec	hl
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	nz,loc_41C	;	jp	nz,l14
	ld	hl,(_nstdpth)	;	ld	hl,(_nstdpth)
	dec	hl		;	dec	hl
	ld	(_nstdpth),hl	;	ld	(_nstdpth),hl
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	bit	7, h		;	bit	7,h
	jp	nz, cret	;	jp	nz,cret
	ld	de,_array_AE57	;	ld	de,_array_AE57
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	de,(_nstdpth)	;	ld	de,(_nstdpth)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,cret		;	jp	nz,cret
	ld	de,_array_AEDB	;	ld	de,_array_AEDB
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	pop	iy		;	pop	iy
	ld	l,(iy+0Fh)	;	ld	l,(iy+15)
	ld	h,(iy+10h)	;	ld	h,(iy+16)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	cp	55		;	cp	55
	jr	nz,loc_601	;	jp	nz,l34
	bit	2,(iy+0Dh)	;	bit	2,(iy+13)
	jr	nz,loc_601	;	jp	nz,l34
	ld	l,(iy+9)	;	ld	l,(iy+9)
	ld	h,(iy+0Ah)	;	ld	h,(iy+10)
	push	hl		;	push	hl
	ld	l,(iy+11h)	;	ld	l,(iy+17)
	ld	h,(iy+12h)	;	ld	h,(iy+18)
	push	hl		;	push	hl
	call	_sub_BEE	;	call	_sub_BEE
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
loc_601:			;l34:				; m18:
	ld	de,_array_AE13	;	ld	de,_array_AE13
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	l,(iy+11h)	;	ld	l,(iy+17)
	ld	h,(iy+12h)	;	ld	h,(iy+18)
	push	hl		;	push	hl
	call	_sub_BCC	;	call	_sub_BCC
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	dec	hl		;	dec	hl
	ld	(_lvlidx),hl	;	ld	(_lvlidx),hl
	ld	hl,17Fh		;	ld	hl,383
	ld	(_word_B017),hl	;	ld	(_word_B017),hl
	jp	cret		;	jp	cret

; End of function sub_406 OK+

;=========================================================
; sub_627 OK++
;=========================================================
	global	_sub_627	;	global	_sub_627
	global	asll		;	global	asll
	global	__ctype_	;	global	__ctype_
	global	asll		;	global	asll
	global	aslr		;	global	aslr
	global	_sub_265	;	global	_sub_265
	global 	csv		;

	psect	text

;	Disassembled version	; After compiling C source code	
_sub_627:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	(ix+-2),0	;	ld	(ix+-2),0
	ld	(ix+-1),0	;	ld	(ix+-1),0
	inc	iy		;	inc	iy
loc_63E:			;l39:
	ld	b,2		;	ld	b,2
	push	ix		;	push	ix
	pop	hl		;	pop	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	call	asll		;	call	asll
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	28h		;	cp	40
	jr	nz,loc_657	;	jp	nz,l40
	set	1,(ix+-2)	;	set	1,(ix+-2)
	inc	iy		;	inc	iy
	jr	loc_664		;	jp	l37
loc_657:			;l40:
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	2Ah		;	cp	42
	jr	nz,loc_664	;	jp	nz,l37
	set	0,(ix+-2)	;	set	0,(ix+-2)
	inc	iy		;	inc	iy
loc_664:			;l37:
	ld	a,(iy+0)	;	ld	a,(iy+0)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	and	7		;	and	7
	or	a		;	or	a
	jr	nz,loc_67A	;	jp	nz,l38
	ld	a,e		;	ld	a,e
	cp	5Fh		;	cp	95
	jr	nz,loc_63E	;	jp	nz,l39
loc_67A:			;l38:
	ld	de,0		;	ld	de,0
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	jr	loc_6B7		;	jp	l43
loc_688:			;l44:
	ld	b,2		;	ld	b,2
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	call	asll		;	call	asll
	ld	a,(ix+-2)	;	ld	a,(ix+-2)
	and	3		;	and	3
	ld	e,a		;	ld	e,a
	xor	a		;	xor	a
	ld	d,a		;	ld	d,a
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	or	e		;	or	e
	ld	c,a		;	ld	c,a
	ld	a,b		;	ld	a,b
	or	d		;	or	d
	ld	b, a		;	ld	b,a
	ld	(hl),b		;	ld	(hl),b
	dec	hl		;	dec	hl
	ld	(hl),c		;	ld	(hl),c
	ld	b,2		;	ld	b,2
	push	ix		;	push	ix
	pop	hl		;	pop	hl
	dec	hl		;	dec	hl
	dec	hl 		;	dec	hl
	call	aslr		;	call	aslr
loc_6B7:			;l43:
	ld	a,(ix+-2)	;	ld	a,(ix+-2)
	or	(ix+-1)		;	or	(ix+-1)
	jr	nz,loc_688	;	jp	nz,l44
	push	iy		;	push	iy
	call	_sub_265	;	call	_sub_265
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret

; End of function sub_627 OK++

;=========================================================
; sub_6C8 OK++
;=========================================================
	global	_sub_6C8	;	_sub_6C8
	global	_faterror	;	_faterror

;	Disassembled version	; After compiling C source code
_sub_6C8:
	ld	hl,d_6c8_A3B6	;	ld	hl,19f
	push	hl		;	push	hl
	call	_faterror	;	call	_faterror		
	pop	bc		;	pop	bc
	ret			;	ret				

	psect	data

;d_6c8_A3B6:
;19:	;	"Bad int. code"
;	defb	66,97,100,32,105,110,116,46,32,99,111,100,101,0

;	psect	text

; End of function sub_6C8 OK++


; End of file 406.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 6D1.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_6D1
;
; Compiler generates identical code from restored source
; program in C, however, location of branches associated
; with case constants is different from original.
; This does not affect the function.
;=========================================================

	global	d_6c8_A3B6

	global	_sub_6D1	;	global	_sub_6D1
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_word_B017	;	global	_word_B017
	global	_sub_E43	;	global	_sub_E43
	global	_sub_793	;	global	_sub_793
	global	_sub_1B0C	;	global	_sub_1B0C
	global	_selpsect	;	global	_selpsect
	global	_sub_3DC9	;	global	_sub_3DC9
	global	_sub_4192	;	global	_sub_4192
	global	_sub_76F	;	global	_sub_76F
	global	_sub_B19	;	global	_sub_B19
	global	_sub_19C1	;	global	_sub_19C1
	global	_sub_17E0	;	global	_sub_17E0
	global	_nstdpth	;	global	_nstdpth
	global	_sub_406	;	global	_sub_406
	global	_sub_6C8	;	global	_sub_6C8
	global	_sub_1B2	;	global	_sub_1B2
	global	_sub_306	;	global	_sub_306
	global	csv

	psect	text

;	Disassembled version	; After compiling C source code
_sub_6D1:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	hl,17Fh		;	ld	hl,383
	ld	(_word_B017),hl	;	ld	(_word_B017),hl
loc_6DB:			;l15:
	call	_sub_306	;	call	_sub_306
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	de, -1		;	ld	de, -1
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_6EF	;	jp	nz,l16
	call	_sub_406	;	call	_sub_406
	jp	cret		;	jp	cret
loc_6EF:			;l16:
	push	iy		;	push	iy
	call	_sub_1B2	;	call	_sub_1B2
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	(ix+-2),e	;	ld	(ix+-2),e
	ld	(ix+-1),d	;	ld	(ix+-1),d
	ld	hl,0FFCEh	;	ld	hl,-50
	add	hl,de		;	add	hl,de
	xor	a		;	xor	a
	cp	h		;	cp	h
	jp	c,loc_769	;	jp	c,l30
	jr	nz,loc_710	;	jp	nz,L1
	ld	a,0Ch		;	ld	a,12
	cp	l		;	cp	l
	jr	c,loc_769	;	jp	c,l30
loc_710:			;L1:
	add	hl,hl		;	add	hl,hl
	ld	de,off_A39C	;	ld	de,S162
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	jp	(hl)		;	jp	(hl)
loc_71A:			;l25:
	ld	hl,(_nstdpth)	;	ld	hl,(_nstdpth)
	inc	hl		;	inc	hl
	ld	(_nstdpth),hl	;	ld	(_nstdpth),hl
	jr	loc_6DB		;	jp	l15
loc_723:			;l26:
	call	_sub_406	;	call	_sub_406
	jr	loc_6DB		;	jp	l15
loc_728:			;l20:
	ld	hl,2		;	ld	hl,2
	push	hl		;	push	hl
	call	_selpsect	;	call	_selpsect
	pop	bc		;	pop	bc
	call	_sub_4192	;	call	_sub_4192
	push	hl		;	push	hl
	call	_sub_3DC9	;	call	_sub_3DC9
	ld	hl,5Dh		;	ld	hl,93
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_76F	;	call	_sub_76F
loc_73E:			;L2:
	pop	bc		;	pop	bc
	jr	loc_6DB		;	jp	l15
loc_741:			;l24:
	call	_sub_17E0	;	call	_sub_17E0
	jr	loc_6DB		;	jp	l15
				;l22:
loc_746:			;l23:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;push	hl
	call	_sub_19C1	;	call	_sub_19C1
	jr	loc_73E		;	jp	L2
loc_752:			;l17:
	call	_sub_E43	;	call	_sub_E43
	jr	loc_6DB		;	jp	l15
loc_757:			;l19:
	call	_sub_1B0C	;	call	_sub_1B0C
	jp	loc_6DB		;	jp	l15
loc_75D:			;l21:
	call	_sub_B19	;	call	_sub_B19
	jp	loc_6DB		;	jp	l15
loc_763:			;l18:
	call	_sub_793	;	call	_sub_793
	jp	loc_6DB		;	jp	l15
				;l27:
				;l28:
				;l29:
loc_769:			;l30:
	call	_sub_6C8	;	call	_sub_6C8
	jp	loc_6DB		;	jp	l15

; End of function _sub_6D1 OK+

	psect	data

off_A39C:				
	defw	loc_752		;	defw	l17
	defw	loc_763		;	defw	l18
	defw	loc_757		;	defw	l19
	defw	loc_728		;	defw	l20
	defw	loc_75D		;	defw	l21
	defw	loc_746		;	defw	l22
	defw	loc_746		;	defw	l23
	defw	loc_741		;	defw	l24
	defw	loc_769		;	defw	l27
	defw	loc_71A		;	defw	l25
	defw	loc_769		;	defw	l28
	defw	loc_769		;	defw	l29
	defw	loc_723		;	defw	l26

d_6c8_A3B6:
19:	;	"Bad int. code"
	defb	66,97,100,32,105,110,116,46,32,99,111,100,101,0

	psect	text

; End of file 6D1.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 76F.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_76F
;=========================================================
	global	_sub_76F	;	global	_sub_76F
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_getchar	;	global	_getchar
	global	__ctype_	;	global	__ctype_
	global	_sub_6C8	;	global	_sub_6C8
	global 	csv

	psect	text

;	Disassembled version	; After compiling C source code	
_sub_76F:
	call	csv		;	call csv
	push	hl		;	push hl
loc_773:			;l14:
	call	_getchar	;	call	_getchar
	ld	(ix+-1),l	;	ld	(ix+-1),l
	ld	a,l		;	ld	a,l
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	3,(hl)		;	bit	3,(hl)
 	jr	nz,loc_773	;	jp	nz,l14
	ld	a,e		;	ld	a,e
	cp	(ix+6)		;	cp	(ix+6)
	jp	z, cret		;	jp	z,cret
	call	_sub_6C8	;	call	_sub_6C8
	jp	cret		;	jp	cret

; End of function sub_76F OK++

;=========================================================
; sub_793
;=========================================================
	global	_sub_793	;	global	_sub_793
	global	_selpsect	;	global	_selpsect
	global	_sub_2BD0	;	global	_sub_2BD0
	global	_sub_600E	;	global	_sub_600E
	global	_sub_43EF	;	global	_sub_43EF
	global	_sub_4192	;	global	_sub_4192
	global	_sub_306	;	global	_sub_306
	global	_atoi		;	global	_atoi
	global	_sub_155D	;	global	_sub_155D

;	Disassembled version	; After compiling C source code
_sub_793:
	call 	ncsv		;	call 	ncsv
	defw	0FBFEh		;	defw 	-1026
	ld	hl,3		;	ld	hl,3
	push	hl		;	push	hl
	call	_selpsect	;	call	_selpsect
	ld	hl,0		;	ld	hl,0
	ex	(sp),hl		;	ex	(sp),hl
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	call	_sub_4192	;	call	_sub_4192
	push	hl		;	push	hl
	ld	hl,1Bh		;	ld	hl,27
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	ld	hl,1Ah		;	ld	hl,26
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_600E	;	call	_sub_600E
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_2BD0	;	call	_sub_2BD0
	pop	bc		;	pop	bc
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FBFEh	;	ld	hl,-1026
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_7D1:			;l17:
	call	_sub_306	;	call	_sub_306
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	a, (hl)		;	ld	a,(hl)
	cp	5Dh		;	cp	93
	jr	z,loc_7EB	;	jp	z,l18
	push	hl		;	push	hl
	call	_atoi		;	call	_atoi
	pop	bc		;	pop	bc
	ld	(iy+0),l	;	ld	(iy+0),l
	inc	iy		;	inc	iy
	jr	loc_7D1		;	jp	l17
loc_7EB:			;l18:
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FBFEh	;	ld	hl,-1026
	add	hl,de		;	add	hl,de
	ex	de,hl		;	ex	de,hl
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	push	hl		;	push	hl
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FBFEh	;	ld	hl,-1026
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	call	_sub_155D	;	call	_sub_155D
	jp	cret		;	jp	cret

; End of function sub_793 OK++

; End of file 76F.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 808.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_808 OK+
;
; Generated code is completely identical, except for
; incomprehensible code inside function that does not
; affect program logic
;
; Warting!
;   The original executable file contains additional code
;   that does not affect the logic of the function.
;=========================================================
	global	_sub_808	;	global	_sub_808
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_sub_475C	;	global	_sub_475C
	global	_sub_1CC4	;	global	_sub_1CC4
	global	amod		;	global	amod
	global	amod		;	global	amod
	global	_sub_CDF	;	global	_sub_CDF
	global	_sub_43EF	;	global	_sub_43EF
	global	_sub_415E	;	global	_sub_415E
	global	allsh		;	global	allsh
	global	_sub_4192	;	global	_sub_4192
	global	_nodesize	;	global	_nodesize
	global	_sub_2BD0	;	global	_sub_2BD0
	global	_sub_600E	;	global	_sub_600E
	global	wrelop		;	global	wrelop
	global	wrelop		;	global	wrelop
	global	_uerror		;	global	_uerror

	psect	text

;	Disassembled version	; After compiling C source code
_sub_808:
	call 	ncsv		;	call 	ncsv
	defw 	0FFF4h		;	defw 	-12
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	(ix+-2),0	;	ld	(ix+-2),0
	ld	(ix+-1),0	;	ld	(ix+-1),0
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	cp	1Ah		;	cp	26
	jp	nz,loc_A95	;	jp	nz,l13
	push	hl		;	push	hl
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
	ld	(ix+-10),0	;	ld	(ix+-10),0
	ld	(ix+-9),0	;	ld	(ix+-9),0
	ld	a,(iy+2)	;	ld	a,(iy+2)
	cp	37h		;	cp	55
	jp	nz,loc_A22	;	jp	nz,l14
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	jp	loc_A0B		;	jp	l15
loc_84B:			;l16:
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	ld	hl,13h		;	ld	hl,19
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	l,(ix+-10)	;	ld	l,(ix+-10)
	ld	h,(ix+-9)	;	ld	h,(ix+-9)
	inc	hl		;	inc	hl
	ld	(ix+-10),l	;	ld	(ix+-10),l
	ld	(ix+-9),h	;	ld	(ix+-9),h
	dec	hl		;	dec	hl
	add	hl,hl		;	add	hl,hl
	add	hl,bc		;	add	hl,bc
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-8),c	;	ld	(ix+-8),c
	ld	(ix+-7),b	;	ld	(ix+-7),b
	push	bc		;	push	bc
	call	_sub_1CC4	;	call	_sub_1CC4
	pop	bc		;	pop	bc
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_8CC	;	jp	z,l18
	ld	e, l		;	ld	e,l
	ld	d, h		;	ld	d,h
	inc	de		;	inc	de
	ld	(ix+-4),e	;	ld	(ix+-4),e
	ld	(ix+-3),d	;	ld	(ix+-3),d
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	call	amod		;	call	amod
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_8CC	;	jp	z,l18
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	call	amod		;	call	amod
	ex	de,hl		;	ex	de,hl
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ex	de,hl		;	ex	de,hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	add	hl,de		;	add	hl,de
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	push	hl		;	push	hl
	call	_sub_CDF	;	call	_sub_CDF
	pop	bc		;	pop	bc
loc_8CC:			;l18:
	ld	l,(ix+-8)	;	ld	l,(ix+-8)
	ld	h,(ix+-7)	;	ld	h,(ix+-7)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	bit	4,(hl)		;	bit	4,(hl)
	jp	z,loc_9EA	;	jp	z,l20
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,5		;	ld	hl,5
	add	hl,de		;	add	hl,de
	ld	b,(hl)		;	ld	b,(hl)
	ld	de,1		;	ld	de,1
	ld	hl,0		;	ld	hl,0
	call	allsh		;	call	allsh
	ex	de,hl		;	ex	de,hl
	ld	bc,0FFFFh	;	ld	bc,-1
	add	hl,bc		;	add	hl,bc
	ex	de,hl		;	ex	de,hl
	adc	hl,bc		;	adc	hl,bc
	push	hl		;	push	hl
	push	de		;	push	de
	call	_sub_415E	;	call	_sub_415E
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	ld	hl,7		;	ld	hl,7
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,6		;	ld	hl,6
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	or	a		;	or	a
	jr	z,loc_95D	;	jp	z,l21		  Warting!
	ld	hl,6		;			  <-----+ Extra code does not
	add	hl,de		;				; affect the execution
	ld	l,(hl)		;			  <-----+ of the function !
				;
	ld	hl,0		;	ld	de,0	  <-----+ Zeroing
	ld	d,l		;	ld	l,e		; registers
	ld	e,l		;	ld	h,d	  <-----+ is different
	push	hl		;	push	hl
	push	de		;	push	de
	call	_sub_415E	;	call	_sub_415E
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	ld	hl,1Fh		;	ld	hl,31
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	ld	hl,3Ch		;	ld	hl,60
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-12),l	;	ld	(ix+-12),l
	ld	(ix+-11),h	;	ld	(ix+-11),h
	jr	loc_969		;	jp	l22
loc_95D:			;l21:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	(ix+-12),l	;	ld	(ix+-12),l
	ld	(ix+-11),h	;	ld	(ix+-11),h
loc_969:			;l22:
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	ld	hl,13h		;	ld	hl,19
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ld	l,(ix+-10)	;	ld	l,(ix+-10)
	ld	h,(ix+-9)	;	ld	h,(ix+-9)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	z,loc_9DE	;	jp	z,l23
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	ld	hl,13h		;	ld	hl,19
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	l,(ix+-10)	;	ld	l,(ix+-10)
	ld	h,(ix+-9)	;	ld	h,(ix+-9)
	add	hl,hl		;	add	hl,hl
	add	hl,bc		;	add	hl,bc
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	bit	4,(hl)		;	bit	4,(hl)
	jr	z,loc_9DE	;	jp	z,l23
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,11h		;	ld	hl,17
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	push	de		;	push	de
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	ld	hl,13h		;	ld	hl,19
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	l,(ix+-10)	;	ld	l,(ix+-10)
	ld	h,(ix+-9)	;	ld	h,(ix+-9)
	add	hl,hl		;	add	hl,hl
	add	hl,bc		;	add	hl,bc
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	hl,11h		;	ld	hl,17
	add	hl,bc		;	add	hl,bc
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	pop	de		;	pop	de
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z, loc_A0B	;	jp	z,l15
loc_9DE:			;l23:
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
loc_9EA:			;l20:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	ld	l,(ix+-8)	;	ld	l,(ix+-8)
	ld	h,(ix+-7)	;	ld	h,(ix+-7)
	push	hl		;	push	hl
	call	_sub_808	;	call	_sub_808
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	de,hl		;	ex	de,hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	add	hl,de		;	add	hl,de
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
loc_A0B:			;l15:
	call	_sub_4192	;	call	_sub_4192
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
	ld	a,(hl)		;	ld	a,(hl)
	cp	17h		;	cp	23
	jp	nz,loc_84B	;	jp	nz,l16
	push	hl		;	push	hl
loc_A1B:			;L2:
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
	jp	loc_AC8		;	jp	l27
loc_A22:			;l14:
	ld	l,(iy+15)	;	ld	l,(iy+15)
	ld	h,(iy+16)	;	ld	h,(iy+16)
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
loc_A2E:			;l31:
	call	_sub_4192	;	call	_sub_4192
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
	ld	a,(hl)		;	ld	a,(hl)
	cp	1Ah		;	cp	26
	jr	nz,loc_A59	;	jp	nz,L1
	push	hl		;	push	hl
	ld	l,(ix+-6)	;	ld	l,(ix+-6)
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	push	hl		;	push	hl
	call	_sub_808	;	call	_sub_808
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	de,hl		;	ex	de,hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	add	hl,de		;	add	hl,de
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	jr	loc_A2E		;	jp	l31
loc_A59:			;L1:
	ld	a,(hl)		;	ld	a,(hl)
	cp	17h		;	cp	23
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	jr	z,loc_A1B	;	jp	z,L2
	call	_nodesize	;	call	_nodesize
	ex	de,hl		;	ex	de,hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	add	hl,de		;	add	hl,de
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	hl,0		;	ld	hl,0
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	ld	hl,31h		;	ld	hl,49
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_600E	;	call	_sub_600E
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_2BD0	;	call	_sub_2BD0
	pop	bc		;	pop	bc
	jr	loc_A2E		;	jp	l31
loc_A95:			;l13:
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	ld	hl,31h		;	ld	hl,49
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_600E	;	call	_sub_600E
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
	ex	(sp),hl		;	ex	(sp),hl
	call	_nodesize	;	call	_nodesize
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_2BD0	;	call	_sub_2BD0
	pop	bc		;	pop	bc
loc_AC8:			;l27:
	ld	e,(iy+9)	;	ld	e,(iy+9)
	ld	d,(iy+10)	;	ld	d,(iy+10)
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	call	wrelop		;	call	wrelop
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	l,(iy+9)	;	ld	l,(iy+9)
	ld	h,(iy+10)	;	ld	h,(iy+10)
	jr	nc,loc_AFB	;	jp	nc,L3
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	push	hl		;	push	hl
	call	_sub_CDF	;	call	_sub_CDF
	pop	bc		;	pop	bc
	ld	l,(iy+9)	;	ld	l,(iy+9)
	ld	h,(iy+10)	;	ld	h,(iy+10)
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	jr	loc_B10		;	jp	l37
loc_AFB:			;L3:
	call	wrelop		;	call	wrelop
	jr	nc,loc_B10	;	jp	nc,l37
	ld	a,(iy+9)	;	ld	a,(iy+9)
	or	(iy+10)		;	or	(iy+10)
	jr	z,loc_B10	;	jp	z,l37
	ld	hl,19f		;	ld	hl,19f
	push	hl		;	push	hl
	call	_uerror		;	call	_uerror
	pop	bc		;	pop	bc
loc_B10:			;l37:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	jp	cret		;	jp	cret

; End of function sub_808 OK+

	psect	data

d_808_A3C4:
19:	defb	84,111,111,32,109,97,110,121,32,105,110,105,116,105,97,108
	defb	105,122,101,114,115,0

	psect	text

; End of file - 808.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - B19new.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_B19 OK++
;=========================================================
	global	_sub_B19	;	global	_sub_B19
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_sub_265	;	global	_sub_265
	global	_sub_306	;	global	_sub_306
	global	_selpsect	;	global	_selpsect
	global	_sub_CAB	;	global	_sub_CAB
	global	_sub_808	;	global	_sub_808
	global	_sub_4192	;	global	_sub_4192
	global	adiv		;	global	adiv
	global	_sub_1C8E	;	global	_sub_1C8E
	global	_sub_76F	;	global	_sub_76F
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_B19:
	call	csv		;	call	csv
	push	hl		;	push	hl
	push	hl		;	push	hl
	call	_sub_306	;	call	_sub_306
	push	hl		;	push	hl
	call	_sub_265	;	call	_sub_265
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	hl,3		;	ld	hl,3
	ex	(sp),hl		;	ex	(sp),hl
	call	_selpsect	;	call	_selpsect
	pop	bc		;	pop	bc
	push	iy		;	push	iy
	call	_sub_CAB	;	call	_sub_CAB
	pop	bc		;	pop	bc
	call	_sub_4192	;	call	_sub_4192
	push	hl		;	push	hl
	push	iy		;	push	iy
	call	_sub_808	;	call	_sub_808
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	a,(iy+13)	;	ld	a,(iy+13)
	or	(iy+14)		;	or	(iy+14)
	jr	nz,loc_B5F	;	jp	nz,L2
	ld	e,(iy+15)	;	ld	e,(iy+15)
	ld	d,(iy+16)	;	ld	d,(iy+16)
	ld	hl,9		;	ld	hl,9
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	jr	loc_B62		;	jp	L1
loc_B5F:			;L2:
	ld	hl,2		;	ld	hl,2
loc_B62:			;L1:
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	a,(iy+11)	;	ld	a,(iy+11)
	or	(iy+12)		;	or	(iy+12)
	jr	nz,loc_B8C	;	jp	nz,l12
	ex	de,hl		;	ex	de,hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	call	adiv		;	call	adiv
	ld	(iy+11),l	;	ld	(iy+11),l
	ld	(iy+12),h	;	ld	(iy+12),h
	push	iy		;	push	iy
	call	_sub_1C8E	;	call	_sub_1C8E
	pop	bc		;	pop	bc
	ld	(iy+9),l	;	ld	(iy+9),l
	ld	(iy+10),h	;	ld	(iy+10),h
loc_B8C:			;l12:
	ld	hl,93		;	ld	hl,93
	push	hl		;	push	hl
	call	_sub_76F	;	call	_sub_76F
	jp	cret		;	jp	cret

;=========================================================
; sub_B96 OK++
;=========================================================
	global	_sub_B96	;	global	_sub_B96
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_selpsect	;	global	_selpsect
	global	_byte_AE0C	;	global	_byte_AE0C
	global	_printf		;	global	_printf
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_B96:
	call	csv		;	call	csv
	ld	hl,2		;	ld	hl,2
	push	hl		;	push	hl
	call	_selpsect	;	call	_selpsect
	pop	bc		;	pop	bc
	ld	a,(_byte_AE0C)	;	ld	a,(_byte_AE0C)
	or	a		;	or	a
	jr	nz,loc_BAF	;	jp	nz,l14
	ld	hl,b96_A61A	;	ld	hl,19f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
loc_BAF:			;l14:
	ld	hl,b96_A550	;	ld	hl,29f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	ld	a,1		;	ld	a,1
	ld	(_byte_AE0C),a	;	ld	(_byte_AE0C),a
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	ex	(sp),hl		;	ex	(sp),hl
	ld	hl,b96_A546	;	ld	hl,39f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

	psect	data

b96_A546:
	;"defw\tf%d\n"
defb	100,101,102,119,9,102,37,100,10,0

b96_A550:
	;"call\tncsv\n"
defb	99,97,108,108,9,110,99,115,118,10,0


bcc_A55B:
	; "jp\tcret\nf%d\tequ\t%d\n"
	defb	106,112,9,99,114,101,116,10,102,37,100,9,101,113,117,9
	defb	37,100,10,0

bee_A56F:
	; "ld\tde,k%d\nld\tbc,%d\nldir\nld\thl,k%d\n"
	defb	108,100,9,100,101,44,107,37,100,10,108,100,9,98,99,44
	defb	37,100,10,108,100,105,114,10,108,100,9,104,108,44,107,37
	defb	100,10,0

_off_A592:
F567:
	defw	19f
	defw	29f
	defw	39f
	defw	49f

e43_5_A59A:
e43_5:
	;	"ld\ta,%u\ncp\th\njp\tc,l%d\njp\tnz,1f\n" 
	;	"ld\ta,%u\ncp\tl\njp\tc,l%d\n1:add\thl,hl\n"
	;	"ld\tde,S%u\nadd\thl,de\nld\ta,(hl)\n"
	;	"inc\thl\nld\th,(hl)\nld\tl,a\njp\t(hl)\n"
	defb	108,100,9,97,44,37,117,10,99,112,9,104,10,106,112,9
	defb	99,44,108,37,100,10,106,112,9,110,122,44,49,102,10,108
	defb	100,9,97,44,37,117,10,99,112,9,108,10,106,112,9,99
	defb	44,108,37,100,10,49,58,97,100,100,9,104,108,44,104,108
	defb	10,108,100,9,100,101,44,83,37,117,10,97,100,100,9,104
	defb	108,44,100,101,10,108,100,9,97,44,40,104,108,41,10,105
	defb	110,99,9,104,108,10,108,100,9,104,44,40,104,108,41,10
	defb	108,100,9,108,44,97,10,106,112,9,40,104,108,41,10,0

b96_A61A:
	 ;	"global\tncsv, cret, indir\n"
	defb	103,108,111,98,97,108,9,110,99,115,118,44,32,99,114,101
	defb	116,44,32,105,110,100,105,114,10,0


bee_A634:
	; "k%d:defs\t%d\n"
	defb	107,37,100,58,100,101,102,115,9,37,100,10,0


c36_1:
	;	"global\t%s\n"
	defb	103,108,111,98,97,108,9,37,115,10,0


c57_1:
	;	"\tdefs\t%u\n"
	defb	9,100,101,102,115,9,37,117,10,0


cab_1:
	;	"%s:\n"
	defb	37,115,58,10,0


cdf_1:
	;	"defb\t0"
	defb	100,101,102,98,9,48,0

cdf_2:
	;	",0"
	defb	44,48,0

_off_A592_0:
19:	;	""
	defb	0

_off_A592_1:
29:	;	"bss"
	defb	98,115,115,0

_off_A592_2:
39:	;	"text"
	defb	116,101,120,116,0

_off_A592_3:
49:	;	"data"
	defb	100,97,116,97,0

selpsect_1:
	;	"psect\t%s\n"
	defb	112,115,101,99,116,9,37,115,10,0

d66_1:
	;	"Duplicate case label"
	defb	68,117,112,108,105,99,97,116,101,32,99,97,115,101,32,108
	defb	97,98,101,108,0

e43_3:
	;	"Non-constant case label"
	defb	78,111,110,45,99,111,110,115,116,97,110,116,32,99,97,115
	defb	101,32,108,97,98,101,108,0

e43_1:
	;	"No case\tlabels"
	defb	78,111,32,99,97,115,101,9,108,97,98,101,108,115,0

e43_2:
	;	"jp\tl%d\n"
	defb	106,112,9,108,37,100,10,0
e43_4:
	;	"us"
	defb	117,115,0

e43_6:
	;	"S%d:\n"
	defb	83,37,100,58,10,0

e43_7:
	;	"defw\tl%d\n"
	defb	100,101,102,119,9,108,37,100,10,0

e43_8:
	;	"defw\tl%d\n"
	defb	100,101,102,119,9,108,37,100,10,0

e43_9:
	;	"1:\n"
	defb	49,58,10,0

e43_10:
	;	"ld\ta,h\n"
	defb	108,100,9,97,44,104,10,0

e43_11:
	;	"jp\tnz,1f\nld\ta,l\n"
	defb	106,112,9,110,122,44,49,102,10,108,100,9,97,44,108,10
	defb	0

e43_12:
	;	"1:\n"
	defb	49,58,10,0

e43_13:
	;	"ld\ta,l\n"
	defb	108,100,9,97,44,108,10,0

e43_14:
	;	"jp\tnz,1f\nld\ta,h\n"
	defb	106,112,9,110,122,44,49,102,10,108,100,9,97,44,104,10
	defb	0

e43_15:
	;	"jp\tz,l%d\n"
	defb	106,112,9,122,44,108,37,100,10,0

e43_16:
	;	"1:\n"
	defb	49,58,10,0

e43_17:
	;	"jp\tl%d\n"
	defb	106,112,9,108,37,100,10,0

e43_18:
	;	"jp\tz,l%d\n"
	defb	106,112,9,122,44,108,37,100,10,0

e43_19:
	;	"jp\tl%d\n"
	defb	106,112,9,108,37,100,10,0

p_1420_1:
	;	"cp\t%d\n"
	defb	99,112,9,37,100,10,0

p_1420_2:
	;	"or\ta\n"
	defb	111,114,9,97,10,0

p_143f_1:
;		"push\thl\npush\tde\n"
	defb	112,117,115,104,9, 104,108,10,112,117,115,104,9,100,101,10
	defb	0

p_143f_2:
	;	"push\t%s\n"
	defb	112,117,115,104,9,37,115,10,0


p_1489_1:
	;	"pop\tde\npop\thl\n"
	defb	112,111,112,9,100,101,10,112,111,112,9,104,108,10,0

p_1489_2:
	;	"pop\t%s\n"
	defb	112,111,112,9,37,115,10,0

p_14d3_1:
	;	"ld\tl,(ix+%d)\nld\th,(ix+%d)\npush\thl\npop\tiy\n"
	defb	108,100,9,108,44,40,105,120,43,37,100,41,10,108,100,9
	defb	104,44,40,105,120,43,37,100,41,10,112,117,115,104,9,104
	defb	108,10,112,111,112,9,105,121,10,0

p_155d_1:
	;	"defb\t"
	defb	100,101,102,98,9,0

p_155d_2:
	;	"%d"
	defb	37,100,0

p_15d3_1:
	;	"j%d:\n"
	defb	106,37,100,58,10,0

p_15e7_1:
	;	"jp\tj%d\n"
	defb	106,112,9,106,37,100,10,0

	psect	text

;=========================================================
; sub_BCC OK++
;=========================================================
	global	_sub_BCC	;	global	_sub_BCC	
	global	ncsv,cret,indir	;	global	ncsv,cret,indir	
	global	_selpsect	;	global	_selpsect	
	global	_printf		;	global	_printf		
	global 	csv		;	global 	csv		

	psect	text

; Disassembled version		; After compiling C source code
_sub_BCC:
	call	csv		;	call	csv
	ld	hl,2		;	ld	hl,2
	push	hl		;	push	hl
	call	_selpsect	;	call	_selpsect
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	ld	hl,bcc_A55B	;	ld	hl,49f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_BEE OK++
;=========================================================
	global	_sub_BEE	;	global	_sub_BEE
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_selpsect	;	global	_selpsect
	global	_printf		;	global	_printf
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_BEE:
	call	csv		;	call	csv
	ld	hl,2		;	ld	hl,2
	push	hl		;	push	hl
	call	_selpsect	;	call	_selpsect
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	ld	hl,bee_A56F	;	ld	hl,59f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	hl,1		;	ld	hl,1
	ex	(sp),hl		;	ex	(sp),hl
	call	_selpsect	;	call	_selpsect
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	ld	hl,bee_A634	;	ld	hl,69f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_C36 OK++
;=========================================================
	global	_sub_C36	;	global	_sub_C36
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_printf		;	global	_printf
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_C36:
	call	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,(iy+1)	;	ld	h,(iy+1)
	push	hl		;	push	hl
	ld	hl,c36_1	;	ld	hl,79f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	set	1,(iy+3)	;	set	1,(iy+3)
	jp	cret		;	jp	cret

;=========================================================
; sub_C57 OK++
;=========================================================
	global	_sub_C57	;	global	_sub_C57
	global	ncsv,cret,indir	;	global	ncsv,cret,ind
	global	_selpsect	;	global	_selpsect
	global	_sub_C36	;	global	_sub_C36
	global	_sub_CAB	;	global	_sub_CAB
	global	_printf		;	global	_printf
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_C57:
	call	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	bit	0,(iy+3)	;	bit	0,(iy+3)
	jp	nz,cret		;	jp	nz,cret
	ld	a,(iy+11)	;	ld	a,(iy+11)
	or	(iy+12)		;	or	(iy+12)
	jp	z,cret		;	jp	z,cret
	bit	1,(iy+13)	;	bit	1,(iy+13)
	jp	nz,cret		;	jp	nz,cret
	ld	hl,1		;	ld	hl,1
	push	hl		;	push	hl
	call	_selpsect	;	call	_selpsect
	pop	bc		;	pop	bc
	ld	a,(iy+21)	;	ld	a,(iy+21)
	cp	3		;	cp	3
	jr	nz,loc_C95	;	jp	nz,l22
	bit	1,(iy+3)	;	bit	1,(iy+3)
	push	iy		;	push	iy
	jr	nz,loc_C97	;	jp	nz,L3
	call	_sub_C36	;	call	_sub_C36
	pop	bc		;	pop	bc
loc_C95:			;l22:
	push	iy		;	push	iy
loc_C97:			;L3:
	call	_sub_CAB	;	call	_sub_CAB
	ld	l,(iy+9)	;	ld	l,(iy+9)
	ld	h,(iy+10)	;	ld	h,(iy+10)
	ex	(sp),hl		;	ex	(sp),hl
	ld	hl,c57_1	;	ld	hl,89f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_CAB OK++
;=========================================================
	global	_sub_CAB	;	global	_sub_CAB
	global	ncsv,cret,indir	;	global	ncsv,cret,indi
	global	_sub_C36	;	global	_sub_C36
	global	_printf		;	global	_printf
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_CAB:
	call	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	bit	1,(iy+3)	;	bit	1,(iy+3)
	jr	nz,loc_CCA	;	jp	nz,l25
	ld	a,(iy+21)	;	ld	a,(iy+21)
	cp	3		;	cp	3
	jr	nz,loc_CCA	;	jp	nz,l25
	push	iy		;	push	iy
	call	_sub_C36	;	call	_sub_C36
	pop	bc		;	pop	bc
loc_CCA:			;l25:
	set	0,(iy+3)	;	set	0,(iy+3)
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,(iy+1)	;	ld	h,(iy+1)
	push	hl		;	push	hl
	ld	hl,cab_1	;	ld	hl,99f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_CDF OK++
;=========================================================
	global	_sub_CDF	;	global	_sub_CDF
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_printf		;	global	_printf
	global	_putchar	;	global	_putchar
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_CDF:
	call	csv		;	call	csv
	push	hl		;	push	hl
	ld	(ix+-1),0	;	ld	(ix+-1),0
	jr	loc_D14		;	jp	l28
loc_CE9:			;L4:
	or	a		;	or	a
	jr	nz,loc_CF6	;	jp	nz,l31
	ld	hl,cdf_1	;	ld	hl,109f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	jr	loc_CFE		;	jp	l32
loc_CF6:			;l31:
	ld	hl,cdf_2	;	ld	hl,119f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
loc_CFE:			;l32:
	inc	(ix+-1)		;	inc	(ix+-1)
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	cp	16		;	cp	16
	jr	nz,loc_D14	;	jp	nz,l28
	ld	(ix+-1),0	;	ld	(ix+-1),0
	ld	hl,10		;	ld	hl,10
	push	hl		;	push	hl
	call	_putchar	;	call	_putchar
	pop	bc		;	pop	bc
loc_D14:			;l28:
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	dec	hl		;	dec	hl
	ld	(ix+6),l	;	ld	(ix+6),l
	ld	(ix+7),h	;	ld	(ix+7),h
	inc	hl		;	inc	hl
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	jr	nz,loc_CE9	;	jp	nz,L4
	or	a		;	or	a
	jp	z,cret		;	jp	z,cret
	ld	hl,10		;	ld	hl,10
	push	hl		;	push	hl
	call	_putchar	;	call	_putchar
	jp	cret		;	jp	cret


;=========================================================
; SELPSECT OK++
;=========================================================
	global	_selpsect	;	global	_selpsect
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	csv		;	global	csv
	global	_cursect	;	global	_cursect
	global	_printf		;	global	_printf

	psect	text

; Disassembled version		; After compiling C source code
_selpsect:
	call	csv		;	call	csv
	ld	de,(_cursect)	;	ld	de,(_cursect)
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	z,cret		;	jp	z,cret
	ld	de,F567 	;	ld	de,F587		; _off_A592
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	ld	(_cursect),hl	;	ld	(_cursect),hl
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,selpsect_1	;	ld	hl,169f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_D66 OK+
;
; Generated code from the C source is completely identical,
; except for useless code in binary image located after
; L2++ operator, which does not affect function.
;=========================================================
	global	_sub_D66	;	global	_sub_D66
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	wrelop		;	global	wrelop
	global	_uerror		;	global	_uerror

	psect	text

; Disassembled version		; After compiling C source code
_sub_D66:			;
	call	ncsv		;	call	ncsv
	defw	-9		;	defw	-9
loc_D6B:			;l40:
	ld	(ix+-1),0	;	ld	(ix+-1),0
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	(ix+-3),l	;	ld	(ix+-3),l
	ld	(ix+-2),h	;	ld	(ix+-2),h
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	ld	(ix+-5),l	;	ld	(ix+-5),l
	ld	(ix+-4),h	;	ld	(ix+-4),h
	jr	loc_E07		;	jp	l41
loc_D92:			;l42:
	ld	e,(iy+0)	;	ld	e,(iy+0)
	ld	d,(iy+1)	;	ld	d,(iy+1)
	ld	l,(iy+2)	;	ld	l,(iy+2)
	ld	h,(iy+3)	;	ld	h,(iy+3)
	call	wrelop		;	call	wrelop
	jp	p,loc_E27	;	jp	p,l45
	ld	(ix+-1),1	;	ld	(ix+-1),1
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,(iy+1)	;	ld	h,(iy+1)
	ld	(ix+-7),l	;	ld	(ix+-7),l
	ld	(ix+-6),h	;	ld	(ix+-6),h
	ld	l,(iy+2)	;	ld	l,(iy+2)
	ld	h,(iy+3)	;	ld	h,(iy+3)
	ld	(iy+0),l	;	ld	(iy+0),l
	ld	(iy+1),h	;	ld	(iy+1),h
	ld	l,(ix+-7)	;	ld	l,(ix+-7)
	ld	h,(ix+-6)	;	ld	h,(ix+-6)
	ld	(iy+2),l	;	ld	(iy+2),l
	ld	(iy+3),h	;	ld	(iy+3),h
	ld	l,(ix+-3)	;	ld	l,(ix+-3)
	ld	h,(ix+-2)	;	ld	h,(ix+-2)
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-9),c	;	ld	(ix+-9),c
	ld	(ix+-8),b	;	ld	(ix+-8),b
	inc	hl		;	inc	hl
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	ld	(hl),c		;	ld	(hl),c
	inc	hl		;	inc	hl
	ld	(hl),b		;	ld	(hl),b
	ld	e,(ix+-9)	;	ld	e,(ix+-9)
	ld	d,(ix+-8)	;	ld	d,(ix+-8)
	inc	hl		;	inc	hl
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
loc_DEF:			;l46:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(ix+-3)	;	ld	l,(ix+-3)
	ld	h,(ix+-2)	;	ld	h,(ix+-2)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(ix+-3),l	;	ld	(ix+-3),l
	ld	(ix+-2),h	;	ld	(ix+-2),h	Warning!
	dec	hl		;			   <----+ Useless code,
	dec	hl		;			   <----+ since
loc_E07:			;l41:				.
	ld	e,(ix+-5)	;	ld	e,(ix+-5)	.
	ld	d,(ix+-4)	;	ld	d,(ix+-4)	.
	dec	de		;	dec	de		.
	ld	(ix+-5),e	;	ld	(ix+-5),e	.
	ld	(ix+-4),d	;	ld	(ix+-4),d	. register pair HL
	ld	hl,0		;	ld	hl,0	   <----+ is assigned 0
	call	wrelop		;	call	wrelop	
	jp	m,loc_D92	;	jp	m,l42	
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	or	a		;	or	a
	jp	nz,loc_D6B	;	jp	nz,l40
	jp	cret		;	jp	cret
loc_E27:			;l45:
	ld	e,(iy+2)	;	ld	e,(iy+2)
	ld	d,(iy+3)	;	ld	d,(iy+3)
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,(iy+1)	;	ld	h,(iy+1)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_DEF	;	jp	nz,l46
	ld	hl,d66_1	;	ld	hl,179f
	push	hl		;	push	hl
	call	_uerror		;	call	_uerror
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret

;=========================================================
; sub_E43 OK++
;=========================================================
	global	_sub_E43	;	global	_sub_E43
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_sub_4192	;	global	_sub_4192
	global	_sub_600E	;	global	_sub_600E
	global	_atoi		;	global	_atoi
	global	_sub_306	;	global	_sub_306
	global	_sub_36E0	;	global	_sub_36E0
	global	_sub_76F	;	global	_sub_76F
	global	_warning	;	global	_warning
	global	_sub_475C	;	global	_sub_475C
	global	_printf		;	global	_printf
	global	_uerror		;	global	_uerror
	global	_sub_D66	;	global	_sub_D66
	global	wrelop		;	global	wrelop
	global	amul		;	global	amul
	global	wrelop		;	global	wrelop
	global	_sub_3712	;	global	_sub_3712
	global	_sub_43EF	;	global	_sub_43EF
	global	_sub_415E	;	global	_sub_415E
	global	_nodesize	;	global	_nodesize
	global	_sub_265	;	global	_sub_265
	global	_selpsect	;	global	_selpsect
	global	_sub_3DC9	;	global	_sub_3DC9
	global	_sub_174C	;	global	_sub_174C
	global	_sub_1420	;	global	_sub_1420
	global	shar		;	global	shar
	global	asar		;	global	asar

	psect	text

;	Disassembled version	; After compiling C source code
_sub_E43:
	call	ncsv		;	call	ncsv
	defw	-1038		;	defw	-1038
	call	_sub_4192	;	call	_sub_4192
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	(ix+-10),0	;	ld	(ix+-8),0
	ld	(ix+-9),0	;	ld	(ix+-7),0
loc_E59:			;l49:
	call	_sub_4192	;	call	_sub_4192
	push	hl		;	push	hl
	call	_sub_600E	;	call	_sub_600E
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	call	_sub_306	;	call	_sub_306
	push	hl		;	push	hl
	call	_atoi		;	call	_atoi
	pop	bc		;	pop	bc
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	23		;	cp	23
	jr	nz,loc_EB9	;	jp	nz,l52
	ld	(ix+-12),l	;	ld	(ix+-12),l
	ld	(ix+-11),h	;	ld	(ix+-11),h
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	ld	hl,93		;	ld	hl,93
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_76F	;	call	_sub_76F
	pop	bc		;	pop	bc
	ld	a,(ix+-10)	;	ld	a,(ix+-8)
	or	(ix+-9)		;	or	(ix+-7)
	jp	nz,loc_F0B	;	jp	nz,l50
	ld	hl,e43_1	;	ld	hl,189f
	push	hl		;	push	hl
	call	_warning	;	call	_warning
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_475C	;	call	_sub_475C
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	ex	(sp),hl		;	ex	(sp),hl
	ld	hl,e43_2	;	ld	hl,199f
loc_EB0:			;L6:
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret
loc_EB9:			;l52:
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	67		;	cp	67
	jr	nz,loc_EFA	;	jp	nz,l54
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-10)	;	ld	l,(ix+-8)
	ld	h,(ix+-9)	;	ld	h,(ix+-7)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	e,(iy+25)	;	ld	e,(iy+25)
	ld	d,(iy+26)	;	ld	d,(iy+26)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-10)	;	ld	l,(ix+-8)
	ld	h,(ix+-9)	;	ld	h,(ix+-7)
	inc	hl		;	inc	hl
	ld	(ix+-10),l	;	ld	(ix+-8),l
	ld	(ix+-9),h	;	ld	(ix+-7),h
	dec	hl		;	dec	hl
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-1038	;	ld	de,-1038
	add	hl,de		;	add	hl,de
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	jr	loc_F02		;	jp	l55
loc_EFA:			;l54:
	ld	hl,e43_3	;	ld	hl,209f
	push	hl		;	push	hl
	call	_uerror		;	call	_uerror
	pop	bc		;	pop	bc
loc_F02:			;l55:
	push	iy		;	push	iy
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
	jp	loc_E59		;	jp	l49
loc_F0B:			;l50:
	ld	l,(ix+-10)	;	ld	l,(ix+-8)
	ld	h,(ix+-9)	;	ld	h,(ix+-7)
	push	hl		;	push	hl
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,-1038	;	ld	hl,-1038
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,-528		;	ld	hl,-528
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	call	_sub_D66	;	call	_sub_D66
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,-528		;	ld	hl,-528
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-10)	;	ld	l,(ix+-8)
	ld	h,(ix+-9)	;	ld	h,(ix+-7)
	dec	hl		;	dec	hl
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	or	a		;	or	a
	sbc	hl,bc		;	sbc	hl,bc
	ld	(ix+-8),l	;	ld	(ix+-6),l
	ld	(ix+-7),h	;	ld	(ix+-5),h
	bit	7,(ix+-7)	;	bit	7,(ix+-5)
	jp	nz,loc_111F	;	jp	nz,l56
	ld	de,16000	;	ld	de,16000
	call	wrelop		;	call	wrelop
	jp	p,loc_111F	;	jp	p,l56
	ld	de,5		;	ld	de,5
	ld	l,(ix+-10)	;	ld	l,(ix+-8)
	ld	h,(ix+-9)	;	ld	h,(ix+-7)
	call	amul		;	call	amul
	push	hl		;	push	hl
	ld	de,20		;	ld	de,20
	ld	l,(ix+-8)	;	ld	l,(ix+-10)
	ld	h,(ix+-7)	;	ld	h,(ix+-9)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	pop	de		;	pop	de
	call	wrelop		;	call	wrelop
	jp	p,loc_111F	;	jp	p,l56
	call	_sub_3712	;	call	_sub_3712
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	(iy+0),65	;	ld	(iy+0),65
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,23		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+23),c	;	ld	(iy+23),c
	ld	(iy+24),b	;	ld	(iy+24),b
	ld	hl,21		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+21),c	;	ld	(iy+21),c
	ld	(iy+22),b	;	ld	(iy+22),b
	push	iy		;	push	iy
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,-528		;	ld	hl,-528
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ld	a,d		;	ld	a,d
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	l,a		;	ld	l,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	push	de		;	push	de
	call	_sub_415E	;	call	_sub_415E
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	ld	hl,20		;	ld	hl,20
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	ld	hl,18		;	ld	hl,18
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ex	(sp),hl		;	ex	(sp),hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,2		;	ld	de,2
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_1025	;	jp	z,l59
	call	_sub_3712	;	call	_sub_3712
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	(hl),65		;	ld	(hl),65
	ld	hl,e43_4	;	ld	hl,219f
	push	hl		;	push	hl
	call	_sub_265	;	call	_sub_265
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,23		;	ld	hl,23
	add	hl,de		;	add	hl,de
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	push	iy		;	push	iy
	ld	hl,20		;	ld	hl,20
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_1025:			;l59:
	ld	hl,2		;	ld	hl,2
	push	hl		;	push	hl
	call	_selpsect	;	call	_selpsect
	ld	hl,0		;	ld	hl,0
	ex	(sp),hl		;	ex	(sp),hl
	push	iy		;	push	iy
	ld	hl,11		;	ld	hl,11
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_3DC9	;	call	_sub_3DC9
	pop	bc		;	pop	bc
	call	_sub_174C	;	call	_sub_174C
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	push	hl		;	push	hl
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	ld	l,(ix+-8)	;	ld	l,(ix+-10)
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	ld	b,8		;	ld	b,8
	ld	l,(ix+-8)	;	ld	l,(ix+-10)
	ld	h,(ix+-7)	;	ld	h,(ix+-9)
	call	shar		;	call	shar
	push	hl		;	push	hl
	ld	hl,e43_5	;	ld	hl,229f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	ld	hl,12		;	ld	hl,12
	add	hl,sp		;	add	hl,sp
	ld	sp,hl		;	ld	sp,hl
	ld	hl,3		;	ld	hl,3
	push	hl		;	push	hl
	call	_selpsect	;	call	_selpsect
	ld	l,(ix+-6)	;	ld	l,(ix+-6)
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	ex	(sp),hl		;	ex	(sp),hl
	ld	hl,e43_6	;	ld	hl,239f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-4),0	;	ld	(ix+-4),0
	ld	(ix+-3),0	;	ld	(ix+-3),0
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,-528		;	ld	hl,-528
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-8),c	;	ld	(ix+-10),c
	ld	(ix+-7),b	;	ld	(ix+-9),b
loc_10A5:			;l62:
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ld	l,(ix+-8)	;	ld	l,(ix+-10)
	ld	h,(ix+-7)	;	ld	h,(ix+-9)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_10ED	;	jp	nz,l63
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-1038	;	ld	de,-1038
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,e43_7	;	ld	hl,249f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	inc	hl		;	inc	hl
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	jr	loc_10FD	;	jp	l64
loc_10ED:			;l63:
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	ld	hl,e43_8	;	ld	hl,259f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
loc_10FD:			;l64:
	ld	l,(ix+-8)	;	ld	l,(ix+-10)
	ld	h,(ix+-7)	;	ld	h,(ix+-9)
	inc	hl		;	inc	hl
	ld	(ix+-8),l	;	ld	(ix+-10),l
	ld	(ix+-7),h	;	ld	(ix+-9),h
	ld	e,(ix+-10)	;	ld	e,(ix+-8)
	ld	d,(ix+-9)	;	ld	d,(ix+-7)
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	call	wrelop		;	call	wrelop
	jp	m,loc_10A5	;	jp	m,l62
	jp	cret		;	jp	cret
loc_111F:			;l56:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,2		;	ld	de,2
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	push	hl		;	push	hl
	jp	nz,loc_135E	;	jp	nz,L5
	call	_selpsect	;	call	_selpsect
	ld	hl,0		;	ld	hl,0
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	ld	hl,11		;	ld	hl,11
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_3DC9	;	call	_sub_3DC9
	pop	bc		;	pop	bc
	ld	(ix+-14),255	;	ld	(ix+-14),255
	ld	(ix+-13),255	;	ld	(ix+-13),255
	ld	a,0		;	ld	a,0
	ld	(ix+-18),a	;	ld	(ix+-17),a
	ld	(ix+-17),a	;	ld	(ix+-18),a
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	ld	(ix+-16),l	;	ld	(ix+-16),l
	ld	(ix+-15),h	;	ld	(ix+-15),h
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	jp	loc_131F	;	jp	l66
loc_1175:			;l67:
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	l,(ix+-14)	;	ld	l,(ix+-14)
	ld	h,(ix+-13)	;	ld	h,(ix+-13)
	ld	a,l		;	ld	a,l
	and	c		;	and	c
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	and	b		;	and	b
	ld	h,a		;	ld	h,a
	ld	(ix+-14),l	;	ld	(ix+-14),l
	ld	(ix+-13),h	;	ld	(ix+-13),h
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	l,(ix+-16)	;	ld	l,(ix+-16)
	ld	h,(ix+-15)	;	ld	h,(ix+-15)
	ld	a,l		;	ld	a,l
	or	c		;	or	c
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	or	b		;	or	b
	ld	h,a		;	ld	h,a
	ld	(ix+-16),l	;	ld	(ix+-16),l
	ld	(ix+-15),h	;	ld	(ix+-15),h
	ld	b,8		;	ld	b,8
	call	shar		;	call	shar
	ex	de,hl		;	ex	de,hl
	ld	b,8		;	ld	b,8
	ld	l,(ix+-14)	;	ld	l,(ix+-14)
	ld	h,(ix+-13)	;	ld	h,(ix+-13)
	call	shar		;	call	shar
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_1226	;	jp	z,l69
	ld	e,(ix+-16)	;	ld	e,(ix+-16)
	xor	a		;	xor	a
	ld	d,a		;	ld	d,a
	ld	l,(ix+-14)	;	ld	l,(ix+-14)
	ld	h,a		;	ld	h,a
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_1226	;	jp	z,l69
	ld	a,(ix+-17)	;	ld	a,(ix+-18)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	a,(ix+-18)	;	ld	a,(ix+-17)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	e		;	or	e
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	or	d		;	or	d
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_1201	;	jp	z,l71
	ld	hl,e43_9	;	ld	hl,269f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
loc_1201:			;l71:
	xor	a		;	xor	a
	ld	(ix+-18),a	;		ld	(ix+-17),a
	ld	(ix+-17),a	;ld	(ix+-18),a
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-16),c	;	ld	(ix+-16),c
	ld	(ix+-15),b	;	ld	(ix+-15),b
	ld	(ix+-14),c	;	ld	(ix+-14),c
	ld	(ix+-13),b	;	ld	(ix+-13),b
loc_1226:			;l69:
	ld	b,8		;	ld	b,8
	ld	l,(ix+-16)	;	ld	l,(ix+-16)
	ld	h,(ix+-15)	;	ld	h,(ix+-15)
	call	shar		;	call	shar
	ex	de,hl		;	ex	de,hl
	ld	b,8		;	ld	b,8
	ld	l,(ix+-14)	;	ld	l,(ix+-14)
	ld	h,(ix+-13)	;	ld	h,(ix+-13)
	call	shar		;	call	shar
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_1284	;	jp	nz,l72
	ld	a,(ix+-18)	;	ld	a,(ix+-17)
	or	a		;	or	a
	jr	nz,loc_126B	;	jp	nz,l73
	ld	hl,e43_10	;	ld	hl,279f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	ld	b,8		;	ld	b,8
	ld	l,(ix+-14)	;	ld	l,(ix+-14)
	ld	h,(ix+-13)	;	ld	h,(ix+-13)
	call	shar		;	call	shar
	push	hl		;	push	hl
	call	_sub_1420	;	call	_sub_1420
	ld	hl,e43_11	;	ld	hl,289f
	ex	(sp),hl		;	ex	(sp),hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	ld	(ix+-18),1	;	ld	(ix+-17),1
loc_126B:			;l73:
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	xor	a		;	xor	a
	ld	b,a		;	ld	b,a
	ld	(hl),b		;	ld	(hl),b
	dec	hl		;	dec	hl
	ld	(hl),c		;	ld	(hl),c
	jr	loc_12DF	;	jp	l74
loc_1284:			;l72:
	ld	a,(ix+-17)	;	ld	a,(ix+-18)
	or	a		;	or	a
	jr	nz,loc_12B4	;	jp	nz,l75
	ld	a,(ix+-18)	;	ld	a,(ix+-17)
	or	a		;	or	a
	jr	z,loc_1298	;	jp	z,l76
	ld	hl,e43_12	;	ld	hl,299f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
loc_1298:			;l76:
	ld	hl,e43_13	;	ld	hl,309f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	ld	l,(ix+-14)	;	ld	l,(ix+-14)
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_1420	;	call	_sub_1420
	ld	hl,e43_14	;	ld	hl,319f
	ex	(sp),hl		;	ex	(sp),hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	ld	(ix+-17),1	;	ld	(ix+-18),1
loc_12B4:			;l75:
	ld	b,8		;	ld	b,8
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	call	asar		;	call	asar
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	xor	a		;	xor	a
	ld	b,a		;	ld	b,a
	ld	(hl),b		;	ld	(hl),b
	dec	hl		;	dec	hl
	ld	(hl),c		;	ld	(hl),c
loc_12DF:			;l74:
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_1420	;	call	_sub_1420
	pop	bc		;	pop	bc
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-1038	;	ld	de,-1038
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,e43_15	;	ld	hl,329f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	inc	hl		;	inc	hl
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
loc_131F:			;l66:
	ld	e,(ix+-10)	;	ld	e,(ix+-8)
	ld	d,(ix+-9)	;	ld	d,(ix+-7)
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	call	wrelop		;	call	wrelop
	jp	m,loc_1175	;	jp	m,l67
	ld	a,(ix+-17)	;	ld	a,(ix+-18)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	a,(ix+-18)	;	ld	a,(ix+-17)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	e		;	or	e
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	or	d		;	or	d
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_1351	;	jp	z,l77
	ld	hl,e43_16	;	ld	hl,339f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
loc_1351:			;l77:
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	ld	hl,e43_17	;	ld	hl,349f
	jp	loc_EB0		;	jp	L6
loc_135E:			;L5:
	call	_selpsect	;	call	_selpsect
	ld	hl,0		;	ld	hl,0
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	ld	hl,70		;	ld	hl,70
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_3DC9	;	call	_sub_3DC9
	pop	bc		;	pop	bc
	ld	(ix+-4),0	;	ld	(ix+-4),0
	ld	(ix+-3),0	;	ld	(ix+-3),0
	jp	loc_13FD	;	jp	l78
loc_1385:			;l79:
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	de,256		;	ld	de,256
	call	wrelop		;	call	wrelop
	jp	p,loc_13F0	;	jp	p,l81
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	de,-128		;	ld	de,-128
	call	wrelop		;	call	wrelop
	jp	m,loc_13F0	;	jp	m,l81
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-528		;	ld	de,-528
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_1420	;	call	_sub_1420
	pop	bc		;	pop	bc
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,-1038	;	ld	de,-1038
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,e43_18	;	ld	hl,359f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
loc_13F0:			;l81:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	inc	hl		;	inc	hl
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
loc_13FD:			;l78:
	ld	e,(ix+-10)	;	ld	e,(ix+-8)
	ld	d,(ix+-9)	;	ld	d,(ix+-7)
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	call	wrelop		;	call	wrelop
	jp	m,loc_1385	;	jp	m,l79
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	ld	hl,e43_19	;	ld	hl,369f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_1420 OK++
;=========================================================
	global	_sub_1420	;	global	_sub_1420
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_printf		;	global	_printf
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code_
_sub_1420:
	call	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	ld	a,l		;	ld	a,l
	or	(ix+7)		;	or	(ix+7)
	jr	nz,loc_1435	;	jp	nz,L8
	ld	hl,p_1420_2	;	ld	hl,389f
	jr	loc_1438	;	jp	L7
loc_1435:			;L8:
	ld	hl,p_1420_1	;	ld	hl,379f
loc_1438:			;L7:
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_143F OK++
;=========================================================
	global	_sub_143F	;	global	_sub_143F
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_printf		;	global	_printf
	global	wrelop		;	global	wrelop
	global	_off_AACA	;	global	_off_AACA
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_143F:
	call	csv		;	call	csv
	ld	a,(ix+6)	;	ld	a,(ix+6)
	cp	15		;	cp	15
	jr	nz,loc_1454	;	jp	nz,l85
	ld	hl,p_143f_1	;	ld	hl,399f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret
loc_1454:			;l85:
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,0		;	ld	d,0
	ld	hl,7		;	ld	hl,7
	call	wrelop		;	call	wrelop
	jr	c,loc_1471	;	jp	c,l86
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,0		;	ld	d,0
	srl	d		;	srl	d
	rr	e		;	rr	e
	ld	hl,11		;	ld	hl,11
	add	hl,de		;	add	hl,de
	ld	(ix+6),l	;	ld	(ix+6),l
loc_1471:			;l86:
	ld	de,_off_AACA	;	ld	de,_off_AACA
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,p_143f_2	;	ld	hl,409f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_1489 OK++
;=========================================================
	global	_sub_1489	;	global	_sub_1489
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_printf		;	global	_printf
	global	wrelop		;	global	wrelop
	global	_off_AACA	;	global	_off_AACA
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_1489:
	call	csv		;	call	csv
	ld	a,(ix+6)	;	ld	a,(ix+6)
	cp	15		;	cp	15
	jr	nz,loc_149E	;	jp	nz,l88
	ld	hl,p_1489_1	;	ld	hl,419f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret
loc_149E:			;l88:
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,0		;	ld	d,0
	ld	hl,7		;	ld	hl,7
	call	wrelop		;	call	wrelop
	jr	c,loc_14BB	;	jp	c,l89
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,0		;	ld	d,0
	srl	d		;	srl	d
	rr	e		;	rr	e
	ld	hl,11		;	ld	hl,11
	add	hl,de		;	add	hl,de
	ld	(ix+6),l	;	ld	(ix+6),l
loc_14BB:			;l89:
	ld	de,_off_AACA	;	ld	de,_off_AACA
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,p_1489_2	;	ld	hl,429f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_14D3 OK++
;=========================================================
	global	_sub_14D3	;	global	_sub_14D3
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_printf		;	global	_printf
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_14D3:
	call	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(iy+17)	;	ld	l,(iy+17)
	ld	h,(iy+18)	;	ld	h,(iy+18)
	inc	hl		;	inc	hl
	push	hl		;	push	hl
	dec	hl		;	dec	hl
	push	hl		;	push	hl
	ld	hl,p_14d3_1	;	ld	hl,439f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_14F3 OK++
;=========================================================
	global	_sub_14F3	;	global	_sub_14F3
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	wrelop		;	global	wrelop
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_14F3:
	call	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	bit	1,(iy+21)	;	bit	1,(iy+21)
	jr	z,loc_150A	;	jp	z,l92
loc_1505:			;L9:
	ld	l,0		;	ld	l,0
	jp	cret		;	jp	cret
loc_150A:			;l92:
	ld	a,(iy+21)	;	ld	a,(iy+21)
	or	(iy+22)		;	or	(iy+22)
	jr	z,loc_1517	;	jp	z,l93
	ld	l,2		;	ld	l,2
	jp	cret		;	jp	cret
loc_1517:			;l93:
	ld	e,(iy+23)	;	ld	e,(iy+23)
	ld	d,(iy+24)	;	ld	d,(iy+24)
	ld	hl,11		;	ld	hl,11
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ld	hl,1		;	ld	hl,1
	call	wrelop		;call	wrelop
	jr	c,loc_1505	;	jp	c,L9
	ld	e,(iy+23)	;	ld	e,(iy+23)
	ld	d,(iy+24)	;	ld	d,(iy+24)
	ld	hl,21		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	jp	cret		;	jp	cret

;=========================================================
; sub_153A OK++
;=========================================================
	global	_sub_153A	;	global	_sub_153A
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_array_A542	;	global	_array_A542
	global	csv		;	global	csv
	global	_putchar	;	global	_putchar
	global	_sub_14F3	;	global	_sub_14F3

	psect	text

; Disassembled version		; After compiling C source code
_sub_153A:
	call	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	push	hl		;	push	hl
	call	_sub_14F3	;	call	_sub_14F3
	ld	e,l		;	ld	e,l
	ld	d,0		;	ld	d,0
	ld	hl,_array_A542	;	ld	hl,F628
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	ex	(sp),hl		;	ex	(sp),hl
	call	_putchar	;	call	_putchar
	jp	cret		;	jp	cret

;=========================================================
; sub_155D OK++
;=========================================================
	global	_sub_155D	;	global	_sub_155D
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_printf		;	global	_printf
	global	_putchar	;	global	_putchar
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_155D:
	call	csv		;	call	csv
	push	hl		;	push	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	(ix+-1),0	;	ld	(ix+-1),0
	jr	loc_15B0	;	jp	l97
loc_1570:			;L10:
	or	a		;	or	a
	jr	nz,loc_157D	;	jp	nz,l100
	ld	hl,p_155d_1	;	ld	hl,449f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	jr	loc_1585	;	jp	l101
loc_157D:			;l100:
	ld	hl,44		;	ld	hl,44
	push	hl		;	push	hl
	call	_putchar	;	call	_putchar
	pop	bc		;	pop	bc
loc_1585:			;l101:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	inc	hl		;	inc	hl
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	dec	hl		;	dec	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	hl,p_155d_2	;	ld	hl,459f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	inc	(ix+-1)		;	inc	(ix+-1)
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	cp	16		;	cp	16
	jr	nz,loc_15B0	;	jp	nz,l97
	ld	hl,10		;	ld	hl,10
	push	hl		;	push	hl
	call	_putchar	;	call	_putchar
	pop	bc		;	pop	bc
	ld	(ix+-1),0	;	ld	(ix+-1),0
loc_15B0:			;l97:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	dec	hl		;	dec	hl
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
	inc	hl		;	inc	hl
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	jr	nz,loc_1570	;	jp	nz,L10
	or	a		;	or	a
	jp	z,cret		;	jp	z,cret
	ld	hl,10		;	ld	hl,10
	push	hl		;	push	hl
	call	_putchar	;	call	_putchar
	jp	cret		;	jp	cret

;=========================================================
; sub_15D3 OK++
;=========================================================
	global	_sub_15D3	;	global	_sub_15D3
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_printf		;	global	_printf
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_15D3:
	call	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	ld	hl,p_15d3_1	;	ld	hl,469f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_15E7 OK++
;=========================================================
	global	_sub_15E7	;	global	_sub_15E7
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	_printf		;	global	_printf
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_15E7:
	call	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	ld	hl,p_15e7_1	;	ld	hl,479f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	cret		;	jp	cret

;=========================================================
; sub_15FB OK++
;=========================================================
	global	_sub_15FB	;	global	_sub_15FB
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	wrelop		;	global	wrelop
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_15FB:
	call	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	bit	7,(ix+9)	;	bit	7,(ix+9)
	jr	nz,loc_1631	;	jp	nz,l108
	ld	(iy+21),2	;	ld	(iy+21),2
	ld	e,(ix+10)	;	ld	e,(ix+10)
	ld	d,(ix+11)	;	ld	d,(ix+11)
	ld	hl,255		;	ld	hl,255
	call	wrelop		;	call	wrelop
	jp	m,loc_162B	;	jp	m,l110
	ld	(iy+9),1	;	ld	(iy+9),1
loc_1624:			;l111:
	ld	(iy+10),0	;	ld	(iy+10),0
	jp	cret		;	jp	cret
loc_162B:			;l110:
	ld	(iy+9),2	;	ld	(iy+9),2
	jr	loc_1624	;	jp	l111
loc_1631:			;l108:
	ld	(iy+21),1	;	ld	(iy+21),1
	ld	e,(ix+10)	;	ld	e,(ix+10)
	ld	d,(ix+11)	;	ld	d,(ix+11)
	ld	hl,127		;	ld	hl,127
	call	wrelop		;	call	wrelop
	jp	m,loc_162B	;	jp	m,l110
	ld	de,-128		;	ld	de,-128
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	call	wrelop		;	call	wrelop
	jp	m,loc_162B	;	jp	m,l110
	ld	(iy+9),1	;	ld	(iy+9),1
	jr	loc_1624	;	jp	l111

; End of file - b19new.asm



*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 1659.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_1659 OK++
;=========================================================
	global	_sub_1659	;	global	_sub_1659
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	wrelop		;	global	wrelop
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_1659:
	call	csv		;	call 	csv
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	call	wrelop		;	call	wrelop
	jp	m,loc_1677	;	jp	m,L2
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	jp	cret		;	jp	cret
loc_1677:			;L2:
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	jp	cret		;	jp	cret

; End of function sub_1659 OK++

; End of file - 1659.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 1680.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_1680 OK++
;=========================================================
	global	_sub_1680	;	global	_sub_1680
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_blkclr		;	global	_blkclr
	global	_hashtab	;	global	_hashtab
	;global	_vars		;	global	_vars
	global	_sub_265	;	global	_sub_265
	global	_word_AE11	;	global	_word_AE11
	global	_word_AED7	;	global	_word_AED7
	global	_word_AF1B	;	global	_word_AF1B
	global	_word_AFE9	;	global	_word_AFE9
	global	_word_AED9	;	global	_word_AED9
	global	_word_AE53	;	global	_word_AE53
	global	_word_AF1D	;	global	_word_AF1D
	global	_lvlidx		;	global	_lvlidx
	global	csv

	psect	data
d_vars_a850:
F609:
	defw	319f
	defw	2
	defw	0
	defb	1
	defw	329f
	defw	2
	defw	0
	defb	1
	defw	339f
	defw	1
	defw	0
	defb	1
	defw	349f
	defw	4
	defw	0
	defb	1
	defw	359f
	defw	2
	defw	0
	defb	2
	defw	369f
	defw	2
	defw	0
	defb	2
	defw	379f
	defw	1
	defw	0
	defb	2
	defw	389f
	defw	4
	defw	0
	defb	2
	defw	399f
	defw	4
	defw	0
	defb	3
	defw	3109f
	defw	4
	defw	0
	defb	3
	defw	3119f
	defw	2
	defw	0
	defb	1
	defw	3129f
	defw	2
	defw	0
	defb	2
	defw	3139f
	defw	0
	defw	0
	defb	0
	defw	3149f
	defw	0
	defw	0
	defb	0

	psect	text

_sub_1680:

	call	csv		;	call csv
	push	hl		;	push hl
	push	hl		;	push hl
	ld	hl,202		;	ld	hl,202
	push	hl		;	push	hl
	ld	hl,_hashtab	;	ld	hl,_hashtab
	push	hl		;	push	hl
	call	_blkclr		;	call	_blkclr
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-4),14	;	ld	(ix+-4),14
	ld	(ix+-3),0	;	ld	(ix+-3),0
	ld	iy,F609		;	ld	iy,_vars
loc_169E:			;l14:
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,(iy+1)	;	ld	h,(iy+1)
	push	hl		;	push	hl
	call	_sub_265	;	call	_sub_265
	pop	bc		;	pop	bc
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(hl),65		;	ld	(hl),65
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,17		;	ld	hl,17
	add	hl,de		;	add	hl,de
	ld	e,(iy+4)	;	ld	e,(iy+4)
	ld	d,(iy+5)	;	ld	d,(iy+5)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,9		;	ld	hl,9
	add	hl,de		;	add	hl,de
	ld	e,(iy+2)	;	ld	e,(iy+2)
	ld	d,(iy+3)	;	ld	d,(iy+3)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	a,(iy+6)	;	ld	a,(iy+6)
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,21		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	(hl),a		;	ld	(hl),a
	ld	de,7		;	ld	de,7
	add	iy,de		;	add	iy,de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	dec	hl		;	dec	hl
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	a,l		;	ld	a,l
	or	h		;	or	(ix+-3)		  ; Error
	jr	nz,loc_169E	;	jp	nz,l14
	ld	hl,19f		;	ld	hl,19f
	push	hl		;	push	hl
	call	_sub_265	;	call	_sub_265
	ld	(_word_AE11),hl	;	ld	(_word_AE11),hl
	ld	hl,29f		;	ld	hl,29f
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_265	;	call	_sub_265
	ld	(_word_AED7),hl	;	ld	(_word_AED7),hl
	ld	hl,39f		;	ld	hl,39f
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_265	;	call	_sub_265
	ld	(_word_AF1B),hl	;	ld	(_word_AF1B),hl
	ld	hl,49f		;	ld	hl,49f
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_265	;	call	_sub_265
	ld	(_word_AFE9),hl	;	ld	(_word_AFE9),hl
	ld	hl,59f		;	ld	hl,59f
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_265	;	call	_sub_265
	ld	(_word_AED9),hl	;	ld	(_word_AED9),hl
	ld	hl,69f		;	ld	hl,69f
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_265	;	call	_sub_265
	ld	(_word_AE53),hl	;	ld	(_word_AE53),hl
	ld	hl,79f		;	ld	hl,79f
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_265	;	call	_sub_265
	ld	(_word_AF1D),hl	;	ld	(_word_AF1D),hl
	ld	hl,-1		;	ld	hl,-1
	ld	(_lvlidx),hl	;	ld	(_lvlidx),hl
	jp	cret		;	jp	cret

	psect	data

d_vars_A8B2:
319:	defb	105,0

d_vars_A8B4:
329:	defb	115,0

d_vars_A8B6:
339:	defb	99,0

d_vars_A8B8:
349:	defb	108,0

d_vars_A8BA:
359:	defb	117,105,0

d_vars_A8BD:
369:	defb	117,115,0

d_vars_A8C0:
379:	defb	117,99,0

d_vars_A8C3:
389:	defb	117,108,0

d_vars_A8C6:
399:	defb	102,0

d_vars_A8C8:
3109:	defb	100,0

d_vars_A8CA:
3119:	defb	120,0

d_vars_A8CC:
3129:	defb	117,120,0

d_vars_A8CF:
3139:	defb	98,0

d_vars_A8D1:
3149:	defb	118,0


	psect	text

; End of function sub_1680 OK+

;=========================================================
; sub_174C OK++
;=========================================================
	global	_sub_174C	;	global	_sub_174C
	global	_word_AE0F	;	global	_word_AE0F

_sub_174C:
	ld	hl,(_word_AE0F)	;	ld	hl,(_word_AE0F)
	inc	hl		;	inc	hl
	ld	(_word_AE0F),hl	;	ld	(_word_AE0F),hl
	ret			;	ret

;=========================================================
; sub_1754 OK++
;=========================================================
	global	_sub_1754	;	global	_sub_1754
	global	_nstdpth	;	global	_nstdpth
	global	_gethashptr	;	global	_gethashptr
	global	_allocmem	;	global	_allocmem
	global	_strlen		;	global	_strlen
	global	_strcpy		;	global	_strcpy
	global csv

_sub_1754:
	call csv		;	call	csv
	push hl			;	push	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	call	_sub_265	;	call	_sub_265
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	de,(_nstdpth)	;	ld	de,(_nstdpth)
	ld	l,(iy+4)	;	ld	l,(iy+4)
	ld	h,0		;	ld	h,0
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_17D4	;	jp	z,l17
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	call	_gethashptr	;	call	_gethashptr
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	hl,22		;	ld	hl,22
	ex	(sp),hl		;	ex	(sp),hl
	call	_allocmem	;	call	_allocmem
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+7),c	;	ld	(iy+7),c
	ld	(iy+8),b	;	ld	(iy+8),b
	push	iy		;	push	iy
	pop	de		;	pop	de
	dec	hl		;	dec	hl
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	call	_strlen		;	call	_strlen
	pop	bc		;	pop	bc
	inc	hl		;	inc	hl
	push	hl		;	push	hl
	call	_allocmem	;	call	_allocmem
	ld	(iy+0),l	;	ld	(iy+0),l
	ld	(iy+1),h	;	ld	(iy+1),h
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,(iy+1)	;	ld	h,(iy+1)
	push	hl		;	push	hl
	call	_strcpy		;	call	_strcpy
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,(_nstdpth)	;	ld	a,(_nstdpth)
	ld	(iy+4),a	;	ld	(iy+4),a
loc_17D4:			;l17:
	ld	a,(ix+8)	;	ld	a,(ix+8)
	ld	(iy+2),a	;	ld	(iy+2),a
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret

	psect	data

p_1680_1:
19:	defb	108,0

p_1680_2:
29:	defb	100,0

p_1680_3:
39:	defb	98,0

p_1680_4:
49:	defb	118,0

p_1680_5:
59:	defb	99,0

p_1680_6:
69:	defb	117,99,0

p_1680_7:
79:	defb	120,0

	psect	text

; End of function sub_1754 OK++

; End of file - 1680.asm

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 17E0.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_17E0
;
; Compiler generates identical code from restored source
; program in C, however, location of branches associated
; with case constants is different from original.
; This does not affect the function.
;=========================================================
	global	_sub_17E0	;	global	_sub_17E0
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_sub_1754	;	global	_sub_1754
	global	_sub_306	;	global	_sub_306
	global	_sub_627	;	global	_sub_627
	global	_sub_600E	;	global	_sub_600E
	global	_sub_4192	;	global	_sub_4192
	global	_faterror	;	global	_faterror
	global	_sub_475C	;	global	_sub_475C
	global	_sub_76F	;	global	_sub_76F
	global	_sub_1C8E	;	global	_sub_1C8E
	global	_uerror		;	global	_uerror
	global	_sub_5CF5	;	global	_sub_5CF5
	global	_sub_174C	;	global	_sub_174C
	global	_lvlidx		;	global	_lvlidx
	global	_array_AE57	;	global	_array_AE57
	global	_nstdpth	;	global	_nstdpth
	global	_array_AE97	;	global	_array_AE97
	global	_array_AE13	;	global	_array_AE13
	global	_array_AEDB	;	global	_array_AEDB
	global csv

	psect	text

;	Disassembled version	; After compiling C source code
_sub_17E0:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	push	hl		;	push 	hl
	ld	hl,39h		;	ld	hl,57
	push	hl		;	push	hl
	call	_sub_306	;	call	_sub_306
	push	hl		;	push	hl
	call	_sub_1754	;	call	_sub_1754
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	push	hl		;	push	hl
	pop	de		;	pop	de
	ld	hl,0Dh		;	ld	hl,13
	add	hl,de		;	add	hl,de
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_306	;	call	_sub_306
	push	hl		;	push	hl
	call	_sub_627	;	call	_sub_627
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(iy+0Fh),l	;	ld	(iy+15),l
	ld	(iy+10h),h	;	ld	(iy+16),h
	call	_sub_4192	;	call	_sub_4192
	push	hl		;	push	hl
	call	_sub_600E	;	call	_sub_600E
	pop	bc		;	pop	bc
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	a,(hl)		;	ld	a,(hl)
	cp	43h		;	cp	67
	jr	z,loc_1825	;	jp	z,l12
	ld	hl,19f		;	ld	hl,19f
	push	hl		;	push	hl
	call	_faterror	;	call	_faterror
	pop	bc		;	pop	bc
loc_1825:			;l12:
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+0Bh),c	;	ld	(iy+11),c
	ld	(iy+0Ch),b	;	ld	(iy+12),b
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	push	hl		;	push	hl
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
	call	_sub_306	;	call	_sub_306
	ld	a,(hl)		;	ld	a,(hl)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	hl,5Dh		;	ld	hl,93
	push	hl		;	push	hl
	call	_sub_76F	;	call	_sub_76F
	pop	bc		;	pop	bc
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,h		;	ld	a,h
	or	a		;	or	a
	jr	nz,loc_1890	;	jp	nz,l30
	ld	a,l		;	ld	a,l
	cp	41h		;	cp	65
	jr	z,loc_18AE	;	jp	z,l16		
	cp	45h		;	cp	69
	jr	z,loc_18C4	;	jp	z,l18
	cp	50h		;	cp	80
	jr	z,loc_18B8	;	jp	z,l22
	cp	52h		;	cp	82
	jr	z,loc_18B4	;	jp	z,l20
	cp	53h		;	cp	83
	jr	z,loc_18BE	;	jp	z,l24
	cp	54h		;	cp	84
	jr	z,loc_18CA	;	jp	z,l26
	cp	61h		;	cp	97
	jr	z,loc_18AE	;	jp	z,l16
	cp	65h		;	cp	101
	jr	z,loc_18C4	;	jp	z,l18
	cp	70h		;	cp	112
	jr	z,loc_18B8	;	jp	z,l22
	cp	72h		;	cp	114
	jr	z,loc_18B4	;	jp	z,l20
	cp	73h		;	cp	115
	jr	z,loc_18BE	;	jp	z,l24
	cp	74h		;	cp	116
	jr	z,loc_18CA	;	jp	z,l26
loc_1890:			;l30:
	ld	hl,29f		;	ld	hl,29f
	push	hl		;	push	hl
	call	_faterror	;	call	_faterror
	pop	bc		;	pop	bc
loc_1898:			;l13:
	push	iy		;	push	iy
	call	_sub_1C8E	;	call	_sub_1C8E
	pop	bc		;	pop	bc
	ld	(iy+9),l	;	ld	(iy+9),l
	ld	(iy+0Ah),h	;	ld	(iy+10),h
	ld	a,(iy+2)	;	ld	a,(iy+2)
	cp	41h		;	cp	65
	jr	nz,loc_1913	;	jp	z,cret
	jp	cret		;			   ;----+
loc_18AE:			;l16:				;
	ld	(iy+15h),1	;	ld	(iy+21),1	;
	jr	loc_1898	;	jp	l13		;
loc_18B4:			;l20:				;
	set	3,(iy+3)	;	set	3,(iy+3)	;
loc_18B8:			;l22:				;
	ld	(iy+15h),5	;	ld	(iy+21),5	;
	jr	loc_1898	;	jp	l13		;
loc_18BE:			;l24:				;
	ld	(iy+15h),4	;	ld	(iy+21),4	;
	jr	loc_1898	;	jp	l13		;
loc_18C4:			;l18:				;
	ld	(iy+15h),3	;	ld	(iy+21),3	;
	jr	loc_1898	;	jp	l13		;
loc_18CA:			;l26:				;
	ld	(iy+2),41h	;	ld	(iy+2),65	;
	ld	a,(iy+0Dh)	;	ld	a,(iy+13)	;
	or	(iy+0Eh)	;	or	(iy+14)		;
	jr	z,loc_18E4	;	jp	z,l27		;
	ld	(iy+11h),0	;	ld	(iy+17),0	;
	ld	(iy+12h),0	;	ld	(iy+18),0	;
	ld	(iy+15h),2	;	ld	(iy+21),2	;
	jr	loc_18FF	;	jp	l28		;
loc_18E4:			;l27:				;
	ld	e,(iy+0Fh)	;	ld	e,(iy+15)	;
	ld	d,(iy+10h)	;	ld	d,(iy+16)	;
	ld	hl,11h		;	ld	hl,17		;
	add	hl,de		;	add	hl,de		;
	ld	c,(hl)		;	ld	c,(hl)		;
	inc	hl		;	inc	hl		;
	ld	b,(hl)		;	ld	b,(hl)		;
	ld	(iy+11h),c	;	ld	(iy+17),c	;
	ld	(iy+12h),b	;	ld	(iy+18),b	;
	ld	hl,15h		;	ld	hl,21		;
	add	hl,de		;	add	hl,de		;
	ld	l,(hl)		;	ld	l,(hl)		;
	ld	(iy+15h),l	;	ld	(iy+21),l	;
loc_18FF:			;l28:				;
	ld	de,1		;	ld	de,1		;
	ld	l,(iy+0Bh)	;	ld	l,(iy+11)	;
	ld	h,(iy+0Ch) 	;	ld	h,(iy+12)	;
	or	a		;	or	a		;
	sbc	hl,de		;	sbc	hl,de		;
	jr	z,loc_1898	;	jp	z,l13		;
	ld	(iy+15h),0	;	ld	(iy+21),0	;
	jr	loc_1898	;	jp	l13		;
loc_1913:			;				;
	ld	a,(iy+0Dh)	;	ld	a,(iy+13)  <----+
	or	(iy+0Eh)	;	or	(iy+14)
	jr	nz,loc_193A	;	jp	nz,l34
	ld	a,(iy+9)	;	ld	a,l
	or	(iy+0Ah)	;	or	(iy+10)
	jr	nz,loc_193A	;	jp	nz,l34
	ld	e,(iy+0Fh)	;	ld	e,(iy+15)
	ld	d,(iy+10h)	;	ld	d,(iy+16)
	ld	hl,9		;	ld	hl,9
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	or	(hl)		;	or	(hl)
	jr	nz,loc_193A	;	jp	nz,l34
	ld	hl,39f		;	ld	hl,39f
	push	hl		;	push	hl
	call	_uerror	;	call	_uerror
	pop	bc		;	pop	bc
loc_193A:			;l34:
	ld	a,(iy+15h)	;	ld	a,(iy+21)
	cp	5		;	cp	1
	jr	z,loc_1945	;	jp	z,l36
	cp	1		;	cp	5
	jr	nz,loc_1955	;	jp	z,l36
				;			   ;----+
loc_1945:			;l36:				;
	ld	l,(ix+-4)	;	ld	l,(ix+-4)	;
	ld	h,(ix+-3)	;	ld	h,(ix+-3)	;
	push	hl		;	push	hl		;
	push	iy		;	push	iy		;
	call	_sub_5CF5	;	call	_sub_5CF5	;
	pop	bc		;	pop	bc		;
	pop	bc		;	pop	bc		;
	jr	loc_195E	;	jp	l33		;
loc_1955:			;				;
	call	_sub_174C	;	call	_sub_174C  <----+
	ld	(iy+11h),l	;	ld	(iy+17),l
	ld	(iy+12h),h	;	ld	(iy+18),h
loc_195E:			;l33:
	bit	1,(iy+0Dh)	;	bit	1,(iy+13)
	jp	z,cret		;	jp	z,cret
	ld	a,(iy+0Bh)	;	ld	a,(iy+11)
	or	(iy+0Ch)	;	or	(iy+12)
	jp	z,cret		;	jp	z,cret
	ld	de,20h		;	ld	de,32
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	inc	hl		;	inc	hl
	ld	(_lvlidx),hl	;	ld	(_lvlidx),hl
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_1985	;	jp	nz,l40
	ld	hl,49f		;	ld	hl,49f
	push	hl		;	push	hl
	call	_faterror	;	call	_faterror
	pop	bc		;	pop	bc
loc_1985:			;l40:
	ld	de,_array_AE57	;	ld	de,_array_AE57
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,(_nstdpth)	;	ld	de,(_nstdpth)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	de,_array_AE97	;	ld	de,_array_AE97
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,6		;	ld	de,6
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	de,_array_AE13	;	ld	de,_array_AE13
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,0		;	ld	de,0
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	de,_array_AEDB	;	ld	de,_array_AEDB
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	push	iy		;	push	iy
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	jp	cret		;	jp	cret

; End of function sub_17E0 OK+

	psect	data

d_17e0_A8E2:
19:
	defb	66,97,100,32,101,108,101,109,101,110,116,32,99,111,117,110
	defb	116,32,101,120,112,114,0
d_17e0_A8F9:
29:
	defb	66,97,100,32,115,116,111,114,97,103,101,32,99,108,97,115
	defb	115,0
d_17e0_A90B:
39:
	defb	66,97,100,32,100,105,109,101,110,115,105,111,110,115,0
d_17e0_A91A:
49:
	defb	70,117,110,99,116,105,111,110,115,32,110,101,115,116,101,100
	defb	32,116,111,111,32,100,101,101,112,0

	psect	text

; End of file 17E0.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 19C1.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_19C1 OK++
;=========================================================
	global	_sub_19C1	;	global	_sub_19C1
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_sub_1754	;	global	_sub_1754
	global	_sub_306	;	global	_sub_306
	global	_allocmem	;	global	_allocmem
	global	_atoi		;	global	_atoi
	global	_sub_627	;	global	_sub_627
	global	_sub_600E	;	global	_sub_600E
	global	_sub_4192	;	global	_sub_4192
	global	_faterror	;	global	_faterror
	global	_sub_475C	;	global	_sub_475C
	global	_sub_1C8E	;	global	_sub_1C8E
	global	_movmem		;	global	_movmem
	global	_sub_1CEF	;	global	_sub_1CEF

	psect	text

;	Disassembled version	; After compiling C source code
_sub_19C1:
	call	ncsv		;	call	ncsv
	defw 	0FDF2h		;	defw 	-526
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	call	_sub_306	;	call	_sub_306
	push	hl		;	push	hl
	call	_sub_1754	;	call	_sub_1754
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FDF2h	;	ld	hl,-526
	add	hl,de		;	add	hl,de
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	ld	de,0		;	ld	de,0
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
loc_19EF:			;l12:
	call	_sub_306	;	call	_sub_306
	ld	(ix+-10),l	;	ld	(ix+-10),l
	ld	(ix+-9),h	;	ld	(ix+-9),h
	ld	a,(hl)		;	ld	a,(hl)
	cp	5Dh		;	cp	93
	jp	z,loc_1AAE	;	jp	z,l13
	ld	hl,16h		;	ld	hl,22
	push	hl		;	push	hl
	call	_allocmem	;	call	_allocmem
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	(iy+2),16h	;	ld	(iy+2),22
	ld	l,(ix+-10)	;	ld	l,(ix+-10)
	ld	h,(ix+-9)	;	ld	h,(ix+-9)
	ld	a,(hl)		;	ld	a,(hl)
	cp	3Ah		;	cp	58
	jr	nz,loc_1A2E	;	jp	nz,l16
	inc	hl		;	inc	hl
	push	hl		;	push	hl
	call	_atoi		;	call	_atoi
	pop	bc		;	pop	bc
	ld	(iy+5),l	;	ld	(iy+5),l
	set	4,(iy+3)	;	set	4,(iy+3)
	call	_sub_306	;	call	_sub_306
	ld	(ix+-10),l	;	ld	(ix+-10),l
	ld	(ix+-9),h	;	ld	(ix+-9),h
loc_1A2E:			;l16:
	push	iy		;	push	iy
	pop	de		;	pop	de
	ld	hl,0Dh		;	ld	hl,13
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	ld	l,(ix+-10)	;	ld	l,(ix+-10)
	ld	h,(ix+-9)	;	ld	h,(ix+-9)
	push	hl		;	push	hl
	call	_sub_627	;	call	_sub_627
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(iy+0Fh),l	;	ld	(iy+15),l
	ld	(iy+10h),h	;	ld	(iy+16),h
	call	_sub_4192	;	call	_sub_4192
	push	hl		;	push	hl
	call	_sub_600E	;	call	_sub_600E
	pop	bc		;	pop	bc
	ld	(ix+-8),l	;	ld	(ix+-8),l
	ld	(ix+-7),h	;	ld	(ix+-7),h
	ld	a,(hl)		;	ld	a,(hl)
	cp	43h		;	cp	67
	jr	z,loc_1A63	;	jp	z,l17
	ld	hl,19f		;	ld	hl,19f
	push	hl		;	push	hl
	call	_faterror	;	call	_faterror
	pop	bc		;	pop	bc
loc_1A63:			;l17:
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,19h		;	ld	hl,25
	add	hl, de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+0Bh),c	;	ld	(iy+11),c
	ld	(iy+0Ch),b	;	ld	(iy+12),b
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	push	hl		;	push	hl
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
	push	iy		;	push	iy
	call	_sub_1C8E	;	call	_sub_1C8E
	pop	bc		;	pop	bc
	ld	(iy+9),l	;	ld	(iy+9),l
	ld	(iy+0Ah),h	;	ld	(iy+10),h
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	ex	de,hl		;	ex	de,hl
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ex	de,hl		;	ex	de,hl
	inc	hl		;	inc	hl
	ex	de,hl		;	ex	de,hl
	ld	(hl),d		;	ld	(hl),d
	dec	hl		;	dec	hl
	ld	(hl),e		;	ld	(hl),e
	ex	de,hl		;	ex	de,hl
	dec	hl		;	dec	hl
	add	hl,hl		;	add	hl,hl
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	add	hl,de		;	add	hl,de
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	push	iy		;	push	iy
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	jp	loc_19EF	;	jp	l12
loc_1AAE:			;l13:
	ld	l,(ix+-6)	;	ld	l,(ix+-6)
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	hl,0FFFFh	;	ld	hl,-1
	add	hl,bc		;	add	hl,bc
	add	hl,hl		;	add	hl,hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	push	hl		;	push	hl
	call	_allocmem	;	call	_allocmem
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+-6)	;	ld	l,(ix+-6)
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	push	hl		;	push	hl
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FDF2h	;	ld	hl,-526
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	call	_movmem		;	call	_movmem
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ld	hl,13h		;	ld	hl,19
	add	hl,de		;	add	hl,de
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_sub_1CEF	;	call	_sub_1CEF
	jp	cret		;	jp	cret
				
; End of function sub_19C1 OK++

;=========================================================
; sub_17E0 OK+
;
; Warning
;   In file CGEN.COM stack recovery failed when returning
;   from function sub_76F
;=========================================================
	global	_sub_1B0C	;	global	_sub_1B0C
	global	_sub_15FB	;	global	_sub_15FB
	global	_sub_76F	;	global	_sub_76F
	global	arelop		;	global	arelop
	global	arelop		;	global	arelop

;	Disassembled version	; After compiling C source code
_sub_1B0C:
	call	ncsv		;	call 	ncsv
	defw	0FDF2h		;	defw 	-526
	ld	(ix+-6),0	;	ld	(ix+-6),0
	ld	(ix+-5),80h	;	ld	(ix+-5),128
	ld	(ix+-8),0FFh	;	ld	(ix+-8),255
	ld	(ix+-7),7Fh	;	ld	(ix+-7),127
	ld	hl, 34h		;	ld	hl,52
	push	hl		;	push	hl
	call	_sub_306	;	call	_sub_306
	push	hl		;	push	hl
	call	_sub_1754	;	call	_sub_1754
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FDF2h	;	ld	hl,-526
	add	hl,de		;	add	hl,de
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	de,0		;	ld	de,0
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
loc_1B44:			;l19:
	call	_sub_4192	;	call	_sub_4192
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	a,(hl)		;	ld	a,(hl)
	cp	17h		;	cp	23
	push	hl		;	push	hl
	jp	nz,loc_1BBE	;	jp	nz,L1
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	dec	hl		;	dec	hl
	add	hl,hl		;	add	hl,hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(ix+-10),l	;	ld	(ix+-10),l
	ld	(ix+-9),h	;	ld	(ix+-9),h
	push	hl		;	push	hl
	call	_allocmem	;	call	_allocmem
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	l,(ix+-10)	;	ld	l,(ix+-10)
	ld	h,(ix+-9)	;	ld	h,(ix+-9)
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FDF2h	;	ld	hl,-526
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	call	_movmem		;	call	_movmem
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	(iy+13h),l	;	ld	(iy+19),l
	ld	(iy+14h),h	;	ld	(iy+20),h
	ld	l,(ix+-6)	;	ld	l,(ix+-6)
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+-8)	;	ld	l,(ix+-8)
	ld	h,(ix+-7)	;	ld	h,(ix+-7)
	push	hl		;	push	hl
	push	iy		;	push	iy
	call	_sub_15FB	;	call	_sub_15FB	;  1BAF  CALL 15FB	;  1B91  CALL 15CA
	pop	bc		;	pop	bc		;  1BB2  POP  BC	;  1B94  POP  BC
	pop	bc		;	pop	bc		;  1BB3  POP  BC	;  1B95  POP  BC
	ld	hl,5Dh		;	ld	hl,93		;  1BB4  LD   HL,005D	;  1B96  LD   HL,005D
	ex	(sp),hl		;	ex	(sp),hl		;  1BB7  EX   SP,HL	;  1B99  EX   SP,HL
	call	_sub_76F	;	call	_sub_76F	;  1BB8  CALL 076F	;  1B9A  CALL 0745
; 	missing pop bc		;	pop	bc		;			;  1B9D  POP  BC
	jp	cret		;	jp	cret		;  1BBB  JP   8024	;  1B9E  JP   8DE0
loc_1BBE:			;L1:				;			;
	call	_sub_600E	;	call	_sub_600E	;  1BBE  CALL 600E	;  1BA1  CALL 5F7D
	pop	bc		;	pop	bc		;  1BC1  POP  BC	;  1BA4  POP  BC
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ex	de,hl		;	ex	de,hl
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ex	de,hl		;	ex	de,hl
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ex	de,hl		;	ex	de,hl
	inc	hl		;	inc	hl
	ex	de,hl		;	ex	de,hl
	ld	(hl),d		;	ld	(hl),d
	dec	hl		;	dec	hl
	ld	(hl),e		;	ld	(hl),e
	ex	de,hl		;	ex	de,hl
	dec	hl		;	dec	hl
	add	hl,hl		;	add	hl,hl
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	add	hl,de		;	add	hl,de
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(hl),c		;	ld	(hl),c
	inc	hl		;	inc	hl
	ld	(hl),b		;	ld	(hl),b
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	ld	a,d		;	ld	a,d
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	l,a		;	ld	l,a
	ld	h,a		;	ld	h,a
	call	arelop		;	call	arelop
	jp	p,loc_1C27	;	jp	p,l23
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-6),c	;	ld	(ix+-6),c
	ld	(ix+-5),b	;	ld	(ix+-5),b
loc_1C27:			;l23:
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	a,d		;	ld	a,d
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	l,a		;	ld	l,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	call	arelop		;	call	arelop
	jp	p,loc_1C5F	;	jp	p,l24
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-8),c	;	ld	(ix+-8),c
	ld	(ix+-7),b	;	ld	(ix+-7),b
loc_1C5F:			;l24:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
	jp	loc_1B44	;	jp	l19


; End of function sub_1B0C OK+

	psect	data

p_19c1_A934:
19:	defb	83,116,114,117,99,100,101,99,108,32,45,32,98,97,100,9
	defb	110,101,108,101,109,0

	psect	text

; End of file - 19C1.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 1C6D.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_1C6D OK++
;=========================================================
	global	_sub_1C6D	;	global	_sub_1C6D
	global	ncsv,cret,indir	;	global	ncsv, cret, indir	
	global csv		;	global csv		

	psect	text

;	Disassembled version	; After compiling C source code
_sub_1C6D:
	call 	csv		;	call 	csv	
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	hl,-1		;	ld	hl,-1	
	or	a		;	or	a	
	sbc	hl,de		;	sbc	hl,de	
	push	hl		;	push	hl	
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	add	hl,de		;	add	hl,de	
	pop	de		;	pop	de	
	ld	a,l		;	ld	a,l	
	and	e		;	and	e	
	ld	l,a		;	ld	l,a	
	ld	a,h		;	ld	a,h	
	and	d		;	and	d	
	ld	h,a		;	ld	h,a	
	jp	cret		;	jp	cret	

; End of function sub_1C6D++

; End of file 1C6D.as
*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 1C8E.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_1C8E OK++
;=========================================================
	global	_sub_1C8E	;	global	_sub_1C8E
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	lmul		;	global	lmul
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_1C8E:
	call	csv		;	call 	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	bit	0,(iy+13)	;	bit	0,(iy+13)
	jr	z,loc_1CAA	;	jp	z,l12
	ld	l,(iy+11)	;	ld	l,(iy+11)
	ld	h,(iy+12)	;	ld	h,(iy+12)
	add	hl,hl		;	add	hl,hl
	jp	cret		;	jp	cret
loc_1CAA:			;l12:
	ld	e,(iy+15)	;	ld	e,(iy+15)
	ld	d,(iy+16)	;	ld	d,(iy+16)
	ld	hl,9		;	ld	hl,9
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	e,(iy+11)	;	ld	e,(iy+11)
	ld	d,(iy+12)	;	ld	d,(iy+12)
	call	lmul		;	call	lmul
	jp	cret		;	jp	cret

; End of function sub_1C8E OK++

;=========================================================
; sub_1CC4 OK++
;=========================================================
	global	_sub_1CC4	;	global	_sub_1CC4
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_1CC4:
	call	csv		;	call 	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(iy+13)	;	ld	a,(iy+13)
	or	(iy+14)		;	or	(iy+14)
	jr	z,loc_1CDE	;	jp	z,l14
	ld	hl,0		;	ld	hl,0
	jp	cret		;	jp	cret
loc_1CDE:			;l14:
	ld	e,(iy+15)	;	ld	e,(iy+15)
	ld	d,(iy+16)	;	ld	d,(iy+16)
	ld	hl,11h		;	ld	hl,17
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	jp	cret		;	jp	cret

; End of function sub_1CC4 OK++

;=========================================================
; sub_1CEF OK++
;=========================================================
	global	_sub_1CEF	;	global	_sub_1CEF
	global	_sub_1659	;	global	_sub_1659
	global	_sub_1C6D	;	global	_sub_1C6D
	global	wrelop		;	global	wrelop

	psect	text

; Disassembled version		; After compiling C source code
_sub_1CEF:
	call 	ncsv		;	call 	ncsv
	defw 	0FFF8h		;	defw 	-8
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	(ix+-2),0	;	ld	(ix+-2),0
	ld	(ix+-1),0	;	ld	(ix+-1),0
	ld	hl,0		;	ld	hl,0
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	jp	loc_1E89	;	jp	l16
loc_1D17:			;l17:
	ld	e,(iy+19)	;	ld	e,(iy+19)
	ld	d,(iy+20)	;	ld	d,(iy+20)
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	add	hl,hl		;	add	hl,hl	
	add	hl,de		;	add	hl,de
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-8),c	;	ld	(ix+-8),c
	ld	(ix+-7),b	;	ld	(ix+-7),b
	ld	a,(iy+2)	;	ld	a,(iy+2)
	cp	38h		;	cp	56
	jr	nz,loc_1D66	;	jp	nz,l19
	ld	e,c		;	ld	e,c
	ld	d,b		;	ld	d,b
	ld	hl,9		;	ld	hl,9
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	call	_sub_1659	;	call	_sub_1659
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,11h		;	ld	hl,17
	add	hl,de		;	add	hl,de
	ld	de,0		;	ld	de,0
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	jp	loc_1E7C	;	jp	l20
loc_1D66:			;l19:
	ld	l,(ix+-8)	;	ld	l,(ix+-8)
	ld	h,(ix+-7)	;	ld	h,(ix+-7)
	push	hl		;	push	hl
	call	_sub_1CC4	;	call	_sub_1CC4
	ex	(sp),hl		;	ex	(sp),hl	
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	call	_sub_1C6D	;	call	_sub_1C6D
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,11h		;	ld	hl,17
	add	hl,de		;	add	hl,de
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	(ix+-2),e	;	ld	(ix+-2),e
	ld	(ix+-1),d	;	ld	(ix+-1),d
	ld	l,(ix+-8)	;	ld	l,(ix+-8)
	ld	h,(ix+-7)	;	ld	h,(ix+-7)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	bit	4,(hl)		;	bit	4,(hl)
	jp	z,loc_1E37	;	jp	z,l21
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,5		;	ld	hl,5
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	add	hl,de		;	add	hl,de
	ex	de,hl		;	ex	de,hl
	ld	hl,10h		;	ld	hl,16
	call	wrelop		;	call	wrelop
	jr	c,loc_1DCB	;	jp	c,L1
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,5		;	ld	hl,5
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	or	a		;	or	a
	jr	nz,loc_1DF6	;	jp	nz,l22
loc_1DCB:			;L1:
	ld	a,(ix+-6)	;	ld	a,(ix+-6)
	or	(ix+-5)		;	or	(ix+-5)
	jr	z,loc_1DEE	;	jp	z,l23
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,11h		;	ld	hl,17
	add	hl,de 		;	add	hl,de
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	inc	de		;	inc	de
	inc	de		;	inc	de
	ld	(ix+-2),e	;	ld	(ix+-2),e
	ld	(ix+-1),d	;	ld	(ix+-1),d
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
loc_1DEE:			;l23:
	ld	(ix+-6),0	;	ld	(ix+-6),0
	ld	(ix+-5),0	;	ld	(ix+-5),0
loc_1DF6:			;l22:
	ld	a,(ix+-6)	;	ld	a,(ix+-6)
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,6		;	ld	hl,6
	add	hl,de		;	add	hl,de
	ld	(hl),a		;	ld	(hl),a
	ld	hl,5		;	ld	hl,5
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	ld	d,0		;	ld	d,0
	ld	l,a		;	ld	l,a
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	add	hl,de		;	add	hl,de
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	ld	de,20h		;	ld	de,32
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_1E7C	;	jp	nz,l20
	ld	(ix+-6),0	;	ld	(ix+-6),0
	ld	(ix+-5),0	;	ld	(ix+-5),0
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	jr	loc_1E7C	;	jp	l20
loc_1E37:			;l21:
	ld	a,(ix+-6)	;	ld	a,(ix+-6)
	or	(ix+-5)		;	or	(ix+-5)
	jr	z,loc_1E62	;	jp	z,l25
	ld	(ix+-6),0	;	ld	(ix+-6),0
	ld	(ix+-5),0	;	ld	(ix+-5),0
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,11h		;	ld	hl,17
	add	hl,de		;	add	hl,de
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	inc	de		;	inc	de
	inc	de		;	inc	de
	ld	(ix+-2),e	;	ld	(ix+-2),e
	ld	(ix+-1),d	;	ld	(ix+-1),d
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
loc_1E62:			;l25:
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,9		;	ld	hl,9
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl) 		;	ld	b,(hl)
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	add	hl,bc		;	add	hl,bc
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
loc_1E7C:			;l20:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	inc	hl		;	inc	hl
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
loc_1E89:			;l16:
	ld	l,(iy+19)	;	ld	l,(iy+19)
	ld	h,(iy+20)	;	ld	h,(iy+20)
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl) 		;	ld	d,(hl)
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_1D17	;	jp	nz,l17
	ld	a,(ix+-6)	;	ld	a,(ix+-6)
	or	(ix+-5)		;	or	(ix+-5)
	jr	z,loc_1EBC	;	jp	z,l26
	ld	(ix+-6),0	;	ld	(ix+-6),0
	ld	(ix+-5),0	;	ld	(ix+-5),0
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
loc_1EBC:			;l26:
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	call	_sub_1C6D	;	call	_sub_1C6D
	ld	(iy+9),l	;	ld	(iy+9),l
	ld	(iy+10),h	;	ld	(iy+10),h
	ld	(iy+17),0	;	ld	(iy+17),0
	ld	(iy+18),0	;	ld	(iy+18),0
	ld	(iy+2),37h 	;	ld	(iy+2),55
	jp	cret		;	jp	cret

; End of function sub_1CEF OK++

;=========================================================
; sub_1EDF OK++
;=========================================================
	global	_sub_1EDF	;	global	_sub_1EDF
	global	_hashtab	;	global	_hashtab
	global	_sub_14D3	;	global	_sub_14D3
	global	_nstdpth	;	global	_nstdpth
	global	_word_AFE9	;	global	_word_AFE9
	global 	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_1EDF:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	hl,_hashtab	;	ld	hl,_hashtab
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
loc_1EEC:			;l30:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	pop	iy		;	pop	iy
	jr	loc_1F1D	;	jp	l31
loc_1EFA:			;l32:
	ld	a,(iy+2)	;	ld	a,(iy+2)
	cp	39h 		;	cp	57
	jr	nz,loc_1F14	;	jp	nz,l34
	ld	a,(iy+15h)	;	ld	a,(iy+21)
	cp	2		;	cp	2
	jr	nz,loc_1F14	;	jp	nz,l34
	bit	2,(iy+3)	;	bit	2,(iy+3)
	jr	z,loc_1F14	;	jp	z,l34
	push	iy		;	push	iy
	call	_sub_14D3	;	call	_sub_14D3
	pop	bc		;	pop	bc
loc_1F14:			;l34:
	ld	l,(iy+7)	;	ld	l,(iy+7)
	ld	h,(iy+8)	;	ld	h,(iy+8)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_1F1D:			;l31:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_1F32	;	jp	z,l28
	ld	de,(_nstdpth)	;	ld	de,(_nstdpth)
	ld	l,(iy+4)	;	ld	l,(iy+4)
	ld	h,0		;	ld	h,0
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_1EFA	;	jp	z,l32
loc_1F32:			;l28:
	ld	de,_word_AFE9	;	ld	de,_word_AFE9
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_1EEC	;	jp	nz,l30
	jp	cret		;	jp	cret

; End of function sub_1EDF OK++

; End of file 1C8E.as

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 1F4B.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_1F4B OK
;=========================================================
	global	_sub_1F4B
	global	ncsv,cret,indir
	global	_sub_13D
	global	_sub_2B2A
	global	_sub_2B79
	global	_sub_47B2
	global	_sub_63B8
	global	_sub_6589
	global	_sub_66BC
	global	brelop
	global	wrelop
	global	_array_80EF
	global	_array_A162
	global	_dopetab
;	global	_array_A94A
	global	_array_AAE8
	global	_word_AFED
	global	_word_AFEF
	global	_word_AFF1
	global	_byte_AFF3
	global	_word_AFF4
	global	_word_AFF6
	global	__ctype_
	global	adiv
	global	amul

	psect	text

; Disassembled version OK+	;	After compiling C source code
_sub_1F4B:
	call  	ncsv		;	call 	ncsv
	defw  	-16		;	defw 	0FFF0h
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	or	a		;	or	a
	dec	hl		;	dec	hl
	jr	nz,loc_1F62	;	jp	nz,m1
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(hl),0		;	ld	(hl),0		
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
loc_1F62:			;m1:
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	push  	hl		;	push	hl
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push  	hl		;	push	hl
	call  	_sub_13D	;	call	_sub_13D
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_1F82	;	jp	nz,m3
loc_1F7C:			;m2:
	ld	hl,-1		;	ld	hl,-1
	jp	cret		;	jp	cret
loc_1F82:			;m3:
	ld	a,(ix+12)	;	ld	a,(ix+12)
	or	(ix+13)		;	or	(ix+13)
	jr	z,loc_1FDF	;	jp	z,m4
	xor	a		;	xor	a
	ld	l,a		;	ld	l,a
	ld	a,(ix+13)	;	ld	a,(ix+13)
	and	80h		;	and	128
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_1FDF	;	jp	nz,m4
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	push  	hl		;	push	hl
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	call	_sub_6589	;	call	_sub_6589
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	jr	nz,loc_1FDF	;	jp	nz,m4
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	ld	a,(hl)		;	ld	a,(hl)
	cp	45h		;	cp	69
	jr	nz,loc_1F7C	;	jp	nz,m2
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	push	hl		;	push	hl
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	add	hl,hl		;	add	hl,hl
	ld	de,_array_AAE8	;	ld	de,_array_AAE8
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_6589	;	call	_sub_6589
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	jr	z,loc_1F7C	;	jp	z,m2
loc_1FDF:			;m4:
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,0		;	ld	hl,0
	call	wrelop		;	call	wrelop
	jp	p,loc_2010	;	jp	p,m5
	ld	de,_array_A162	;	ld	de,_array_A162
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	dec	hl		;	dec	hl
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-10),c	;	ld	(ix+-10),c
	ld	(ix+-9),b	;	ld	(ix+-9),b
	ld	(_word_AFED),bc	;	ld	(_word_AFED),bc
	jr	loc_201F	;	jp	m6
loc_2010:			;m5:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	(ix+-10),l	;	ld	(ix+-10),l
	ld	(ix+-9),h	;	ld	(ix+-9),h
	ld	(_word_AFED),hl	;	ld	(_word_AFED),hl
loc_201F:			;m6:
	ld	hl,(_word_AFED)	;	ld	hl,(_word_AFED)
	bit	7,h		;	bit	7,h
	jr	z,loc_2030	;	jp	z,m7
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	ld	(_word_AFED),hl	;	ld	(_word_AFED),hl
loc_2030:			;m7:
	ld	de,0Ah		;	ld	de,10
	ld	hl,(_word_AFED)	;	ld	hl,(_word_AFED)
	call	amul		;	call	amul
	ld	de,_array_80EF	;	ld	de,_array_80EF
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(iy+2)	;	ld	a,(iy+2)
	or	a		;	or	a
	jr	z,loc_205B	;	jp	z,m8
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	call	_sub_6589	;	call	_sub_6589
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	jr	z,loc_20AF	;	jp	z,m9
loc_205B:			;m8:
	ld	b,48h		;	ld	b,72
	ld	a,(iy+3)	;	ld	a,(iy+3)
	call	brelop		;	call	brelop
	jr	nc,loc_20B9	;	jp	nc,m10
	ld	a,(iy+4)	;	ld	a,(iy+4)
	or	a		;	or	a
	jr	z,loc_20B9	;	jp	z,m10
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	l,(iy+4)	;	ld	l,(iy+4)
	push	hl		;	push	hl
	call	_sub_13D	;	call	_sub_13D
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_20AF	;	jp	z,m9
	ld	a,(iy+5)	;	ld	a,(iy+5)
	or	a		;	or	a
	jr	z,loc_20B9	;	jp	z,m10
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	l,(iy+5)	;	ld	l,(iy+5)
	push	hl		;	push	hl
	call	_sub_13D	;	call	_sub_13D
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_20B9	;	jp	nz,cret
loc_20AF:			;m9:
	bit	7,(ix+-9)	;	bit	7,(ix+-9)
	jp	z,loc_1FDF	;	jp	z,m4
	jp	loc_1F7C	;	jp	m2		 /
loc_20B9:			;m10:				<
	ld	a,(iy+0)	;	ld	a,(iy+0)	 \
	or	a		;	or	a
	jr	z,loc_20D4	;	jp	z,m11
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	call	_sub_47B2	;	call	_sub_47B2
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	jr	z,loc_20AF	;	jp	z,m9
loc_20D4:			;m11:
	ld	a,(iy+1)	;	ld	a,(iy+1)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	ld	(ix+-12),l	;	ld	(ix+-12),l
	ld	(ix+-11),h	;	ld	(ix+-11),h
	ld	(ix+-14),0	;	ld	(ix+-14),0
	ld	(ix+-13),0	;	ld	(ix+-13),0
	ld	a,(ix+12)	;	ld	a,(ix+12)
	or	(ix+13)		;	or	(ix+13)
	jr	nz,loc_2102	;	jp	nz,m12
	ld	a,(iy+3)	;	ld	a,(iy+3)
	cp	45h		;	cp	69
	jr	nz,loc_2102	;	jp	nz,m12
	ld	a,l		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	ld	(ix+12),l	;	ld	(ix+12),l
	ld	(ix+13),h	;	ld	(ix+13),h
loc_2102:			;m12:
	ld	a,(ix+12)	;	ld	a,(ix+12)
	or	(ix+13)		;	or	(ix+13)
	jp	z,loc_22DC	;	jp	z,m30
	xor	a		;	xor	a
	ld	l,a		;	ld	l,a
	ld	a,(ix+13)	;	ld	a,(ix+13)
	and	80h		;	and	128
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_213A	;	jp	z,m13
	ld	a,(ix+-12)	;	ld	a,(ix+-12)
	or	(ix+-11)	;	or	(ix+-11)
	jr	z,loc_213A	;	jp	z,m13
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	a,(ix+13)	;	ld	a,(ix+13)
	and	7Fh		;	and	127
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	call	_sub_6589	;	call	_sub_6589
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	jp	z,loc_22DC	;	jp	z,m30
loc_213A:			;m13:
	ld	l,(iy+8)	;	ld	l,(iy+8)
	ld	h,(iy+9)	;	ld	h,(iy+9)
	ld	(_word_AFEF),hl	;	ld	(_word_AFEF),hl
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	z,loc_22AA	;	jp	z,m29
	ld	a,(hl)		;	ld	a,(hl)
	cp	4Ch		;	cp	76
	jp	nz,loc_22A3	;	jp	nz,m28
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	or	a		;	or	a
	jp	nz,loc_22A0	;	jp	nz,m27
	ld	hl,19f		;	ld	hl,_array_A94A
	ld	(_word_AFEF),hl	;	ld	(_word_AFEF),hl
	jp	loc_22A0	;	jp	m27
loc_215D:			;m14:
	ld	hl,(_word_AFEF)	;	ld	hl,(_word_AFEF)
	ld	a,(hl)		;	ld	a,(hl)
	ld	(_byte_AFF3),a	;	ld	(_byte_AFF3),a
	cp	58h		;	cp	88
	jr	z,loc_217D	;	jp	z,m15
	cp	47h		;	cp	71
	jr	z,loc_217D	;	jp	z,m15
	cp	53h		;	cp	83
	jp	nz,loc_2299	;	jp	nz,m26
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	ld	a,(hl)		;	ld	a,(hl)
	cp	45h		;	cp	69
	jp	nz,loc_2299	;	jp	nz,m26
loc_217D:			;m15:
	ld	hl,(_word_AFEF)	;	ld	hl,(_word_AFEF)
	inc	hl		;	inc	hl
	ld	(_word_AFEF),hl	;	ld	(_word_AFEF),hl
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	2,(hl)		;	bit	2,(hl)
	jr	z,loc_2199	;	jp	z,m17
	ld	hl,(_word_AFEF)	;	ld	hl,(_word_AFEF)
loc_2194:			;m16:
	ld	(_word_AFF1),hl	;	ld	(_word_AFF1),hl
	jr	loc_21A2	;	jp	m19
loc_2199:			;m17:
	ld	hl,0		;	ld	hl,0
	jr	loc_2194	;	jp	m16
loc_219E:			;m18:
	inc	hl		;	inc	hl
	ld	(_word_AFEF),hl	;	ld	(_word_AFEF),hl
loc_21A2:			;m19:
	ld	b,41h		;	ld	b,65
	ld	hl,(_word_AFEF)	;	ld	hl,(_word_AFEF)
	ld	a,(hl)		;	ld	a,(hl)
	call	brelop		;	call	brelop
	ld	hl,(_word_AFEF)	;	ld	hl,(_word_AFEF)
	jp	m,loc_219E	;	jp	m,m18
	ld	a,(hl)		;	ld	a,(hl)
	cp	4Ch		;	cp	76
	jr	z,loc_21C1	;	jp	z,m20
	cp	4Eh		;	cp	78
	jr	z,loc_2206	;	jp	z,m23
	cp	52h		;	cp	82
	jr	z,loc_21F7	;	jp	z,m22
	jp	loc_22A0	;	jp	m30
loc_21C1:			;m20:
	ld	hl,(_word_AFF1)	;	ld	hl,(_word_AFF1)
	push	hl		;	push	hl
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	push	hl		;	push	hl
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	call	_sub_66BC	;	call	_sub_66BC
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-12),l	;	ld	(ix+-12),l
	ld	(ix+-11),h	;	ld	(ix+-11),h
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	nz,loc_22DC	;	jp	nz,m30
loc_21EC:			;m21:
	ld	(ix+-12),0FFh	;	ld	(ix+-12),255
	ld	(ix+-11),0FFh	;	ld	(ix+-11),255
	jp	loc_22DC	;	jp	m30
loc_21F7:			;m22:
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	ld	(ix+-14),l	;	ld	(ix+-14),l
	ld	(ix+-13),h	;	ld	(ix+-13),h
	jp	loc_22DC	;	jp	m30
loc_2206:			;m23:
	ld	a,(_byte_AFF3)	;	ld	a,(_byte_AFF3)
	cp	53h		;	cp	83
	jr	nz,loc_2250	;	jp	nz,m25
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	ld	a,(hl)		;	ld	a,(hl)
	cp	45h		;	cp	69
	jp	nz,loc_22DC	;	jp	nz,m30
	ld	hl,(_word_AFF1)	;	ld	hl,(_word_AFF1)
	push	hl		;	push	hl
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	add	hl,hl		;	add	hl,hl
	ld	de,_array_AAE8	;	ld	de,_array_AAE8
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	push	hl		;	push	hl
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
loc_2241:			;m24:
	push	hl		;	push	hl
	call	_sub_66BC	;	call	_sub_66BC
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	nz,loc_22DC	;	jp	nz,m30
	jr	loc_21EC	;	jp	m21
loc_2250:			;m25:
	ld	a,(iy+2)	;	ld	a,(iy+2)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	push	hl		;	push	hl
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	call	_sub_63B8	;	call	_sub_63B8
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	jp	nz,loc_22DC	;	jp	nz,m30
	xor	a		;	xor	a
	ld	l,a		;	ld	l,a
	ld	a,(ix+13)	;	ld	a,(ix+13)
	and	80h		;	and	128
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	z,loc_21EC	;	jp	z,m21
	ld	hl,(_word_AFF1)	;	ld	hl,(_word_AFF1)
	push	hl		;	push	hl
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	d	h,(ix+11)
	push	hl		;	push	hl
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	push	hl		;	push	hl
	ld	a,(iy+2)	;	ld	a,(iy+2)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	jr	loc_2241	;	jp	m24
loc_2299:			;m26:
	ld	hl,(_word_AFEF)	;	ld	hl,(_word_AFEF)
	inc	hl		;	inc	hl
	ld	(_word_AFEF),hl	;	ld	(_word_AFEF),hl
loc_22A0:			;m27:
	ld	hl,(_word_AFEF)	;	ld	hl,(_word_AFEF)
loc_22A3:			;m28:
	ld	a,(hl)		;	ld	a,(hl)
	or	a		;	or	a
	jp	nz,loc_215D	;	jp	nz,m14
	jr	loc_22DC	;	jp	m30
loc_22AA:			;m29:
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	push	hl		;	push	hl
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	call	_sub_66BC	;	call	_sub_66BC
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-12),l	;	ld	(ix+-12),l
	ld	(ix+-11),h	;	ld	(ix+-11),h
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_22DC	;	jp	nz,m30
	ld	(ix+-12),0FFh	;	ld	(ix+-12),255
	ld	(ix+-11),0FFh	;	ld	(ix+-11),255
loc_22DC:			;m30:
	ld	de,-1		;	ld	de,-1
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	z,loc_20AF	;	jp	z,m9
	ld	(ix+-8),0	;	ld	(ix+-8),0
	ld	(ix+-7),0	;	ld	(ix+-7),0
	ld	b,48h		;	ld	b,72
	ld	a,(iy+3)	;	ld	a,(iy+3)
	call	brelop		;	call	brelop
	jr	c,loc_2342	;	jp	c,m31
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	inc	hl		;	inc	hl
	ld	(hl),0		;	ld	(hl),0
	push	ix		;	push	ix
	pop	hl		;	pop	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	push	hl		;	push	hl
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	ld	l,(iy+3)	;	ld	l,(iy+3)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	call	_sub_1F4B	;	call	_sub_1F4B
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	bit	7,h		;	bit	7,h
	jp	z,loc_2586	;	jp	z,m42
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	inc	hl		;	inc	hl
	ld	(hl),0		;	ld	(hl),0
	jp	loc_20AF	;	jp	m9
loc_2342:			;m31:
	ld	a,(iy+4)	;	ld	a,(iy+4)
	or	a		;	or	a
	jp	z,loc_2572	;	jp	z,m41
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	inc	hl		;	inc	hl
	ld	(hl),0		;	ld	(hl),0
	push	ix		;	push	ix
	pop	hl		;	pop	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	push	hl		;	push	hl
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	ld	l,(iy+4)	;	ld	l,(iy+4)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_1F4B	;	call	_sub_1F4B
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	bit	7,h		;	bit	7,h
	jp	nz,loc_20AF	;	jp	nz,m9
	ld	a,(iy+5)	;	ld	a,(iy+5)
	or	a		;	or	a
	jp	z,loc_2586	;	jp	z,m42
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	inc	hl		;	inc	hl
	ld	(hl),0		;	ld	(hl),0
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_2B2A	;	call	_sub_2B2A
	pop	bc		;	pop	bc
	ld	(ix+-16),l	;	ld	(ix+-16),l
	ld	(ix+-15),h	;	ld	(ix+-15),h
	ld	a,(ix+-14)	;	ld	a,(ix+-14)
	or	(ix+-13)	;	or	(ix+-13)
	jp	nz,loc_2424	;	jp	nz,m36
	ld	a,(iy+2)	;	ld	a,(iy+2)
	or	a		;	or	a
	jr	z,loc_23EF	;	jp	z,m32
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	push	hl		;	push	hl
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	call	_sub_63B8	;	call	_sub_63B8
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	ld	de,_array_AAE8	;	ld	de,_array_AAE8
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-14),c	;	ld	(ix+-14),c
	ld	(ix+-13),b	;	ld	(ix+-13),b
	jr	loc_23F7	;	jp	m33
loc_23EF:			;m32:
	ld	(ix+-14),0	;	ld	(ix+-14),0
	ld	(ix+-13),0	;	ld	(ix+-13),0
loc_23F7:			;m33:
	ld	a,(ix+-16)	;	ld	a,(ix+-16)
	or	(ix+-14)	;	or	(ix+-14)
	ld	l,a		;	ld	l,a
	ld	a,(ix+-15)	;	ld	a,(ix+-15)
	or	(ix+-13)	;	or	(ix+-13)
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h	
	jr	nz,loc_240E	;	jp	nz,m34
	ld	hl,0		;	ld	hl,0
	jr	loc_241E	;	jp	m35
loc_240E:			;m34:
	ld	a,(ix+-16)	;	ld	a,(ix+-16)
	or	(ix+-14)	;	or	(ix+-14)
	ld	l,a		;	ld	l,a
	ld	a,(ix+-15)	;	ld	a,(ix+-15)
	or	(ix+-13)	;	or	(ix+-13)
	ld	h,a		;	ld	h,a
	set	7,h		;	set	7,h
loc_241E:			;m35:
	ld	(ix+-14),l	;	ld	(ix+-14),l
	ld	(ix+-13),h	;	ld	(ix+-13),h
loc_2424:			;m36:
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FFFAh	;	ld	hl,-6
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	ld	l,(ix+-14)	;	ld	l,(ix+-12)
	ld	h,(ix+-13)	;	ld	h,(ix+-11)
	push	hl		;	push	hl
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	ld	l,(iy+5)	;	ld	l,(iy+5)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_1F4B	;	call	_sub_1F4B
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	bit	7,h		;	bit	7,h
	jp	nz,loc_20AF	;	jp	nz,m9
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_2B2A	;	call	_sub_2B2A
	pop	bc		;	pop	bc
	ld	(ix+-8),l	;	ld	(ix+-8),l
	ld	(ix+-7),h	;	ld	(ix+-7),h
	ld	a,l		;	ld	a,l
	and	(ix+-16)	;	or	(ix+-16)
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	and	(ix+-15)	;	or	(ix+-15)
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	z,loc_24F7	;	jp	z,m37
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	inc	hl		;	inc	hl
	ld	(hl),0		;	ld	(hl),0
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FFFAh	;	ld	hl,-6
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	ld	l,(ix+-14)	;	ld	l,(ix+-14)
	ld	h,(ix+-13)	;	ld	h,(ix+-13)
	push	hl		;	push	hl
	ld	e,(ix+-16)	;	ld	e,(ix+-16)
	ld	d,(ix+-15)	;	ld	d,(ix+-15)
	ld	hl,-1		;	ld	hl,-1
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	ld	a,l		;	ld	a,l
	and	(ix+10)		;	and	(ix+10)
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	and	(ix+11)		;	and	(ix+11)
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	l,(iy+5)	;	ld	l,(iy+5)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_1F4B	;	call	_sub_1F4B
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	call	wrelop		;	call	wrelop
	jp	p,loc_20AF	;	jp	p,m9
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_2B2A	;	call	_sub_2B2A
	pop	bc		;	pop	bc
	ld	(ix+-8),l	;	ld	(ix+-8),l
	ld	(ix+-7),h	;	ld	(ix+-7),h
loc_24F7:			;m37:
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	0,b		;	bit	0,b
	jr	nz,loc_251E	;	jp	nz,m38
	ld	a,(ix+-8)	;	ld	a,(ix+-8)
	and	(ix+-4)		;	and	(ix+-4)
	ld	l,a		;	ld	l,a
	ld	a,(ix+-7)	;	ld	a,(ix+-7)
	and	(ix+-3)		;	and	(ix+-3)
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_2566	;	jp	z,m40
loc_251E:			;m38:
	ld	a,(ix+-16)	;	ld	a,(ix+-16)
	and	(ix+-6)		;	and	(ix+-6)
	ld	l,a		;	ld	l,a
	ld	a,(ix+-15)	;	ld	a,(ix+-15)
	and	(ix+-5)		;	and	(ix+-5)
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_255A	;	jp	z,m39
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	0,b		;	bit	0,b
	jp	nz,loc_20AF	;	jp	nz,m9
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(hl),2		;	ld	(hl),2
	ld	(ix+-8),0	;	ld	(ix+-8),0
	ld	(ix+-7),0	;	ld	(ix+-7),0
	jr	loc_2586	;	jp	m42
loc_255A:			;m39:
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(hl),1		;	ld	(hl),1
	jr	loc_2586	;	jp	m42
loc_2566:			;m40:
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	(hl),0		;	ld	(hl),0
	jr	loc_2586	;	jp	m42
loc_2572:			;m41:
	ld	a,(ix+-12)	;	ld	a,(ix+-12)
	or	(ix+-11)	;	or	(ix+-11)
	jr	z,loc_2586	;	jp	z,m42
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	ld	(ix+12),l	;	ld	(ix+12),l
	ld	(ix+13),h	;	ld	(ix+13),h
loc_2586:			;m42:
	ld	a,(iy+2)	;	ld	a,(iy+2)
	or	a		;	or	a
	jp	z,loc_2658	;	jp	z,m46
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	ld	(_word_AFF4),hl	;	ld	(_word_AFF4),hl
	bit	6,(iy+2)	;	bit	6,(iy+2)
	jr	z,loc_25C4	;	jp	z,m43
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	push	hl		;	push	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	call	_sub_2B2A	;	call	_sub_2B2A
	ex	(sp),	hl	;	ex	(sp),hl
	call	_sub_63B8	;	call	_sub_63B8
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	e,l		;	ld	e,l
	ld	h,0		;	ld	h,0
	ld	(_word_AFF6),hl	;	ld	(_word_AFF6),hl
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	nz,loc_2641	;	jp	nz,m45
loc_25C4:			;m43:
	bit	6,(iy+2)	;	bit	6,(iy+2)
	jr	nz,loc_25E9	;	jp	nz,m44
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	call	_sub_2B2A	;	call	_sub_2B2A
	pop	bc		;	pop	bc
	ex	de,hl		;	ex	de,hl
	ld	hl,-1		;	ld	hl,-1
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	ex	de,hl		;	ex	de,hl
	ld	hl,(_word_AFF4)	;	ld	hl,(_word_AFF4)
	ld	a,l		;	ld	a,l
	and	e		;	and	e
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	and	d		;	and	d
	ld	h,a		;	ld	h,a
	ld	(_word_AFF4),hl	;	ld	(_word_AFF4),hl
loc_25E9:			;m44:
	ld	e,(ix+-8)	;	ld	e,(ix+-8)
	ld	d,(ix+-7)	;	ld	d,(ix+-7)
	ld	hl,-1		;	ld	hl,-1
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	ex	de,hl		;	ex	de,hl
	ld	hl,(_word_AFF4)	;	ld	hl,(_word_AFF4)
	ld	a,l		;	ld	a,l
	and	e		;	and	e
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	and	d		;	and	d
	ld	h,a		;	ld	h,a
	ld	(_word_AFF4),hl	;	ld	(_word_AFF4),hl
	ld	a,(iy+2)	;	ld	a,(iy+2)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	push	hl		;	push	hl
	ld	hl,(_word_AFF4)	;	ld	hl,(_word_AFF4)
	push	hl		;	push	hl
	call	_sub_63B8	;	call	_sub_63B8
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	e,l		;	ld	e,l
	ld	h,0		;	ld	h,0
	ld	(_word_AFF6),hl	;	ld	(_word_AFF6),hl
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_2641	;	jp	nz,m45
	ld	a,(iy+2)	;	ld	a,(iy+2)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	hl,(_word_AFF4)	;	ld	hl,(_word_AFF4)
	push	hl		;	push	hl
	call	_sub_6589	;	call	_sub_6589
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	e,l		;	ld	e,l
	ld	h,0		;	ld	h,0
	ld	(_word_AFF6),hl	;	ld	(_word_AFF6),hl
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	z,loc_20AF	;	jp	z,m9
loc_2641:			;m45:
	ld	a,(_word_AFF6)	;	ld	a,(_word_AFF6)
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	inc	hl		;	inc	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,de		;	add	hl,de
	ld	de,9		;	ld	de,9
	add	hl,de		;	add	hl,de
	ld	(hl),a		;	ld	(hl),a
	jr	loc_266B	;	jp	m47
loc_2658:			;m46:
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	inc	hl		;	inc	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,de		;	add	hl,de
	ld	de,9		;	ld	de,9
	add	hl,de		;	add	hl,de
	ld	(hl),0		;	ld	(hl),0
loc_266B:			;m47:
	ld	de,_array_80EF	;	ld	de,_array_80EF
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	ld	de,0Ah		;	ld	de,10
	call	adiv		;	call	adiv
	ld	a,l		;	ld	a,l
	push	af		;	push	af
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	(hl)		;	inc	(hl)
	ld	l,a		;	ld	l,a
	ld	h,0		;	ld	h,0
	add	hl,de		;	add	hl,de
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	pop	af		;	pop	af
	ld	(hl),a		;	ld	(hl),a
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	push	hl		;	push	hl
	call	_sub_2B79	;	call	_sub_2B79
	pop	bc		;	pop	bc
	ld	h,0		;	ld	h,0
	ld	(_word_AFF6),hl	;	ld	(_word_AFF6),hl
	ld	a,l		;	ld	a,l
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	inc	hl		;	inc	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,de		;	add	hl,de
	ld	de,0Eh		;	ld	de,14
	add	hl,de		;	add	hl,de
	ld	(hl),a		;	ld	(hl),a
	ld	hl,(_word_AFF6)	;	ld	hl,(_word_AFF6)
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_26D9	;	jp	nz,m48
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	ld	a,(hl)		;	ld	a,(hl)
	cp	45h		;	cp	69
	jr	nz,loc_26D9	;	jp	nz,m48
	ex	de,hl		;	ex	de,hl
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl) 		;	ld	b,(hl)
	ld	(_word_AFF6),bc	;	ld	(_word_AFF6),bc
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	inc	hl		;	inc	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,de		;	add	hl,de
	ld	de,0Eh		;	ld	de,14
	add	hl,de		;	add	hl,de
	ld	(hl),c		;	ld	(hl),c
loc_26D9:			;m48:
	ld	a,(ix+12)	;	ld	a,(ix+12)
	or	(ix+13)		;	or	(ix+13)
	ld	a,(ix+12)	;	ld	a,(ix+12)
	jp	z,loc_2735	;	jp	z,m51
	xor	a		;	xor	a
	ld	l,a		;	ld	l,a
	ld	a,(ix+13)	;	ld	a,(ix+13)
	and	80h		;	and	128
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_2735	;	jp	nz,m51
	ld	hl,(_word_AFF6)	;	ld	hl,(_word_AFF6)
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	z,loc_27C6	;	jp	z,m58
	push  	hl		;	push	hl
	xor	a		;	xor	a
	ld	l,a		;	ld	l,a
	ld	a,(ix+13)	;	ld	a,(ix+13)
	and	80h		;	and	128
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_2717	;	jp	nz,m49
	ld	de,_array_AAE8	;	ld	de,_array_AAE8
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	jr	loc_2723	;	jp	m50
loc_2717:			;m49:
	ld	e,(ix+12)	;	ld	e,(ix+12)
	ld	d,(ix+13)	;	ld	d,(ix+13)
	ld	hl,-1		;	ld	hl,-1
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
loc_2723:			;m50:
	push	hl		;	push	hl
	call	_sub_6589	;	call	_sub_6589
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	h,0		;	ld	h,0
	ld	de,(_word_AFF6)	;	ld	de,(_word_AFF6)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_27C6	;	jp	nz,m58
loc_2735:			;m51:
	xor	a		;	xor	a
	ld	l,a		;	ld	l,a
	ld	a,(ix+13)	;	ld	a,(ix+13)
	and	80h		;	and	128
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	z,loc_27D1	;	jp	z,m59
	ld	hl,(_word_AFF6)	;	ld	hl,(_word_AFF6)
	xor	a		;	xor	a
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	and	80h		;	and	128
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_275D	;	jp	nz,m52
	ld	de,_array_AAE8	;	ld	de,_array_AAE8
	ld	hl,(_word_AFF6)	;	ld	hl,(_word_AFF6)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	jr	loc_2767	;	jp	m53
loc_275D:			;m52:
	ld	de,(_word_AFF6)	;	ld	de,(_word_AFF6)
	ld	hl,-1		;	ld	hl,-1
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
loc_2767:			;m53:
	ex	de,hl		;	ex	de,hl
	push	de		;	push	de
	ld	hl,(_word_AFF6)	;	ld	hl,(_word_AFF6)
	xor	a		;	xor	a
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	and	80h		;	and	128
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_2784	;	jp	nz,m54
	ld	de,_array_AAE8	;	ld	de,_array_AAE8
	ld	hl,(_word_AFF6)	;	ld	hl,(_word_AFF6)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	jr	loc_278E	;	jp	m55
loc_2784:			;m54:
	ld	de,(_word_AFF6)	;	ld	de,(_word_AFF6)
	ld	hl,-1		;	ld	hl,-1
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
loc_278E:			;m55:
	ex	de,hl		;	ex	de,hl
	push	de		;	push	de
	xor	a		;	xor	a
	ld	l,a		;	ld	l,a
	ld	a,(ix+13)	;	ld	a,(ix+13)
	and	80h		;	and	128
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_27AD	;	jp	nz,m56
	ld	de,_array_AAE8	;	ld	de,_array_AAE8
	ld	l,(ix+12)	;	ld	l,(ix+12)
	ld	h,(ix+13)	;	ld	h,(ix+13)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	jr	loc_27B9	;	jp	m57
loc_27AD:			;m56:
	ld	e,(ix+12)	;	ld	e,(ix+12)
	ld	d,(ix+13)	;	ld	d,(ix+13)
	ld	hl,-1		;	ld	hl,-1
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
loc_27B9:			;m57:
	pop	de		;	pop	de
	ld	a,l		;	ld	a,l
	and	e		;	and	e
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	and	d		;	and	d
	ld	h,a		;	ld	h,a
	pop	de		;	pop	de
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_27D1	;	jp	z,m59
loc_27C6:			;m58:
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	inc	hl		;	inc	hl
	dec	(hl)		;	dec	(hl)
	jp	loc_20AF	;	jp	m9
loc_27D1:			;m59:
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	inc	hl		;	inc	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,de		;	add	hl,de
	ld	de,8		;	ld	de,8
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	ld	de,_array_AAE8	;	ld	de,_array_AAE8
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl	
	ld	b,(hl)		;	ld	b,(hl)
	ld	l,(ix+14)	;	ld	l,(ix+14)
	ld	h,(ix+15)	;	ld	h,(ix+15)
	ld	(hl),c		;	ld	(hl),c
	inc	hl		;	inc	hl
	ld	(hl),b		;	ld	(hl),b
	ld	b,48h		;	ld	b,72
	ld	a,(iy+3)	;	ld	a,(iy+3)
	call	brelop		;	call	brelop
	jr	nc,loc_2806	;	jp	nc,m60
	ld	a,(iy+4)	;	ld	a,(iy+4)
	or	a		;	or	a
	jr	z,loc_281C	;	jp	z,m61
loc_2806:			;m60:
	ld	l,(ix+14)	;	ld	l,(ix+14)
	ld	h,(ix+15)	;	ld	h,(ix+15)
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	or	(ix+-4)		;	or	(ix+-4)
	ld	c,a		;	ld	c,a
	ld	a,b		;	ld	a,b
	or	(ix+-3)		;	or	(ix+-3)
	ld	b,a		;	ld	b,a
	ld	(hl),b		;	ld	(hl),b
	dec	hl		;	dec	hl
	ld	(hl),c		;	ld	(hl),c
loc_281C:			;m61:
	ld	a,(iy+5)	;	ld	a,(iy+5)
	or	a		;	or	a
	jr	z,loc_2838	;	jp	z,m62
	ld	l,(ix+14)	;	ld	l,(ix+14)
	ld	h,(ix+15)	;	ld	h,(ix+15)
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	or	(ix+-6)		;	or	(ix+-6)
	ld	c,a		;	ld	c,a
	ld	a,b		;	ld	a,b
	or	(ix+-5)		;	or	(ix+-5)
	ld	b,a		;	ld	b,a
	ld	(hl),b		;	ld	(hl),b
	dec	hl		;	dec	hl
	ld	(hl),c		;	ld	(hl),c
loc_2838:			;m62:
	ld	hl,1		;	ld	hl,1
	jp	cret		;	jp	cret

	psect	data

p_1f4b_A94A:	; "GL"
19:	defb	71,76,0

	psect	text

; End of function sub_1F4B

; End of file 1F4B.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 283E.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_283E OK
;
; Restored source code did not allow optimizer to reduce
; number of sub_2B2A function calls to one.
;
; The switch statement, in comparison with if, more clearly
; reflects the structure of the program, however, fragments
; of the generated assembler code are arranged in an order
; different from the original.
;=========================================================
	global	_sub_283E	;	global	_sub_283E
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_array_80EF	;	global	_array_80EF
	global	amul		;	global	amul
	global	_word_B017	;	global	_word_B017
	global	__ctype_	;	global	__ctype_
	global	wrelop		;	global	wrelop
	global	_array_AB24	;	global	_array_AB24
	global	_array_AAE8	;	global	_array_AAE8
	global	_byte_AFFA	;	global	_byte_AFFA
	global	_sub_2B2A	;	global	_sub_2B2A
	global	wrelop		;	global	wrelop

	psect	text

_sub_283E:
;	Disassembled version	; After compiling C source code
	call	ncsv		;	call 	ncsv
	defw	-13		;	defw 	-13
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	push	hl		;	push	hl
	pop	de		;	pop	de
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	add	hl,de		;	add	hl,de
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	ld	de,0Ah		;	ld	de,10
	call	amul		;	call	amul
	ld	de,_array_80EF	;	ld	de,_array_80EF
	add	hl,de		;	add	hl,de
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	(ix+-13),0	;	ld	(ix+-13),0
	ld	(ix+-12),0	;	ld	(ix+-12),0
	ex	de,hl		;	ex	de,hl
	ld	hl,8		;	ld	hl,8
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-2),c	;	ld	(ix+-2),c
	ld	(ix+-1),b	;	ld	(ix+-1),b
loc_2881:			;l12:				; m1:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	a,(hl)		;	ld	a,(hl)
loc_2888:			;L5:				; m2:
	or	a		;	or	a
	jr	nz,loc_289C	;	jp	nz,l15
	ld	de,(_word_B017)	;	ld	de,(_word_B017)
	ld	a,(ix+-13)	;	ld	a,(ix+-13)
	and	e		;	and	e
	ld	l,a		;	ld	l,a
	ld	a,(ix+-12)	;	ld	a,(ix+-12)
	and	d		;	and	d
	ld	h,a		;	ld	h,a
	jp	cret		;	jp	cret
loc_289C:			;l15:				; m3:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	(ix+-9),a	;	ld	(ix+-9),a
	cp	41h		;	cp	65 ;'A'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	42h		;	cp	66 ;'B'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	43h		;	cp	67 ;'C'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	44h		;	cp	68 ;'D'	
	jr	z,loc_2881	;	jp	z,l12	
	cp	46h		;	cp	70 ;'F'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	47h		;	cp	71 ;'G'	
	jp	z,loc_2911	;	jp	z,l39	
	cp	4Ch		;	cp	76 ;'L'	
	jp	z,loc_2AE1	;	jp	z,l60	
	cp	4Dh		;	cp	77 ;'M'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	4Fh		;	cp	79 ;'O'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	50h		;	cp	80 ;'P'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	51h		;	cp	81 ;'Q'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	52h		;	cp	82 ;'R'	
	jp	z,loc_2B22	;	jp	z,l61	
	cp	53h		;	cp	83 ;'S'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	54h		;	cp	84 ;'T'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	55h		;	cp	85 ;'U'	
	jr	z,loc_2881	;	jp	z,l12	
	cp	56h		;	cp	86 ;'V'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	57h		;	cp	87 ;'W'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	58h		;	cp	88 ;'X'	
	jr	z,loc_2911	;	jp	z,l39	
	cp	5Ah		;	cp	90 ;'Z'	
	jp	z,loc_2A9C	;	jp	z,l29	
	cp	7Eh		;	cp	126;'~'	
	jp	z,loc_2AC8	;	jp	z,l63	
	jp	loc_2881	;	jp	l12	
loc_2911:			;l39:				; m4:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	2,(hl)		;	bit	2,(hl)
	jr	z,loc_2954	;	jp	z,l40
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	(ix+-8),l	;	ld	(ix+-8),l
	ld	(ix+-7),h	;	ld	(ix+-7),h
	jr	loc_293F	;	jp	l41
loc_2932:			;l42:				; m5:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
loc_293F:			;l41:				; m6:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	2,(hl)		;	bit	2,(hl)
	jr	nz,loc_2932	;	jp	nz,l42
	jr	loc_295C	;	jp	l46
loc_2954:			;l40:				; m7:
	ld	(ix+-8),0	;	ld	(ix+-8),0
	ld	(ix+-7),0	;	ld	(ix+-7),0
loc_295C:			;l46:				; m8:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	cp	4Ch		;	cp	76
	jp	z,loc_29AF	;	jp	z,l47
	cp	4Eh		;	cp	78
	jr	z,loc_2998	;	jp	z,l49
	cp	52h		;	cp	126
	jp	z,loc_29E8	;	jp	z,l50
loc_2978:			;l45:				; m9:
	ld	a,(ix+-9)	;	ld	a,(ix+-9)
	cp	53h		;	cp	83
	jp	nz,loc_29F7	;	jp	nz,l51
	ld	l,(ix+-6)	;	ld	l,(ix+-6)
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	ld	a,(hl)		;	ld	a,(hl)
	cp	45h		;	cp	69
	jp	nz,loc_29F0	;	jp	nz,l52
	ex	de,hl		;	ex	de,hl
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	(ix+-9),l	;	ld	(ix+-9),l
	jp	loc_2A63	;	jp	l54
loc_2998:			;l49:				; m10:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	(ix+-11),l	;	ld	(ix+-11),l
	ld	(ix+-10),h	;	ld	(ix+-10),h
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	jr	loc_2978	;	jp	l45
loc_29AF:			;l47:				; m11:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	hl,0		;	ld	hl,0
	call	wrelop		;	call	wrelop
	jp	p,loc_29D6	;	jp	p,l48
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
loc_29CD:			;L9:				; m12:
	dec	hl		;	dec	hl
	ld	(ix+-11),l	;	ld	(ix+-11),l
	ld	(ix+-10),h	;	ld	(ix+-10),h
	jr	loc_2978	;	jp	l45
loc_29D6:			;l48:				; m13:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
loc_29DC:			;L10:				; m14:
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	inc	hl		;	inc	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	jr	loc_29CD	;	jp	L9
loc_29E8:			;l50:				; m15:
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	jr	loc_29DC	;	jp	L10
loc_29F0:			;l52:				; m16:
	ld	(ix+-9),0	;	ld	(ix+-9),0
	jp	loc_2A63	;	jp	l54
loc_29F7:			;l51:				; m17:
	ld	a,(ix+-9)	;	ld	a,(ix+-9)
	cp	47h		;	cp	71
	ld	e,(ix+-11)	;	ld	e,(ix+-11)
	ld	d,(ix+-10)	;	ld	d,(ix+-10)
	ld	l,(ix+-6)	;	ld	l,(ix+-6)
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	jr	z,loc_2A14	;	jp	z,L7
	add	hl,de		;	add	hl,de
	ld	de,9		;	ld	de,9
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	jr	loc_2A1C	;	jp	L3
loc_2A14:			;L7:				; m18:
	add	hl,de		;	add	hl,de
	ld	de,0Fh		;	ld	de,15
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
loc_2A1C:			;L3:				; m19:
	ld	(ix+-9),l	;	ld	(ix+-9),l
	ld	a,(ix+-8)	;	ld	a,(ix+-8)
	or	(ix+-7)		;	or	(ix+-7)
	jp	z,loc_2A63	;	jp	z,l54
	jr	loc_2A50	;	jp	l56
loc_2A2A:			;l57:				; m20:
	ld	l,(ix+-8)	;	ld	l,(ix+-8)
	ld	h,(ix+-7)	;	ld	h,(ix+-7)
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	(ix+-8),l	;	ld	(ix+-8),l
	ld	(ix+-7),h	;	ld	(ix+-7),h
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,0FFD0h	;	ld	hl,-48
	add	hl,de		;	add	hl,de
	ex	de,hl		;	ex	de,hl
	ld	l,(ix+-9)	;	ld	l,(ix+-9)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,_array_AB24	;	ld	de,_array_AB24
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	(ix+-9),l	;	ld	(ix+-9),l
loc_2A50:			;l56:				; m21:
	ld	l,(ix+-8)	;	ld	l,(ix+8)
	ld	h,(ix+-7)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	2,(hl)		;	bit	2,(hl)
	jr	nz,loc_2A2A	;	jp	nz,l57
loc_2A63:			;l54:				; m22:
	ld	de,_array_AAE8	;	ld	de,_array_AAE8
	ld	l,(ix+-9)	;	ld	l,(ix+-9)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	l,(ix+-13)	;	ld	l,(ix+-13)
	ld	h,(ix+-12)	;	ld	h,(ix+-12)
	ld	a,l		;	ld	a,l
	or	c		;	or	c
	ld	l,a		;	ld	l,a
	ld	a,h		;	ld	a,h
	or	b		;	or	b
	ld	h,a		;	ld	h,a
	ld	(ix+-13),l	;	ld	(ix+-13),l
	ld	(ix+-12),h	;	ld	(ix+-12),h
	ld	a,(ix+-9)	;	ld	a,(ix+-9)
	or	a		;	or	a
	jp	z,loc_2881	;	jp	z,l12
	ld	(_byte_AFFA),a	;	ld	(_byte_AFFA),a
	jp	loc_2881	;	jp	l12
loc_2A8F:			;l31:				; m23:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
loc_2A9C:			;l29:				; m24:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	a,(hl)		;	ld	a,(hl)
	or	a		;	or	a
	ld	a,(hl)		;	ld	a,(hl)
	jp	z,loc_2888	;	jp	z,L5
	cp	4Eh		;	cp	78 		; 'N'
	ld	a,(hl)		;	ld	a,(hl)
	jp	z,loc_2888	;	jp	z,L5
	cp	4Ch		;	cp	76 		; 'L'
	ld	a,(hl)		;	ld	a,(hl)
	jp	z,loc_2888	;	jp	z,L5
	cp	52h		;	cp	82 		; 'R'
	jr	nz,loc_2A8F	;	jp	nz,l31
	jp	loc_2881	;	jp	l12
loc_2ABB:			;l65:				; m25: 'R'
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
loc_2AC8:			;l63:				; m26: '~'
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	a,(hl)		;	ld	a,(hl)
	or	a		;	or	a
	ld	a,(hl)		;	ld	a,(hl)
	jp	z,loc_2888	;	jp	z,L5
	cp	4Ch		;	cp	76
	ld	a,(hl)		;	ld	a,(hl)
	jp	z,loc_2888	;	jp	z,L5
	cp	52h		;	cp	82
	jr	nz,loc_2ABB	;	jp	nz,l65
	jp	loc_2881	;	jp	l12		; goto m1;
loc_2AE1:			;l60:				; m27: 'L'
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	hl,0		;	ld	hl,0
	call	wrelop		;	call	wrelop
	jp	p,loc_2B15 ;--+	;	jp	p,L2	;-------+
	ld	l,(ix+8)      ;	;	ld	l,(ix+8)	;
	ld	h,(ix+9)      ;	;	ld	h,(ix+9)	;
	dec	hl	      ;	;	dec	hl		;
	push	hl	      ;	;	push	hl		;
	push	iy	      ;	;	push	iy		;
	call	_sub_283E     ;	;	call	_sub_283E	;
	pop	bc	      ;	;	pop	bc		;
	pop	bc	      ;	;	pop	bc		;
			      ;	;	jp	L1     ;----+	;
			      ;	;L2:		;<----------;---+
			      ;	;	ld	l,(iy+25)   ;
			      ;	;	ld	h,(iy+26)   ;
			      ;	;	push	hl	    ;
			      ;	;	call	_sub_2B2A   ;
			      ; ;	pop	bc	    ;
loc_2AFF:	;<---------+  ;	;L1:		       ;<---+	; m28:
	ex	de,hl	   ;  ;	;	ex	de,hl
			   ;  ; ;L8:		       ;<---+
	ld	l,(ix+-13) ;  ;	;	ld	l,(ix+-13)  ;
	ld	h,(ix+-12) ;  ;	;	ld	h,(ix+-12)  ;
	ld	a,l	   ;  ;	;	ld	a,l	    ;
	or	e	   ;  ;	;	or	e	    ;
	ld	l,a	   ;  ;	;	ld	l,a	    ;
	ld	a,h	   ;  ;	;	ld	a,h	    ;
	or	d	   ;  ;	;	or	d	    ;
	ld	h,a	   ;  ;	;	ld	h,a	    ;
	ld	(ix+-13),l ;  ;	;	ld	(ix+-13),l  ;
	ld	(ix+-12),h ;  ;	;	ld	(ix+-12),h  ;
	jp	loc_2881   ;  ;	;	jp	l12	    ;	; goto m1;
			   ;  ; ;			    ;
loc_2B15:		;<-)--+	;			    ;
	ld	l,(iy+19h) ;	;			    ;
	ld	h,(iy+1Ah) ;	;			    ;
loc_2B1B:		;<-)--+	;			    ;
	push	hl	   ;  ;	;			    ;
	call	_sub_2B2A  ;  ;	;			    ;
	pop	bc	   ;  ;	;			    ;
	jr	loc_2AFF ;-+  ;	;			    ;
			      ;	;			    ;			    ;
loc_2B22:		      ;	;l61:			    ;	; m31 'R;
	ld	l,(iy+1Bh)    ;	;	ld	l,(iy+27)   ;
	ld	h,(iy+1Ch)    ;	;	ld	h,(iy+28)   ;
	jr	loc_2B1B  ;---+	;	push	hl	    ;
				;	call	_sub_2B2A   ;
				;	pop	bc	    ;
				;	ex	de,hl	    ;
				;	jp	L8	;---+


; End of function sub_283E

; End of file 283E.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 2B2A.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_2B2A OK+
;
; Generated code has insignificant differences. Source code
; was probably compiled by a previous version of compiler.
;=========================================================
	global	_sub_2B2A	;	global	_sub_2B2A
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_dopetab	;	global	_dopetab
	global	_sub_283E	;	global	_sub_283E
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code	
_sub_2B2A:
	call	csv		;	call 	csv		
	ld	l,(ix+6)	;	ld	l,(ix+6)	
	ld	h,(ix+7)	;	ld	h,(ix+7)	
	push	hl		;	push	hl		
	pop	iy		;	pop	iy		
	ld	a,(iy+1)	;	ld	a,(iy+1)	
	or	a		;	or	a		
	jr	nz,loc_2B67	;	jp	nz,l12		
	ld	de,_dopetab	;	ld	de,_dopetab	
	ld	l,(iy+0)	;	ld	l,(iy+0)	
	ld	h,0		;	ld	h,0		
	add	hl,hl		;	add	hl,hl		
	add	hl,de		;	add	hl,de		
	ld	c,(hl)		;	ld	c,(hl)		
	inc	hl		;	inc	hl		
	ld	b,(hl)		;	ld	b,(hl)		
	ld	a,c		;	ld	a,c		
	and	0Ch		;	and	12		
	ld	l,a		;	ld	l,a		
	xor	a		;	xor	a		
	ld	h,a		;	ld	h,a		
	ld	a,l		;	ld	a,l		
	or	h		;	or	h		
	jr	nz,loc_2B59	;	jp	nz,l13		
	ld	hl,0		;	ld	hl,0		
	jp	cret		;	jp	cret		
loc_2B59:			;l13:				
	ld	l,(iy+19h)	;	ld	l,(iy+25)	
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)	
	push	hl		;	push	hl		
	call	_sub_2B2A	;	call	_sub_2B2A	
loc_2B63:			;L1:				
	pop	bc		;	pop	bc		
	jp	cret		;	jp	cret		
loc_2B67:			;l12:				
	ld	e,(iy+1) 	;			   <----+ Compiler generates    
	ld	d,0		;	ld	l,(iy+1)	; correct code, but 
	ld	hl,-1		;	ld	h,0		; different from
	add	hl,de		;	dec	hl	   <----+ original
	push	hl		;	push	hl		
	push	iy		;	push	iy		
	call	_sub_283E	;	call	_sub_283E	
	pop	bc		;	pop	bc		
	jr	loc_2B63	;	jp	L1		


; End of function sub_2B2A OK+

; End of file 2B2A.as




*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated with original code

; File - 2B79.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_2B79 OK++
;=========================================================
	global	_sub_2B79	;	global	_sub_2B79
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_byte_AFFA	;	global	_byte_AFFA
	global	_sub_2B2A	;	global	_sub_2B2A
	global	_sub_6589	;	global	_sub_6589
	global 	csv		;	global 	csv

	psect	text

; After compiling C source code	;	Disassembled version
_sub_2B79:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	push	hl		;	push	hl
	pop	de		;	pop	de
	ld	l,(iy+1)	;	ld	l,(iy+1)
	ld	h,0		;	ld	h,0
	add	hl,de		;	add	hl,de
	ld	de,8		;	ld	de,8
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	(ix+-1),l	;	ld	(ix+-1),l
	xor	a		;	xor	a
	ld	(_byte_AFFA),a	;	ld	(_byte_AFFA),a
	push	iy		;	push	iy
	call	_sub_2B2A	;	call	_sub_2B2A
	pop	bc		;	pop	bc
	ld	(ix+-3),l	;	ld	(ix+-3),l
	ld	(ix+-2),h	;	ld	(ix+-2),h
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	or	a		;	or	a
	jr	z,loc_2BC9	;	jp	z,l12
	ld	l,a		;	ld	l,a
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	l,(ix+-3)	;	ld	l,(ix+-3)
	ld	h,(ix+-2)	;	ld	h,(ix+-2)
	push	hl		;	push	hl
	call	_sub_6589	;	call	_sub_6589
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a, l		;	ld	a,l
	cp	(ix+-1)		;	cp	(ix+-1)
	jr	nz,loc_2BC9	;	jp	nz,l12
	ld	l,(ix+-1)	;	ld	l,(ix+-1)
	jp	cret		;	jp	cret
loc_2BC9:			;l12:
	ld	a,(_byte_AFFA)	;	ld	a,(_byte_AFFA)
	ld	l,a		;	ld	l,a
	jp	cret		;	jp	cret

; End of function sub_2B79 OK++

;=========================================================
; sub_2BD0 OK++
;=========================================================
	global	_sub_2BD0		;global	_sub_2BD0
	global	_sub_1F4B		;global	_sub_1F4B
	global	_word_B017		;global	_word_B017
	global	wrelop			;global	wrelop
	global	_faterror		;global	_faterror
	global	_sub_35E6		;global	_sub_35E6
	global	_sub_B96		;global	_sub_B96
	global	_array_AEDB		;global	_array_AEDB
	global	_lvlidx			;global	_lvlidx
	global	_sub_1EDF		;global	_sub_1EDF
	global	_sub_475C		;global	_sub_475C
	global csv			;

; After compiling C source code	;	Disassembled version
_sub_2BD0:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	(iy+1),0	;	ld	(iy+1),0
	push	ix		;	push	ix
	pop	hl		;	pop	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	push	hl		;	push	hl
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	ld	hl,(_word_B017)	;	ld	hl,(_word_B017)
	push	hl		;	push	hl
	ld	hl,48h		;	ld	hl,72
	push	hl		;	push	hl
	push	iy		;	push	iy
	call	_sub_1F4B	;	call	_sub_1F4B
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	call	wrelop		;	call	wrelop
	jp	m,loc_2C0F	;	jp	m,l15
	ld	hl,19f		;	ld	hl,19f
	push	hl		;	push	hl
	call	_faterror	;	call	_faterror
	pop	bc		;	pop	bc
loc_2C0F:			;l15:
	push	iy		;	push	iy
	call	_sub_35E6	;	call	_sub_35E6
	pop	bc		;	pop	bc
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	1Ah		;	cp	26
	jp	nz,loc_2C56	;	jp	nz,l16
	bit	1,(iy+15h)	;	bit	1,(iy+21)
	jr	z,loc_2C3D	;	jp	z,l17
	ld	de,_array_AEDB	;	ld	de,_array_AEDB
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	hl,11h		;	ld	hl,17
	add	hl,bc		;	add	hl,bc
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_B96	;	call	_sub_B96
	pop	bc		;	pop	bc
	call	_sub_1EDF	;	call	_sub_1EDF
loc_2C3D:			;l17:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	a,(hl)		;	ld	a,(hl)
	cp	42h		;	cp	66
	jr	nz,loc_2C56	;	jp	nz,l16
	ex	de,hl		;	ex	de,hl
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	set	0,(hl)		;	set	0,(hl)
loc_2C56:			;l16:
	push	iy		;	push	iy
	call	_sub_475C	;	call	_sub_475C
	jp	cret		;	jp	cret

; End of function sub_2BD0 OK++

	psect	data

p_2bd0_1:
; 		"Expression too complicated"
19:	defb	69,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99
	defb	111,109,112,108,105,99,97,116,101,100,0

	psect	text

; End of file 2B79.as



*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 2C5E.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_2C5E OK+
;
; From source in C, compiler generates code that performs
; expected action, but differs from original image
;=========================================================
	global	_sub_2C5E	;	global	_sub_2C5E
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_nodesize	;	global	_nodesize
	global	brelop		;	global	brelop
	global	allsh		;	global	allsh
	global	aland		;	global	aland
	global	allsh		;	global	allsh
	global	alsub		;	global	alsub
	global	asalor		;	global	asalor
	global 	csv		;	global 	csv

	psect	text

;	Disassembled version	; After compiling C source code	
_sub_2C5E:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	add	hl,hl		;	add	hl,hl
	add	hl,hl		;	add	hl,hl
	add	hl,hl		;	add	hl,hl
	ld	a,l		;	ld	a,l
	ld	(ix+-1),a	;	ld	(ix+-1),a
	ld	b,32		;	ld	b,32
	call	brelop		;	call	brelop
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	jp	p,cret		;	jp	p,cret
	push	hl		;	push	hl
	push	de		;	push	de
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	add	a,255		;	add	a,255
	ld	b,a		;	ld	b,a
	ld	de,1		;	ld	de,1
	ld	hl,0		;	ld	hl,0
	call	allsh		;	call	allsh
	call	aland		;	call	aland
	ld	a,e		;	ld	a,e
	or	d		;	or	d
	or	l		;	or	l
	or	h		;	or	h
	jr	z,loc_2CD1	;	jp	z,l13
	ld	b,(ix+-1)	;	ld	b,(ix+-1)
	ld	de,1		;	ld	de,1
	ld	hl,0		;	ld	hl,0
	call	allsh		;	call	allsh
	ex	de,hl		;	ex	de,hl
	ld	bc,-1		;	ld	bc,-1
	add	hl,bc		;	add	hl,bc
	ex	de,hl		;	ex	de,hl
	adc	hl,bc		;	adc	hl,bc
	push	hl		;	push	hl
	push	de		;	push	de
	ld	l,c		;	ld	e,c	   <----+ At this point,
	ld	h,b		;	ld	d,b		; from source
	pop	bc		;	ld	l,c		; in C, compiler
	or	a		;	ld	h,b		; generates code
	sbc	hl,bc		;	call	alsub		; that performs
	pop	bc		;				; expected
	ex	de,hl		;				; action, but
	ld	hl,-1		;				; differs from 
	sbc	hl,bc		;			   <----+ original image
	push	hl		;	push	hl
	push	de		;	push	de
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,8		;	ld	hl,8
	add	hl,de		;	add	hl,de
	call	asalor		;	call	asalor
loc_2CD1:			;l13:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+10)	;	ld	l,(ix+10)
	ld	h,(ix+11)	;	ld	h,(ix+11)
	jp	cret		;	jp	cret

; End of function sub_2C5E OK+

; End of file 2C5E.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 2CE0.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_2CE0 OK++
;=========================================================
	global	_sub_2CE0	;	global	_sub_2CE0
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_printf		;	global	_printf
	global	_sub_2C5E	;	global	_sub_2C5E
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code	
_sub_2CE0:
	call 	csv		;	call 	csv		
	ld	e,(ix+8)	;	ld	e,(ix+8)	
	ld	d,(ix+9)	;	ld	d,(ix+9)	
	ld	l,(ix+10)	;	ld	l,(ix+0Ah)	
	ld	h,(ix+11)	;	ld	h,(ix+0Bh)	
	push	hl		;	push	hl		
	push	de		;	push	de		
	ld	l,(ix+6)	;	ld	l,(ix+6)	
	ld	h,(ix+7)	;	ld	h,(ix+7)	
	push	hl		;	push	hl		
	call	_sub_2C5E	;	call	_sub_2C5E	
	pop	bc		;	pop	bc		
	pop	bc		;	pop	bc		
	ex	(sp),hl		;	ex	(sp),hl		
	push	de		;	push	de		
	ld	hl,19f		;	ld	hl,19f		
	push	hl		;	push	hl		
	call	_printf		;	call	_printf		
	jp	cret		;	jp	cret		

; End of function sub_2CE0 OK++

	psect	data

p_2ce0_1:
19:
	defb	37,108,100,0

	psect	text

; End of file 2CE0.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 2D09.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_2D09 OK
;=========================================================
	global	_sub_2D09	;	global	_sub_2D09
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_putchar	;	global	_putchar
	global	__ctype_	;	global	__ctype_
	global	_atoi		;	global	_atoi
	global	wrelop		;	global	wrelop
	global	_array_80EF	;	global	_array_80EF
	global	amul		;	global	amul
	global	_sub_153A	;	global	_sub_153A
	global	_sub_387A	;	global	_sub_387A
	global	_word_AFF8	;	global	_word_AFF8
	global	lladd		;	global	lladd
	global	_printf		;	global	_printf
	global	_sub_46F7	;	global	_sub_46F7
				;	global	llsub
	global	_array_AB24	;	global	_array_AB24
	global	_off_AACA	;	global	_off_AACA
	global	_array_805F	;	global	_array_805F
	global	_sub_2CE0	;	global	_sub_2CE0
	global	aslladd		;	global	aslladd
	global	_sub_14F3	;	global	_sub_14F3
	global	_nodesize	;	global	_nodesize
	global	shal		;	global	shal		
	global	aslland		;	global	aslland
	global	alrsh		;	global	alrsh
	global	_word_AFFB	;	global	_word_AFFB
	global	_dopetab	;	global	_dopetab

	psect	text

; Disassembled version		; After compiling C source code	
_sub_2D09:
	call	ncsv		;	call 	ncsv
	defw	-25		;	defw 	-25
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	(ix+-20),l	;	ld	(ix+-20),l
	ld	(ix+-19),h	;	ld	(ix+-19),h
	ld	a,0		;	ld	a,0
	ld	(ix+-25),a	;	ld	(ix+-25),a
	ld	(ix+-18),a	;	ld	(ix+-18),a
loc_2D2B:			;l12:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
	ld	(ix+-10),a	;	ld	(ix+-10),a
	or	a		;	or	a
	jp	z,cret		;	jp	z,cret
	cp	0Ah ;	'\n'	;	cp	10
	jp	z, loc_2DDC	;	jp	z,l17
	cp	0Dh		;	cp	13
	jp	z, loc_2DDC	;	jp	z,l17
	cp	20h ;	' '	;	cp	32
	jp	z, loc_2DC7	;	jp	z,l18
	cp	3Bh ;	';'	;	cp	59
	jp	z, cret		;	jp	z,cret
	cp	41h ;	'A'	;	cp	65
	jp	z, loc_2EA8	;	jp	z,l35
	cp	42h ;	'B'	;	cp	66
	jp	z, loc_2EA8	;	jp	z,l35
	cp	43h ;	'C'	;	cp	67
	jp	z, loc_2EA8	;	jp	z,l35
	cp	44h ;	'D'	;	cp	68
	jp	z, loc_2FBC	;	jp	z,l60
	cp	46h ;	'F'	;	cp	70
	jp	z, loc_2EA8	;	jp	z,l35
	cp	47h ;	'G'	;	cp	71
	jp	z, loc_2DEB	;	jp	z,l51
	cp	4Ch ;	'L'	;	cp	76
	jp	z, loc_2FA3	;	jp	z,l59
	cp	4Dh ;	'M'	;	cp	77
	jp	z, loc_2EA8	;	jp	z,l35
	cp	4Fh ;	'O'	;	cp	79
	jp	z, loc_2EA8	;	jp	z,l35
	cp	50h ;	'P'	;	cp	80
	jp	z, loc_2EA8	;	jp	z,l35
	cp	51h ;	'Q'	;	cp	81
	jp	z, loc_2EA8	;	jp	z,l35
	cp	52h ;	'R'	;	cp	82
	jp	z, loc_2FA3	;	jp	z,l59
	cp	53h ;	'S'	;	cp	83
	jp	z, loc_2EA8	;	jp	z,l35
	cp	54h ;	'T'	;	cp	84
	jp	z, loc_2EA8	;	jp	z,l35
	cp	55h ;	'U'	;	cp	85
	jp	z, loc_2FA3	;	jp	z,l59
	cp	56h ;	'V'	;	cp	86
	jp	z, loc_2EA8	;	jp	z,l35
	cp	57h ;	'W'	;	cp	87
	jp	z, loc_2EA8	;	jp	z,l35
	cp	58h ;	'X'	;	cp	88
	jp	z, loc_2DEB	;	jp	z,l51
	cp	5Ah ;	'Z'	;	cp	90
	jp	z, loc_2EA8	;	jp	z,l35
	cp	7Eh ;	'~'	;	cp	126
	jp	z, loc_2EA8	;	jp	z,l35
loc_2DB8:			;L19:
	ld	a,(ix+-10)	;	ld	a,(ix+-10)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	call	_putchar	;	call	_putchar
loc_2DC3:			;L38:
	pop	bc		;	pop	bc
	jp	loc_2D2B	;	jp	l12
;
;	case ' ':
;
loc_2DC7:			;l18:
	ld	a,(ix+-25)	;	ld	a,(ix+-25)
	or	a		;	or	a
	jr	nz,loc_2DB8	;	jp	nz,L18
	ld	hl,9		;	ld	hl,9
	push	hl		;	push	hl
	call	_putchar	;	call	_putchar
	pop	bc		;	pop	bc
	ld	(ix+-25),1	;	ld	(ix+-25),1
	jp	loc_2D2B	;	jp	l12
;
;	case '\n': 0d:
;
loc_2DDC:			;l17:
	ld	hl,0Ah		;	ld	hl,10
	push	hl		;	push	hl
	call	_putchar	;	call	_putchar
	pop	bc		;	pop	bc
	ld	(ix+-25),0	;	ld	(ix+-25),0
	jp	loc_2D2B	;	jp	l12
;
;	case 'G'
;
loc_2DEB:			;l51:				; m5:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	2,(hl)		;	bit	2,(hl)
	jr	z,loc_2E2E	;	jp	z,l52
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	jr	loc_2E19	;	jp	l53
loc_2E0C:			;l54:				; m6:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	inc	hl		;	inc	hl
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
loc_2E19:	; m7:		;l53:				; m7:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	2,(hl)		;	bit	2,(hl)
	jr	nz,loc_2E0C	;	jp	nz,l54
	jr	loc_2E36	;	jp	l56
loc_2E2E:	; m8:		;l52:				; m8:
	ld	(ix+-6),0	;	ld	(ix+-6),0
	ld	(ix+-5),0	;	ld	(ix+-5),0
loc_2E36:	; m9:		;l56:				; m9:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
	ld	(ix+-9),a	;	ld	(ix+-9),a
	ld	(ix+-12),47h	;	ld	(ix+-12),71
	ld	(ix+-11),0	;	ld	(ix+-11),0
				;	jp	l63
loc_2E4F:	; m10:		;l63:				; m10
	ld	a,(ix+-9)	;	ld	a,(ix+-9)
	cp	4Ch		;	cp	76
	jp	z,loc_2FC4	;	jp	z,l64
	cp	4Eh		;	cp	78
	jp	z,loc_3029	;	jp	z,l68
	cp	52h		;	cp	82
	jp	z,loc_3021	;	jp	z,l69
loc_2E61:	; m11:		;l71:			; m11
	ld	a,(ix+-10)	;	ld	a,(ix+-10)
	cp	41h		;	cp	65
	jp	z,loc_31E6	;	jp	z,l72
	cp	42h		;	cp	66
	jp	z,loc_314D	;	jp	z,l73
	cp	43h		;	cp	67
	jp	z,loc_3347	;	jp	z,l78
	cp	44h		;	cp	68
	jp	z,loc_303B	;	jp	z,l82
	cp	46h		;	cp	70
	jp	z,loc_311D	;	jp	z,l84
	cp	47h		;	cp	71
	jp	z,loc_3457	;	jp	z,l87
	cp	4Fh		;	cp	79
	jp	z,loc_31CA	;	jp	z,l93
	cp	53h		;	cp	83
	jp	z,loc_3056	;	jp	z,l94
	cp	54h		;	cp	84
	jp	z,loc_33D6	;	jp	z,l105
	cp	56h		;	cp	86
	jp	z,loc_31F3	;	jp	z,l109
	cp	58h		;	cp	88
	jp	z,loc_3457	;	jp	z,l87
	cp	5Ah		;	cp	90
	jp	z,loc_3130	;	jp	z,l121
	cp	7Eh		;	cp	126
	jp	z,loc_34F8	;	jp	z,l122
	jp	loc_2D2B	;	jp	l12
;
;	case 'A'
;
loc_2EA8:	; m12:		;l35:
	ld	de,2Dh		;	ld	de,45
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	ld	(ix+-12),l	;	ld	(ix+-12),l
	ld	(ix+-11),h	;	ld	(ix+-11),h
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_2ED0	;	jp	z,L9
	ld	de,2Bh		;	ld	de,43
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_2F52	;	jp	nz,l36
loc_2ED0:			;L9:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	inc	hl		;	inc	hl
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	2,(hl)		;	bit	2,(hl)
	jp	z,loc_2F19	;	jp	z,l37
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	call	_atoi		;	call	_atoi
	pop	bc		;	pop	bc
	ld	(ix+-8),l	;	ld	(ix+-8),l
	ld	de,2Dh		;	ld	de,45
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_2F0F	;	jp	nz,l38
	ld	a,(ix+-8)	;	ld	a,(ix+-8)
	neg			;	neg
	ld	(ix+-8),a	;	ld	(ix+-8),a
loc_2F0F:			;l38:
	ld	(ix+-12),0	;	ld	(ix+-12),0
	ld	(ix+-11),0	;	ld	(ix+-11),0
	jr	loc_2F2C	;	jp	l40
loc_2F19:			;l37:
	ld	(ix+-8),0	;	ld	(ix+-8),0
	jr	loc_2F2C	;	jp	l40
loc_2F1F:			;l41:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
loc_2F25:			;L11:
	inc	hl		;	inc	hl
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
loc_2F2C:			;l40:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	2,(hl)		;	bit	2,(hl)
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	jr	nz,loc_2F25	;	jp	nz,L11
	ld	a,(hl)		;	ld	a,(hl)
	cp	2Bh		;	cp	43
	jr	z,loc_2F25	;	jp	z,L11
	ld	a,(hl)		;	ld	a,(hl)
	cp	2Dh		;	cp	45
	jr	z,loc_2F1F	;	jp	z,l41
	jp	loc_2F8F	;	jp	l43
loc_2F52:			;l36:
	ld	de,3Eh		;	ld	de,62
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_2F83	;	jp	nz,l44
	ld	(ix+-8),0	;	ld	(ix+-8),0
	jr	loc_2F76	;	jp	l48
loc_2F66:			;l47:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	inc	hl		;	inc	hl
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
	inc	(ix+-8)		;	inc	(ix+-8)
loc_2F76:			;l48:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	cp	3Eh		;	cp	62
	jr	z,loc_2F66	;	jp	z,l47
	jr	loc_2F8F	;	jp	l43
loc_2F83:			;l44:
	ld	(ix+-12),0	;	ld	(ix+-12),0
	ld	(ix+-11),0	;	ld	(ix+-11),0
	ld	(ix+-8),0	;	ld	(ix+-8),0
loc_2F8F:			;l43:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
	ld	(ix+-9),a	;	ld	(ix+-9),a
	jp	loc_2E4F	;	(jp 	l63)
;
;	case 'L'
;
loc_2FA3:			;l59:
	ld	a,(ix+-10)	;	ld	a,(ix+-10)
	ld	(ix+-9),a	;	ld	(ix+-9),a
	ld	(ix+-10),7Eh	;	ld	(ix+-10),126
loc_2FAD:			;L20:
	ld	(ix+-12),0	;	ld	(ix+-12),0
	ld	(ix+-11),0	;	ld	(ix+-11),0
	ld	(ix+-8),0	;	ld	(ix+-8),0
	jp	loc_2E4F	;	jp	l63
;
;	case 'D':
;
loc_2FBC:			;l60:
	ld	a,(ix+-10)	;	ld	a,(ix+-10)
	ld	(ix+-9),a	;	ld	(ix+-9),a
	jr	loc_2FAD	;	jp	L20

loc_2FC4:	; m27		;l64:			; m27
	ld	a,(ix+10)	;	ld	a,(ix+10)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,0		;	ld	hl,0
	call	wrelop		;	call	wrelop
	jp	p,loc_3006	;	jp	p,l65
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	push	iy		;
	pop	de		;
	ld	a,(ix+10)	;	ld	a,(ix+10)
	add	a,-1		;	add	a,255
	ld	(ix+-17),a	;	ld	(ix+-17),a
				;l66:
				;	ld	e,(ix+-4)
				;	ld	d,(ix+-3)
				;	ld	a,(ix+-17)
loc_2FE8:	;m28		;
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	add	hl,de		;	add	hl,de
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	ld	de,0Ah		;	ld	de,10
	call	amul		;	call	amul
	ld	de,_array_80EF	;	ld	de,_array_80EF
	add	hl,de		;	add	hl,de
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	jp	loc_2E61	;	jp	l71
loc_3006:			;l65:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
loc_300C:			;
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
				;l67:
				;	ld	l,(ix+-4)
				;	ld	h,(ix+-3)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	add	a,-1		;	add	a,255
	ld	(ix+-17),a	;	ld	(ix+-17),a
				;	jp	l66
				;
	ld	e,(ix+-4)	;
	ld	d,(ix+-3)	;
	jr	loc_2FE8	;
loc_3021:			;l69:
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	jr	loc_300C	;	ld	(ix+-4),l
				;	ld	(ix+-3),h
				;	jp	l67
loc_3029:			;l68:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	a,(ix+10)	;	ld	a,(ix+10)
	ld	(ix+-17),a	;	ld	(ix+-17),a
	jp	loc_2E61	;	jp	l71
loc_303B:			;l82:
	ld	hl,(_word_AFF8)	;	ld	hl,(_word_AFF8)
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	z,loc_2D2B	;	jp	z,l12
	push	hl		;	push	hl
	ld	hl,19f	;"%d"	;	ld	hl,39f	;"%d"
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	hl,0		;	ld	hl,0
				;	jp	L24
loc_3050:			;L24:
	ld	(_word_AFF8),hl	;	ld	(_word_AFF8),hl
	jp	loc_2D2B	;	jp	l12
loc_3056:			;l94:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,(hl)		;	ld	a,(hl)
	cp	45h		;	cp	69
	jr	nz,loc_307F	;	jp	nz,l95
	ex	de,hl		;	ex	de,hl
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	add	hl,hl		;	add	hl,hl
	ld	de,_off_AACA	;	ld	de,_off_AACA
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,29f	;"%s"	;	ld	hl,79f
				;	jp	L25
				;L25:
	push	hl		;	push	hl
	call	_printf		;	call	_printf
loc_307A:			;L32:
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	jp	loc_30D5	;	jp	l85
loc_307F:			;l95:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,(hl)		;	ld	a,(hl)
	cp	43h		;	cp	67
	jr	nz,loc_30A6	;	jp	nz,l97
	ex	de,hl		;	ex	de,hl
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_sub_2CE0	;	call	_sub_2CE0
	pop	bc		;	pop	bc
	jr	loc_307A	;	jp	L32
loc_30A6:			;l97:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,(hl)		;	ld	a,(hl)
	cp	44h		;	cp	68
	ex	de,hl		;	ex	de,hl
	ld	hl,19h		;	ld	hl,25
	jr	nz,loc_30C3	;	jp	nz,L15
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,39f		;	ld	hl,89f
loc_30BD:			;
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jr	loc_307A	;	jp	L32
loc_30C3:			;L15:
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,49f		;	ld	hl,99f
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
loc_30D5:	m39:		;l85:
	ld	a,(ix+-12)	;	ld	a,(ix+-12)
	or	(ix+-11)	;	or	(ix+-11)
	jp	nz,loc_2D2B	;	jp	nz,l12
	ld	a,(_word_AFF8)	;	ld	a,(_word_AFF8)
	ld	e,a		;	ld	e,a
	ld	a,(ix+-8)	;	ld	a,(ix+-8)
	add	a,e		;	add	a,e
	ld	(ix+-8),a	;	ld	(ix+-8),a
	ld	hl,0		;	ld	hl,0
	ld	(_word_AFF8),hl	;	ld	(_word_AFF8),hl
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
				;	ld	hl,(_word_AFF8)
	call	wrelop		;	call	wrelop
	ld	a,(ix+-8)	;	ld	a,(ix+-8)
	jp	p,loc_310C	;	jp	p,L16
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	hl,59f		;	ld	hl,109f
				;	jp	L46
loc_3104:			;L46:
	push	hl		;	push	hl
	call	_printf		;	call	_printf
				;	jp	L42
loc_3108:			;L42:
	pop	bc		;	pop	bc
	jp	loc_2DC3	;	jp	L38
loc_310C:			;L16:
	or	a		;	or	a
	jp	p,loc_2D2B	;	jp	p,l12
	ld	a,(ix+-8)	;	ld	a,(ix+-8)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	hl,69f		;	ld	hl,119f
	jr	loc_3104	;	jp	L46
loc_311D:			;l84:
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ld	hl,1Bh	;27	;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,79f		;	ld	hl,49f
	jr	loc_30BD	;
				;
loc_3130:			;l121:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	ld	(ix+-16),e	;	ld	(ix+-16),e
	ld	(ix+-15),d	;	ld	(ix+-15),d
	ld	(ix+-14),l	;	ld	(ix+-14),l
	ld	(ix+-13),h	;	ld	(ix+-13),h
	jr	loc_3168	;	jp	l74
loc_314D:			;l73:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_sub_387A	;	call	_sub_387A
	pop	bc		;	pop	bc
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	ld	(ix+-16),e	;	ld	(ix+-16),e
	ld	(ix+-15),d	;	ld	(ix+-15),d
	ld	(ix+-14),l	;	ld	(ix+-14),l
	ld	(ix+-13),h	;	ld	(ix+-13),h
loc_3168:			;l74:
	ld	de,2Dh		;	ld	de,45
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_31B1	;	jp	nz,l75
	ld	a,(ix+-18)	;	ld	a,(ix+-18)
	or	a		;	or	a
	jp	nz,loc_324D	;
	ld	e,(ix+-16)	;	ld	e,(ix+-16)
	ld	d,(ix+-15)	;	ld	d,(ix+-15)
	ld	l,(ix+-14)	;	ld	l,(ix+-14)
	ld	h,(ix+-13)	;	ld	h,(ix+-13)
	push	hl		;	push	hl
	push	de		;	push	de
				;	jp	nz,L22
	ld	de,(_word_AFF8)	;	ld	de,(_word_AFF8)
	ld	a,d		;	ld	a,d
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	l,a		;	ld	l,a
	ld	h,a		;	ld	h,a
	call	lladd		;	call	lladd
	ld 	(ix+-24),e	;	ld	(ix+-24),e
	ld	(ix+-23),d	;	ld	(ix+-23),d
	ld	(ix+-22),l	;	ld	(ix+-22),l
	ld	(ix+-21),h	;	ld	(ix+-21),h
	ld	hl,0		;	ld	hl,0
	ld	(_word_AFF8),hl	;	ld	(_word_AFF8),hl
	ld	(ix+-18),1	;	ld	(ix+-18),1
	jp	loc_324D	;	jp	l77
loc_31B1:			;l75:
	ld	e,(ix+-16)	;	ld	e,(ix+-16)
	ld	d,(ix+-15)	;	ld	d,(ix+-15)
	ld	l,(ix+-14)	;	ld	l,(ix+-14)
	ld	h,(ix+-13)	;	ld	h,(ix+-13)
	push	hl		;	push	hl
	push	de		;	push	de
				;L22:
	ld	hl,89f	;"%lu"	;	ld	hl,19f	;"%lu"
	push	hl		;	push	hl
	call	_printf		;	call	_printf
				;	pop	bc
loc_31C6:			;L42:
	pop	bc		;	pop	bc
	jp	loc_3108	;	jp	L38
loc_31CA:			;l93:
	ld	de,_array_805F	;	ld	de,_array_805F
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,99f		;	ld	hl,69f
				;	jp	L46
loc_31DF:			;L46:
	push	hl		;	push	hl
	call	_printf		;	call	_printf
	jp	loc_3108	;	jp	L42
loc_31E6:			;l72:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_sub_153A	;	call	_sub_153A
	jp	loc_2DC3	;	jp	L38
loc_31F3:			;l109:
	ld	de,2Dh		;	ld	de,45
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_3210	;	jp	z,L5
	ld	de,2Bh		;	ld	de,43
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_330B	;	jp	nz,l110
loc_3210:			;L5:
	ld	a,(ix+-18)	;	ld	a,(ix+-18)
	or	a		;	or	a
	jp	nz,loc_324D	;	jp	nz,l77
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	de,(_word_AFF8)	;	ld	de,(_word_AFF8)
	ld	a,d		;	ld	a,d
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	l,a		;	ld	l,a
	ld	h,a		;	ld	h,a
	call	lladd		;	call	lladd
	ld	(ix+-24),e	;	ld	(ix+-24),e
	ld	(ix+-23),d	;	ld	(ix+-23),d
	ld	(ix+-22),l	;	ld	(ix+-22),l
	ld	(ix+-21),h	;	ld	(ix+-21),h
	ld	hl,0		;	ld	hl,0
	ld	(_word_AFF8),hl	;	ld	(_word_AFF8),hl
	ld	(ix+-18),1	;	ld	(ix+-18),1
loc_324D:			;l77:
	ld	de,2Dh		;	ld	de,45
	ld	l,(ix+-12)	;	ld	l,(ix+-12)
	ld	h,(ix+-11)	;	ld	h,(ix+-11)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_3263	;	jp	z,L4
	ld	de,1		;	ld	de,1
	ld	hl,0		;	ld	hl,0
	jr	loc_3268	;	jp	L3
loc_3263:			;L4:
	ld	de,-1		;	ld	de,-1
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
loc_3268:			;L3:
	push	hl		;	push	hl
	push	de		;	push	de
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,-24		;	ld	hl,-24
	add	hl,de		;	add	hl,de
	call	aslladd		;	call	aslladd
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	2		;	cp	2
	jp	nz,loc_32BF	;	jp	nz,l112
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,4		;	ld	de,4
	call	wrelop		;	call	wrelop
	jp	nc,loc_32BF	;	jp	nc,l112
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	add	hl,hl		;	add	hl,hl
	add	hl,hl		;	add	hl,hl
	add	hl,hl		;	add	hl,hl
	ld	b,l		;	ld	b,l
	ld	hl,1		;	ld	hl,1
	call	shal		;	call	shll
	dec	hl		;	dec	hl
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	de		;	push	de
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FFE8h	;	ld	hl,-24
	add	hl,de		;	add	hl,de
	call	aslland		;	call	aslland
loc_32BF:			;l112:
	ld	a,(ix+-24)	;	ld	a,(ix+-24)
	or	(ix+-23)	;	or	(ix+-23)
	or	(ix+-22)	;	or	(ix+-22)
	or	(ix+-21)	;	or	(ix+-21)
	jp	z,loc_3304	;	jp	z,l114
	jr	loc_32DD	;	jp	l118
loc_32D0:	; m58:		;l117:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	dec	hl		;	dec	hl
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
loc_32DD:	; m59:		;l118:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+-20)	;	ld	l,(ix+-20)
	ld	h,(ix+-19)	;	ld	h,(ix+-19)
	call	wrelop		;	call	wrelop
	jr	nc,loc_32FA	;	jp	nc,l116
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	dec	hl		;	dec	hl
	ld	a,(hl)		;	ld	a,(hl)
	cp	0Ah		;	cp	10
	jr	nz,loc_32D0	;	jp	nz,l117
loc_32FA:	; m60:		;l116:
	ld	hl,0Ah		;	ld	hl,10
	push	hl		;	push	hl
	call	_putchar	;	call	_putchar
	jp	loc_2DC3	;	jp	L38
loc_3304:			;l114:
	ld	(ix+-18),0	;	ld	(ix+-18),0
	jp	loc_2D2B	;	jp	l12
loc_330B:			;l110:
	ld	a,(_word_AFF8)	;	ld	a,(_word_AFF8)
	ld	e,a		;	ld	e,a
	ld	a,(ix+-8)	;	ld	a,(ix+-8)
	add	a,e		;	add	a,e
	ld	(ix+-8),a	;	ld	(ix+-8),a
	ld	hl,0		;	ld	hl,0
	ld	(_word_AFF8),hl	;	ld	(_word_AFF8),hl
	ld	b,a		;	ld	b,a
	sla	b		;	sla	b
	sla	b		;	sla	b
	sla	b		;	sla	b
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	call	alrsh		;	call	alrsh
	push	hl		;	push	hl
	push	de		;	push	de
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_sub_2CE0	;	call	_sub_2CE0
	jp	loc_31C6	;	(jp 	L45)
loc_3347:			;l78:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,(hl)		;	ld	a,(hl)
	cp	47h		;	cp	71
	ld	e,l		;	ld	e,l
	ld	d,h		;	ld	d,h
	jr	nz,loc_3369	;	jp	nz,L12
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	hl,6		;	ld	hl,6
	add	hl,bc		;	add	hl,bc
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	hl,109f	; "%d"	;	ld	hl,29f ; "%d"
	jp	loc_31DF	;	(goto L46)
loc_3369:	; m64:		;L12:
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	(ix+-16),e	;	ld	(ix+-16),e
	ld	(ix+-15),d	;	d	(ix+-15),d
	ld	(ix+-14),l	;	ld	(ix+-14),l
	ld	(ix+-13),h	;	ld	(ix+-13),h
	push	hl		;	push	hl
	push	de			;push	de
	call	_sub_46F7	;	call	_sub_46F7
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a			;or	a
	ld	e,(ix+-16)	;	ld	e,(ix+-16)
	ld	d,(ix+-15)	;	ld	d,(ix+-15)
	ld	l,(ix+-14)	;	ld	l,(ix+-14)
	ld	h,(ix+-13)	;	ld	h,(ix+-13)
	push	hl		;	push	hl
	push	de		;	push	de
	jr	nz,loc_33B6	;	jp	nz,L13
	ld	hl,-1		;	ld	de,-1	   <----+ At this point,
	pop	bc		;	ld	l,e		; from source
	or	a		;	ld	h,d		; in C, compiler
	sbc	hl,bc		;	call	llsub		; generates code
	pop	bc		;				; that performs
	ex	de,hl		;				; expected action,
	ld	hl,-1		;				; but differs from 
	sbc	hl,bc		;			   <----+ original image
	ld	(ix+-16),e	;	ld	(ix+-16),e
	ld	(ix+-15),d	;	ld	(ix+-15),d
	ld	(ix+-14),l	;	ld	(ix+-14),l
	ld	(ix+-13),h	;	ld	(ix+-13),h
	push	hl		;	push	hl
	push	de		;	push	de
loc_33B6:			;L13:
	call	_sub_46F7	;	call	_sub_46F7
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	e,l		;	ld	e,l
	ld	d,0		;	ld	d,0
	ld	hl,-1		;	ld	hl,-1
	add	hl,de		;	add	hl,de
	srl	h		;	srl	h
	rr	l		;	rr	l
	srl	h		;	srl	h
	rr	l		;	rr	l
	srl	h		;	srl	h
	rr	l		;	rr	l
	ex	de,hl		;	ex	de,hl
	ld	hl,(_word_AFF8)	;	ld	hl,(_word_AFF8)
	add	hl,de		;	add	hl,de
	jp	loc_3050	;
loc_33D6:			;l105:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,(hl)		;	ld	a,(hl)
	cp	47h		;	cp	71
	ld	e,l		;	ld	e,l
	ld	d,h		;	ld	d,h
	jr	nz,loc_33F8	;	jp	nz,L17
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	hl,5		;	ld	hl,5
	add	hl,bc		;	add	hl,bc
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	hl,119f		;	ld	hl,129f
	jp	loc_31DF	;	jp	L46
loc_33F8:	;m67		;L17:
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	(ix+-16),e	;	ld	(ix+-16),e
	ld	(ix+-15),d	;	ld	(ix+-15),d
	ld	(ix+-14),l	;	ld	(ix+-14),l
	ld	(ix+-13),h	;	ld	(ix+-13),h
	push	hl		;	push	hl
	push	de		;	push	de
	call	_sub_46F7	;	call	_sub_46F7
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	ld	e,(ix+-16)	;	ld	e,(ix+-16)
	ld	d,(ix+-15)	;	ld	d,(ix+-15)
	ld	l,(ix+-14)	;	ld	l,(ix+-14)
	ld	h,(ix+-13)	;	ld	h,(ix+-13)
	push	hl		;	push	hl
	push	de		;	push	de
	jr	nz,loc_3445	;	jp	nz,L18
	ld	hl,-1		;	ld	de,-1	   <----+ At this point,
	pop	bc		;	ld	l,e		; from source
	or	a		;	ld	h,d		; in C, compiler
	sbc	hl,bc		;	call	llsub		; generates code
	pop	bc		;				; that performs
	ex	de,hl		;				; expected action,
	ld	hl,-1		;				; but differs from 
	sbc	hl,bc		;			   <----+ original image
	ld	(ix+-16),e	;ld	(ix+-16),e
	ld	(ix+-15),d	;ld	(ix+-15),d
	ld	(ix+-14),l	;ld	(ix+-14),l
	ld	(ix+-13),h	;ld	(ix+-13),h
	push	hl		;	push	hl
	push	de		;	push	de
loc_3445:			;L18:
	call	_sub_46F7	;	call	_sub_46F7
	pop	bc		;	pop	bc
	ld	e,l		;	ld	e,l
	ld	d,0		;	ld	d,0
	ld	hl,-1		;	ld	hl,-1
	add	hl,de		;	add	hl,de
	ex	(sp),hl		;	ex	(sp),hl
	ld	hl,129f		;	ld	hl,139f
	jp	loc_31DF	;	jp	L46
loc_3457:			;l87:
	ld	a,(ix+-10)	;	ld	a,(ix+-10)
	cp	47h		;	cp	71
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ld	a,(ix+-17)	;	ld	a,(ix+-17)
	ld	l,a		;	ld	l,a
	jr	z,loc_3475	;	jp	z,L15
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	add	hl,de		;	add	hl,de
	ld	de,9		;	ld	de,9
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	jr	loc_3480	;	jp	L7
loc_3475:			;L15:
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	add	hl,de		;	add	hl,de
	ld	de,0Fh		;	ld	de,15
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
loc_3480:			;L7:
	ld	(ix+-7),l	;	ld	(ix+-7),l
	ld	a,(ix+-6)	;	ld	a,(ix+-6)
	or	(ix+-5)		;	or	(ix+-5)
	jp	z,loc_34C8	;	jp	z,l88
	jp	loc_34B5	;	jp	l89
loc_348F:			;l90:
	ld	l,(ix+-6)	;	ld	l,(ix+-6)
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,-48		;	ld	hl,-48
	add	hl,de		;	add	hl,de
	ex	de,hl		;	ex	de,hl
	ld	l,(ix+-7)	;	ld	l,(ix+-7)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	de,_array_AB24	;	ld	de,_array_AB24
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	(ix+-7),l	;	ld	(ix+-7),l
loc_34B5:			;l89:
	ld	l,(ix+-6)	;	ld	l,(ix+-6)
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	2,(hl)		;	bit	2,(hl)
	jr	nz,loc_348F	;	jp	nz,l90
loc_34C8:	; m74		;l88:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	cp	2Bh		;	cp	43
	jr	z,loc_34E4	;	jp	z,l92
	ld	a,(_word_AFF8)	;	ld	a,(_word_AFF8)
	ld	e,a		;	ld	e,a
	ld	a,(ix+-7)	;	ld	a,(ix+-7)
	add	a,e		;	add	a,e
	ld	(ix+-7),a	;	ld	(ix+-7),a
	ld	hl,0		;	ld	hl,0
	ld	(_word_AFF8),hl	;	ld	(_word_AFF8),hl
loc_34E4:	; m75		;l92:
	ld	de,_off_AACA	;	ld	de,_off_AACA
	ld	l,(ix+-7)	;	ld	l,(ix+-7)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,139f		;	ld	hl,59f
	jp	loc_31DF	;	jp	L46
loc_34F8:	; m76		;l122:
	ld	a,(ix+-9)	;	ld	a,(ix+-9)
	cp	55h		;	cp	85
	jp	nz,loc_3533	;	jp	nz,l123
	ld	a,(_word_AFFB)	;	ld	a,(_word_AFFB)
	ld	e,a		;	ld	e,a
	ld	a,(ix+-8)	;	ld	a,(ix+-8)
	add	a,e		;	add	a,e
	ld	(ix+-8),a	;	ld	(ix+-8),a
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	1,b		;	bit	1,b
	jr	z,loc_3525	;	jp	z,l124
	ld	a,(ix+10)	;	ld	a,(ix+10)
	or	a		;	or	a
	jr	z,loc_3525	;	jp	z,l124
	dec	(ix+-8)		;	dec	(ix+-8)
loc_3525:	; m77		;l124:
	ld	a,(ix+-8)	;	ld	a,(ix+-8)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	hl,149f		;	ld	hl,149f
	jp	loc_31DF	;	jp	L46
loc_3533:	; m78		;l123:
	ld	a,(ix+-8)	;	ld	a,(ix+-8)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,(_word_AFF8)	;	ld	hl,(_word_AFF8)
	add	hl,de		;	add	hl,de
	ld	(_word_AFF8),hl	;	ld	(_word_AFF8),hl
	ld	a,(ix+-17)	;	ld	a,(ix+-17)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,8		;	ld	hl,8
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_sub_2D09	;	call	_sub_2D09
	jp	loc_31C6	;	jp	L45

	psect	data

p_2d09_1:
19:	defb 37,100,0    ; "%d"	;	defb	37,108,117,0	;"%lu"

p_2d09_2:
29:	defb 37,115,0    ; "%s"	;	defb	37,100,0	;"%d"

p_2d09_3:
39:	defb 37,115,0    ; "%s"	;	defb	37,100,0	;"%d"

p_2d09_4:
49:	defb 37,115,0    ; "%s"	;	defb	37,100,0	;"%d"

p_2d09_5:
59:	defb 43,37,100,0 ;"+%d" ;	defb	37,115,0	;"%s"

p_2d09_6:
69:	defb 37,100,0    ; "%d"	;	defb	37,115,0	;"%s"

p_2d09_7:
79:	defb 37,100,0    ; "%d"	;	defb	37,115,0	;"%s"

p_2d09_8:
89:	defb 37,108,117,0; "%lu";	defb	37,115,0	;"%s"

p_2d09_9:
99:	defb 37,115,0    ; "%s"	;	defb	37,115,0	;"%s"

p_2d09_10:
109:	defb 37,100,0    ; "%d"	;	defb	43,37,100,0	;"+%d"

p_2d09_11:
119:	defb 37,100,0    ; "%d"	;	defb	37,100,0	;"%d"

p_2d09_12:
129:	defb 37,100,0    ; "%d"	;	defb	37,100,0	;"%d"

p_2d09_13:
139:	defb 37,115,0    ; "%s"	;	defb	37,100,0	;"%d"

p_2d09_14:
149:	defb 37,100,0    ; "%d"	;	defb	37,100,0	;"%d"

	psect	text

; End of function sub_2D09

; End of file 2D09.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 3564.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_3564 OK++
;=========================================================
	global	_sub_3564	;	global	_sub_3564
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_word_AFF8	;	global	_word_AFF8
	global	_array_80EF	;	global	_array_80EF
	global	amul		;	global	amul
	global	_sub_2D09	;	global	_sub_2D09
	global	_putchar	;	global	_putchar
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_3564:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	hl,0		;	ld	hl,0
	ld	(_word_AFF8),hl	;	ld	(_word_AFF8),hl
	ld	(ix+-1),l	;	ld	(ix+-1),l
	jp	loc_35D5	;	jp	l12
loc_357E:			;l13:
	push	iy		;	push	iy
	pop	de		;	pop	de
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	add	hl,de		;	add	hl,de
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	ld	de,0Ah		;	ld	de,10
	call	amul		;	call	amul
	ld	de,_array_80EF	;	ld	de,_array_80EF
	add	hl,de		;	add	hl,de
	ex	de,hl		;	ex	de,hl
	push	ix		;	push	ix
	pop	hl		;	pop	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	hl,6		;	ld	hl,6
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	or	(hl)		;	or	(hl)
	jp	z,loc_35D2	;	jp	z,l15
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	ld	l,a		;	ld	l,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	ld	e,(ix+-3)	;	ld	e,(ix+-3)
	ld	d,(ix+-2)	;	ld	d,(ix+-2)
	ld	hl,6		;	ld	hl,6
	add	hl, de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	push	iy		;	push	iy
	call	_sub_2D09	;	call	_sub_2D09
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	hl,0Ah		;	ld	hl,10
	ex	(sp),hl		;	ex	(sp),hl	
	call	_putchar	;	call	_putchar
	pop	bc		;	pop	bc
loc_35D2:			;l15:
	inc	(ix+-1)		;	inc	(ix+-1)
loc_35D5:			;l12:
	ld	e,(iy+1)	;	ld	e,(iy+1)
	ld	d,0		;	ld	d,0
	ld	l, (ix+-1)	;	ld	l,(ix+-1)
	ld	h,d		;	ld	h,d
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_357E	;	jp	nz,l13
	jp	cret		;	jp	cret

; End of function sub_3564 OK++

;=========================================================
; sub_35E6 OK+
;
; The absence command "ld h,0" should not affect execution
; program, since functions sub_143F and sub_1489 expect a
; parameter type uchar (1 byte), which is transmitted in
; register "l".
; Maybe this is the correct compiler response to  restored
; source.
;=========================================================
	global	_sub_35E6		;global	_sub_35E6
	global	_dopetab		;global	_dopetab
	global	_word_AFFB		;global	_word_AFFB
	global	_sub_143F		;global	_sub_143F
	global	_sub_1489		;global	_sub_1489
	global 	csv			;

; Disassembled version		; After compiling C source code
_sub_35E6:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	1,b		;	bit	1,b
	jr	z,loc_360B	;	jp	z,l17
	ld	hl,(_word_AFFB)	;	ld	hl,(_word_AFFB)
	inc	hl		;	inc	hl
	ld	(_word_AFFB),hl	;	ld	(_word_AFFB),hl
loc_360B:			;l17:
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	and	0Ch		;	and	12
	ld	l,a		;	ld	l,a
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	de,8		;	ld	de,8
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_3685	;	jp	nz,l18
	bit	0,(iy+2)	;	bit	0,(iy+2)
	jp	z,loc_364F	;	jp	z,l19
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_35E6	;	call	_sub_35E6
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_35E6	;	call	_sub_35E6
	pop	bc		;	pop	bc
	jp	loc_3685	;	jp	l18
loc_364F:			;l19:
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_35E6	;	call	_sub_35E6
	pop	bc		;	pop	bc
	bit	1,(iy+2)	;	bit	1,(iy+2)
	jp	z,loc_367A	;	jp	z,l21
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	inc	hl		;	inc	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,de		;	add	hl,de
	ld	de,0Eh		;	ld	de,14
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;			<-- difference in code
	push	hl		;	push	hl
	call	_sub_143F	;	call	_sub_143F
	pop	bc		;	pop	bc
loc_367A:			;l21:
	ld	l,(iy+19h)	;	ld	l,(iy+27)
	ld	h,(iy+1Ah)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_35E6	;	call	_sub_35E6
	pop	bc		;	pop	bc
loc_3685:			;l18:
	ld	de,4		;	ld	de,4
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_369E	;	jp	nz,l22
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_35E6	;	call	_sub_35E6
	pop	bc		;	pop	bc
loc_369E:			;l22:
	bit	1,(iy+2)	;	bit	1,(iy+2)
	jp	z,loc_36BE	;	jp	z,l23
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	inc	hl		;	inc	hl
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,de		;	add	hl,de
	ld	de,0Eh		;	ld	de,14
	add	hl,de		;	add	hl,de
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;			<-- difference in code
	push	hl		;	push	hl
	call	_sub_1489	;	call	_sub_1489
	pop	bc		;	pop	bc
loc_36BE:			;l23:
	push	iy		;	push	iy
	call	_sub_3564	;	call	_sub_3564
	pop	bc		;	pop	bc
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	1,b		;	bit	1,b
	jp	z,cret		;	jp	z,cret
	ld	hl,(_word_AFFB)	;	ld	hl,(_word_AFFB)
	dec	hl		;	dec	hl
	ld	(_word_AFFB),hl	;	ld	(_word_AFFB),hl
	jp	cret		;	jp	cret
				
			
; End of function sub_35E6 OK+ 	

;=========================================================
; sub_36E0 OK++
;=========================================================
	global	_sub_36E0	;	global	_sub_36E0
	global	_byte_B013	;	global	_byte_B013
	global	_sub_7028	;	global	_sub_7028
	global	_word_B011	;	global	_word_B011
	global 	csv		;	global 	csv

; Disassembled version		; After compiling C source code
_sub_36E0:
	call	csv		;	call 	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,1		;	ld	a,1
	ld	(_byte_B013),a	;	ld	(_byte_B013),a
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	44h		;	cp	68
	jr	nz,loc_3702	;	jp	nz,l26
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_7028	;	call	_sub_7028
loc_3702:			;l26:
	ld	hl,(_word_B011)	;	ld	hl,(_word_B011)
	ld	(iy+17h),l	;	ld	(iy+23),l
	ld	(iy+18h),h	;	ld	(iy+24),h
	ld	(_word_B011),iy	;	ld	(_word_B011),iy
	jp	cret		;	jp	cret

; Endof function sub_36E0 OK++

;=========================================================
; sub_3712 OK++
;=========================================================
	global	_sub_3712	;	global	_sub_3712
	global	_blkclr		;	global	_blkclr
	global	_allocmem	;	global	_allocmem
	global	csv		;	global	csv

; Disassembled version		; After compiling C source code
_sub_3712:
	call	csv		;	call 	csv
	ld	a,1		;	ld	a,1
	ld	(_byte_B013),a	;	ld	(_byte_B013),a
	ld	hl,(_word_B011)	;	ld	hl,(_word_B011)
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_373B	;	jp	z,l28
	ld	iy,(_word_B011)	;	ld	iy,(_word_B011)
	ld	l,(iy+17h)	;	ld	l,(iy+23)
	ld	h,(iy+18h)	;	ld	h,(iy+24)
	ld	(_word_B011),hl	;	ld	(_word_B011),hl
	ld	hl,1Dh		;	ld	hl,29
	push	hl		;	push	hl
	push	iy		;	push	iy
	call	_blkclr		;	call	_blkclr
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	jr	loc_3746	;	jp	l29
loc_373B:			;l28:
	ld	hl,1Dh		;	ld	hl,29
	push	hl		;	push	hl
	call	_allocmem	;	call	_allocmem
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_3746:			;l29:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret

; End of function sub_3712 OK++

;=========================================================
; sub_3712 OK++
;=========================================================
	global	_sub_374C	;	global	_sub_374C
	global	csv		;	global	csv

; Disassembled version		; After compiling C source code	
_sub_374C:
	call	csv		;	call 	csv
	ld	hl,(_word_B011)	;	ld	hl,(_word_B011)
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_376A	;	jp	nz,l32
	ld	l,0		;	ld	l,0
	jp	cret		;	jp	cret
loc_375B:			;l33:
	ld	l,(iy+17h)	;	ld	l,(iy+23)
	ld	h,(iy+18h)	;	ld	h,(iy+24)
	ld	(_word_B011),hl	;	ld	(_word_B011),hl
	push	iy		;	push	iy
	call	_sub_7028	;	call	_sub_7028
	pop	bc		;	pop	bc
loc_376A:			;l32:
	ld	iy,(_word_B011)	;	ld	iy,(_word_B011)
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_375B	;	jp	nz,l33
	ld	l,1		;	ld	l,1
	jp	cret		;	jp	cret

; End of function sub_374C OK++

;=========================================================
; sub_377A OK++
;=========================================================
	global	_sub_377A	;	global	_sub_377A
	global	csv		;	global	csv

; Disassembled version		; After compiling C source code	
_sub_377A:
	call	csv		;	call 	csv
	call	_sub_3712	;	call	_sub_3712
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	iy		;	push	iy
	pop	de		;	pop	de
	push	hl		;	push	hl
	ld	bc,1Dh		;	ld	bc,29
	ldir			;	ldir
	pop	hl		;	pop	hl
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	and	0Ch		;	and	12
	ld	l,a		;	ld	l,a
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_37BB	;	jp	z,l36
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_377A	;	call	_sub_377A
	pop	bc		;	pop	bc
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
loc_37BB:			;l36:
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	and	0Ch		;	and	12
	ld	l,a		;	ld	l,a
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	ld	de,8		;	ld	de,8
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_37E7	;	jp	nz,l37
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_377A	;	call	_sub_377A
	pop	bc		;	pop	bc
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
loc_37E7:			;l37:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret

; End of function sub_377A OK++

; End of file 3564.asm

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 37ED.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_37ED OK++
;=========================================================
	global	_sub_37ED	;	global	_sub_37ED
	global ncsv,cret,indir	;	global	ncsv, cret, indir
	global	aslr		;	global	aslr
	global	csv		;	global	csv

	psect	text

_sub_37ED:
; Disassembled version		; After compiling C source code
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(iy+17h)	;	ld	l,(iy+23)
	ld	h,(iy+18h)	;	ld	h,(iy+24)
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	a,(iy+15h)	;	ld	a,(iy+21)
	or	(iy+16h)	;	or	(iy+22)
	jr	z,loc_3827	;	jp	z,l13
	ld	b,2		;	ld	b,2
	push	iy		;	push	iy
	pop	de		;	pop	de
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	call	aslr		;	call	aslr
	jp	cret		;	jp	cret
loc_381D:			;L1:
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-2),c	;	ld	(ix+-2),c
	ld	(ix+-1),b	;	ld	(ix+-1),b
loc_3827:			;l13:
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,0Dh		;	ld	hl,13
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	or	(hl)		;	or	(hl)
	ld	hl,0Fh		;	ld	hl,15
	jr	z,loc_381D	;	jp	z,L1
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+17h),c	;	ld	(iy+23),c
	ld	(iy+18h),b	;	ld	(iy+24),b
	ld	hl, 0Dh		;	ld	hl,13
	add	hl, de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	srl	b		;	srl	b
	rr	c		;	rr	c
	srl	b		;	srl	b
	rr	c		;	rr	c
	ld	(iy+15h),c	;	ld	(iy+21),c
	ld	(iy+16h),b	;	ld	(iy+22),b
	jp	cret		;	jp	cret

; End of function sub_37ED OK++

; End of file 37ED.as
*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 385B.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_385B OK++
;=========================================================
	global	_sub_385B	;	global	_sub_385B
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_385B:
	call 	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(iy+21)	;	ld	l,(iy+15h)
	ld	h,(iy+22)	;	ld	h,(iy+16h)
	add	hl,hl		;	add	hl,hl
	add	hl,hl		;	add	hl,hl
	set	0,l		;	set	0,l
	ld	(iy+21),l	;	ld	(iy+15h),l
	ld	(iy+22),h	;	ld	(iy+16h),h
	jp	cret		;	jp	cret

; End of function sub_385B OK++

;=========================================================
; sub_387A OK++
;=========================================================
	global	_sub_387A	;	global	_sub_387A
	global	_sub_37ED	;	global	_sub_37ED
	global	_nodesize	;	global	_nodesize
	global 	csv		;	global 	csv

; Disassembled version		; After compiling C source code
_sub_387A:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(iy+15h)	;	ld	a,(iy+21)
	or	(iy+16h)	;	or	(iy+22)
	jr	nz,loc_38AD	;	jp	nz,l14
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	hl,0Fh		;	ld	hl,15
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	or	(hl)		;	or	(hl)
	jr	nz,loc_38AD	;	jp	nz,l14
	ld	hl,0Dh		;	ld	hl,13
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	or	(hl)		;	or	(hl)
	jr	nz,loc_38AD	;	jp	nz,l14
	ld	hl,1		;	ld	hl,1
	jp	cret		;	jp	cret
loc_38AD:			;l14:
	push	iy		;	push	iy
	call	_sub_37ED	;	call	_sub_37ED
	pop	bc		;	pop	bc
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	(ix+-1),l	;	ld	(ix+-1),l
	push	iy		;	push	iy
	call	_sub_385B	;	call	_sub_385B
	pop	bc		;	pop	bc
	ld	l,(ix+-1)	;	ld	l,(ix+-1)
	ld	h, 0		;	ld	h,0
	jp	cret		;	jp	cret

; End of function sub_387A OK++

;=========================================================
; sub_38CA OK++
;=========================================================
	global	_sub_38CA	;	global	_sub_38CA
	global csv		;	global 	csv

; Disassembled version		; After compiling C source code
_sub_38CA:
	call	csv		;	call 	csv
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	and	(ix+8)		;	and	(ix+8)
	ld	l,a		;	ld	l,a
	ld	a,b		;	ld	a,b
	and	(ix+9)		;	and	(ix+9)
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_38EE	;	jp	z,l18
loc_38E8:			;L1:
	ld	hl,1		;	ld	hl,1
	jp	cret		;	jp	cret
loc_38EE:			;l18:
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	a, (hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	or	(hl)		;	or	(hl)
	jr	z,loc_3903	;	jp	z,l19
loc_38FD:			;L3:
	ld	hl,0		;	ld	hl,0
	jp	cret		;	jp	cret
loc_3903:			;l19:
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	pop	iy		;	pop	iy
loc_3913:			;l22:
	ld	a,(iy+0Dh)	;	ld	a,(iy+13)
	and	(ix+8)		;	and	(ix+8)
	ld	l,a		;	ld	l,a
	ld	a,(iy+0Eh)	;	ld	a,(iy+14)
	and	(ix+9)		;	and	(ix+9)
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_38E8	;	jp	nz,L1
	ld	a,(iy+0Dh)	;	ld	a,(iy+13)
	or	(iy+0Eh)	;	or	(iy+14)
	jr	nz,loc_38FD	;	jp	nz,L3
	ld	l,(iy+0Fh)	;	ld	l,(iy+15)
	ld	h,(iy+10h)	;	ld	h,(iy+16)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	nz,loc_3913	;	jp	nz,l22
	jr	loc_38FD	;	jp	L3

; End of function sub_38CA OK++

;=========================================================
; sub_393C OK++
;=========================================================
	global	csv		;	global 	csv
	global	_sub_393C	;	global	_sub_393C

; Disassembled version		; After compiling C source code
_sub_393C:
	call 	csv		;	call	csv
	ld	hl,1		;	ld	hl,1
	push	hl		;	push	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	call	_sub_38CA	;	call	_sub_38CA
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret

; End of function sub_393C OK++

;=========================================================
; sub_33952 OK++
;=========================================================
	global	csv		;	global 	csv
	global	_sub_3952	;	global	_sub_3952

; Disassembled version		; After compiling C source code
_sub_3952:
	call 	csv		;	call	csv
	ld	hl,2		;	ld	hl,2
	push	hl		;	push	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	call	_sub_38CA	;	call	_sub_38CA
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret

; End of function sub_3952 OK++

;=========================================================
; sub_3968 OK++
;=========================================================
	global	_sub_3968	;	global	_sub_3968
	global	csv		;	global 	csv

; Disassembled version		; After compiling C source code
_sub_3968:
	call	csv		;	call 	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(iy+17h)	;	ld	l,(iy+23)
	ld	h,(iy+18h)	;	ld	h,(iy+24)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	cp	37h		;	cp	55
	jr	nz,loc_398D	;	jp	nz,l28
	bit	0,(iy+15h)	;	bit	0,(iy+21)
	jr	nz,loc_398D	;	jp	nz,l28
	ld	hl,1		;	ld	hl,1
	jp	cret		;	jp	cret
loc_398D:			;l28:
	ld	hl,0		;	ld	hl,0
	jp	cret		;	jp	cret

; End of function sub_3968 OK++

;=========================================================
; nodesize OK++
;=========================================================
	global	csv		;	global 	csv
	global	_uerror		;	global	_uerror

; Disassembled version		; After compiling C source code
_nodesize:
	call	csv		;	call 	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	bit	1,(iy+15h)	;	bit	1,(iy+21)
	jr	z,loc_39AD	;	jp	z,l31
	ld	hl,19f		;	ld	hl,19f
	push	hl		;	push	hl
	call	_uerror		;	call	_uerror
	pop	bc		;	pop	bc
loc_39AD:			;l31:
	bit	0,(iy+15h)	;	bit	0,(iy+21)
	jr	z,loc_39B9	;	jp	z,l32
	ld	hl,2		;	ld	hl,2
	jp	cret		;	jp	cret
loc_39B9:			;l32:
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	hl,9		;	ld	hl,9
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	jp	cret		;	jp	cret

; End of function nodesize OK++

;=========================================================
; sub_39CA OK++
;=========================================================
	global	_sub_39CA	;	global	_sub_39CA
	global	_sub_36E0	;	global	_sub_36E0
	global	_sub_14F3	;	global	_sub_14F3
	global	_sprintf	;	global	_sprintf
	global	_allocmem	;	global	_allocmem
	global	_strlen		;	global	_strlen
	global	_strcpy		;	global	_strcpy
	global	_sub_174C	;	global	_sub_174C
	global	_sub_3A79	;	global	_sub_3A79

; Disassembled version		; After compiling C source code
_sub_39CA:
	call 	ncsv		;	call 	ncsv
	defw	0FFCEh		;	defw 	-34
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	jr	nz,loc_3A5C	;	jp	nz,l34
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	hl,29f		;	ld	hl,29f
	push	hl		;	push	hl
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FFCEh	;	ld	hl,-34
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	call	_sprintf	;	call	_sprintf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_36E0	;	call	_sub_36E0
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FFCEh	;	ld	hl,-34
	add	hl,de		;	add	hl,de
	ex	(sp),hl		;	ex	(sp),hl
	call	_strlen		;	call	_strlen
	pop	bc		;	pop	bc
	inc	hl		;	inc	hl
	push	hl		;	push	hl
	call	_allocmem	;	call	_allocmem
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FFCEh	;	ld	hl,-34
	add	hl,de		;	add	hl,de
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_strcpy		;	call	_strcpy
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	call	_sub_174C	;	call	_sub_174C
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
	ld	(iy+0),44h	;	ld	(iy+0),68
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret
loc_3A5C:			;l34:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	push	iy		;	push	iy
	call	_sub_3A79	;	call	_sub_3A79
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	jp	cret		;	jp	cret

; End of function sub_39CA OK++

	psect	data

p_nodesize_1:
19:
	defb	99,97,110,39,116,32,116,97,107,101,32,115,105,122,101,111
	defb	102,32,102,117,110,99,0

p_39ca_1:
29:
	defb	37,108,100,46,0

	psect	text

; End of file 385B.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 3A79.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_3A79 OK+
;
; From source in C, compiler generates code that performs
; expected action, but differs from original image
;=========================================================
	global	_sub_3A79	;	global	_sub_3A79
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_nodesize	;	global	_nodesize
	global	wrelop		;	global	wrelop
	global	asal		;	global	asal
	global	allsh		;	global	allsh
	global	asaland		;	global	asaland
	global	_sub_14F3	;	global	_sub_14F3
	global	shal		;	global	shal
	global	aland		;	global	aland
	global	allsh		;	global	allsh
	global	alsub		;	global	alsub
	global	asalor		;	global	asalor
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code	
_sub_3A79:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	a,l		;	ld	a,l
	or	(ix+-1)		;	or	(ix+-1)
	jp	z,loc_3B3C	;	jp	z,l12
	ld	de,4		;	ld	de,4
	call	wrelop		;	call	wrelop
	jp	p,loc_3B3C	;	jp	p,l12
	ld	b,3		;	ld	b,3
	push	ix		;	push	ix
	pop	hl		;	pop	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	call	asal		;	call	asal
	ld	b,(ix+-2)	;	ld	b,(ix+-2)
	ld	de,1		;	ld	de,1
	ld	hl,0		;	ld	hl,0
	call	allsh		;	call	allsh
	ex	de,hl		;	ex	de,hl
	ld	bc,0FFFFh	;	ld	bc,-1
	add	hl,bc		;	add	hl,bc
	ex	de,hl		;	ex	de,hl
	adc	hl,bc		;	adc	hl,bc
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	call	asaland		;	call	asaland
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	1		;	cp	1
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9) 	;	ld	d,(ix+9)
	jr	nz,loc_3B42	;	jp	nz,L1
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	dec	hl		;	dec	hl
	ld	b,l		;	ld	b,l
	ld	hl,1		;	ld	hl,1
	call	shal		;	call	shal
	ex	de,hl		;	ex	de,hl
	ld	a,d		;	ld	a,d
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	l,a		;	ld	l,a
	ld	h,a		;	ld	h,a
	call	aland		;	call	aland
	ld	a,e		;	ld	a,e
	or	d		;	or	d
	or	l		;	or	l
	or	h		;	or	h
	jr	z,loc_3B3C	;	jp	z,l12
	ld	b,(ix+-2)	;	ld	b,(ix+-2)
	ld	de,1		;	ld	de,1
	ld	hl,0		;	ld	hl,0
	call	allsh		;	call	allsh
	ex	de,hl		;	ex	de,hl
	ld	bc,0FFFFh	;	ld	bc,-1
	add	hl,bc		;	add	hl,bc
	ex	de,hl		;	ex	de,hl
	adc	hl,bc		;	adc	hl,bc
	push	hl		;	push	hl
	push	de		;	push	de
	ld	l,c		;	ld	e,c	   <----+ At this point,
	ld	h,b		;	ld	d,b		; from source
	pop	bc		;	ld	l,c		; in C, compiler
	or	a		;	ld	h,b		; generates code
	sbc	hl,bc		;	call	alsub		; that performs
	pop	bc		;				; expected
	ex	de,hl		;				; action, but
	ld	hl,0FFFFh	;				; differs from 
	sbc	hl,bc		;			   <----+ original image
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	call	asalor		;	call	asalor
loc_3B3C:			;l12:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
loc_3B42:			;L1:
	ld	hl,17h 		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	hl,15h 		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	e,(iy+15h)	;	ld	e,(iy+21)
	ld	d,(iy+16h)	;	ld	d,(iy+22)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	jp	cret		;	jp	cret

; End of function sub_3A79 OK+

; End of file 3A79.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 3B65.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_3B65 OK++
;=========================================================
	global	_sub_3B65	;	global	_sub_3B65
	global  ncsv,cret,indir	;	global	ncsv, cret, indir
	global	asllmod		;	global	aslldiv
	global	aslldiv		;	global	asllmod
	global	asllrsh		;	global	asllrsh
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_3B65:
	call	csv		;	call 	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(ix+0Ch)	;	ld	l,(ix+12)
	ld	h,(ix+0Dh)	;	ld	h,(ix+13)
	ld	a,h		;	ld	a,h
	or	a		;	or	a
	jp	nz,cret		;	jp	nz,cret
	ld	a,l		;	ld	a,l
	cp	6		;	cp	6
	jr	z,loc_3BA3	;	jp	z,l4	<---- Code difference
	cp	18h		;	cp	24
	jr	z,loc_3B8C	;	jp	z,l5	<---- Code difference
	cp	2Fh		;	cp	47
	jr	z,loc_3BBA	;	jp	z,l6	<---- Code difference
	jp	cret		;	jp	cret
loc_3B8C:			;l4:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	aslldiv		;	call	aslldiv
	jp	cret		;	jp	cret
loc_3BA3:			;l5:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asllmod		;	call	asllmod
	jp	cret		;	jp	cret
loc_3BBA:			;l6:
	ld	b,(ix+8)	;	ld	b,(ix+8)
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asllrsh		;	call	asllrsh
	jp	cret		;	jp	cret

; End of function sub_3B65 OK++

; End of file 3B65.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 3BC6.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_3BC6 OK++
;
; Compiler generates identical code from restored source
; program in C, however, location of branches associated
; with case constants is different from original.
; This does not affect the function.
;=========================================================
	global	_sub_3BC6	;	global	_sub_3BC6
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	asalmod		;	global	asalmod
	global	asaland		;	global	asaland
	global	asalmul		;	global	asalmul
	global	asaladd		;	global	asaladd
	global	asalsub		;	global	asalsub
	global	asaldiv		;	global	asaldiv
	global	asallsh		;	global	asallsh
	global	asalrsh		;	global	asalrsh
	global	asalxor		;	global	asalxor
	global	asalor		;	global	asalor
	global 	csv		;	global 	csv

	psect	text

;	Disassembled version	; After compiling C source code	
_sub_3BC6:
	call	csv		;	call csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(ix+0Ch)	;	ld	l,(ix+12)
	ld	h,(ix+0Dh)	;	ld	h,(ix+13)
	ld	a,h		;	ld	a,h
	or	a		;	or	a
	jp	nz,cret		;	jp	nz,cret
	ld	a,l		;	ld	a,l
	cp	6		;	cp	6
	jp	z,loc_3C6B	;	jp	z,l4
	cp	7		;	cp	7
	jp	z,loc_3C99	;	jp	z,l5
	cp	0Ch		;	cp	12
	jr	z,loc_3C3D	;	jp	z,l6
	cp	0Eh		;	cp	14
	jr	z,loc_3C0F	;	jp	z,l7
	cp	12h		;	cp	18
	jr	z,loc_3C26	;	jp	z,l8
	cp	18h		;	cp	24
	jr	z,loc_3C54	;	jp	z,l9
	cp	1Fh		;	cp	31
	jp	z,loc_3CC7	;	jp	z,l10
	cp	2Fh		;	cp	47
	jp	z,loc_3CD3	;	jp	z,l11
	cp	3Ah		;	cp	58
	jp	z,loc_3CB0	;	jp	z,l12
	cp	3Ch		;	cp	60
	jp	z,loc_3C82	;	jp	z,l13
	jp	cret		;	jp	cret
loc_3C0F:			;l7:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asaladd		;	call	asaladd
	jp	cret		;	jp	cret
loc_3C26:			;l8:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asalsub		;	call	asalsub
	jp	cret		;	jp	cret
loc_3C3D:			;l6:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asalmul		;	call	asalmul
	jp	cret		;	jp	cret
loc_3C54:			;l9:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asaldiv		;	call	asaldiv
	jp	cret		;	jp	cret
loc_3C6B:			;l4:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asalmod		;	call	asalmod
	jp	cret		;	jp	cret
loc_3C82:			;l13:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asalor		;	call	asalor
	jp	cret		;	jp	cret
loc_3C99:			;l5:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asaland		;	call	asaland
	jp	cret		;	jp	cret
loc_3CB0:			;l12:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asalxor		;	call	asalxor
	jp	cret		;	jp	cret
loc_3CC7:			;l10:
	ld	b,(ix+8)	;	ld	b,(ix+8)
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asallsh		;	call	asallsh
	jp	cret		;	jp	cret
loc_3CD3:			;l11:
	ld	b,(ix+8)	;	ld	b,(ix+8)
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	call	asalrsh		;	call	asalrsh
	jp	cret		;	jp	cret

; End of function sub_3BC6 OK+

; End of function 3BC6.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 3CDF.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_3CDF OK++
;=========================================================
	global	_sub_3CDF	;	global	_sub_3CDF
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_sub_2BD0	;	global	_sub_2BD0
	global	_sub_36E0	;	global	_sub_36E0
	global	_byte_B014	;	global	_byte_B014
	global	_dopetab	;	global	_dopetab
	global	_sub_4C6D	;	global	_sub_4C6D
	global	_array_AFFD	;	global	_array_AFFD
	global	_sub_377A	;	global	_sub_377A
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_3CDF:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	1Ch		;	cp	28
	jr	nz,loc_3D0D	;	jp	nz,l12
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_2BD0	;	call	_sub_2BD0
	pop	bc		;	pop	bc
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_3D0D:			;l12:
	ld	a,(_byte_B014)	;	ld	a,(_byte_B014)
	cp	0Ah		;	cp	10
	jr	z,loc_3D25	;	jp	z,L3
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	6,b		;	bit	6,b
	jr	z,loc_3D2B	;	jp	z,l16
loc_3D25:			;L3:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret
loc_3D2B:			;l16:
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	0Fh		;	cp	15
	jr	z,loc_3D36	;	jp	z,l18
	cp	13h		;	cp	19
	jr	nz,loc_3D76	;	jp	nz,l15
loc_3D36:			;l18:
	push	iy		;	push	iy
	call	_sub_4C6D	;	call	_sub_4C6D
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	jr	z,loc_3D76	;	jp	z,l15
	ld	a,(_byte_B014)	;	ld	a,(_byte_B014)
	ld	e,a		;	ld	e,a
	inc	a		;	inc	a
	ld	(_byte_B014),a	;	ld	(_byte_B014),a
	ld	l,e		;	ld	l,e
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	ld	de,_array_AFFD	;	ld	de,_array_AFFD
	add	hl,de		;	add	hl,de
	push	iy		;	push	iy
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	0Fh		;	cp	15
	jr	z,loc_3D62	;	jp	z,L2
	ld	hl,26h 		;	ld	hl,38
	jr	loc_3D65	;	jp	L1
loc_3D62:			;L2:
	ld	hl,25h		;	ld	hl,37
loc_3D65:			;L1:
	ld	(iy+0),l	;	ld	(iy+0),l
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_377A	;	call	_sub_377A
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_3D76:			;l15:
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-2),c	;	ld	(ix+-2),c
	ld	(ix+-1),b	;	ld	(ix+-1),b
	ld	a,c		;	ld	a,c
	and	0Ch		;	and	12
	ld	l,a		;	ld	l,a
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_3DA4	;	jp	z,l20
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_3CDF	;	call	_sub_3CDF
	pop	bc		;	pop	bc
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
loc_3DA4:			;l20:
	ld	de,8		;	ld	de,8
	ld	a,(ix+-2)	;	ld	a,(ix+-2)
	and	0Ch		;	and	12
	ld	l,a		;	ld	l,a
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_3D25	;	jp	nz,L3
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_3CDF	;	call	_sub_3CDF
	pop	bc		;	pop	bc
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
	jp	loc_3D25	;	jp	L3

; End of function sub_3CDF OK++

;=========================================================
; sub_3DC9 OK++
;=========================================================
	global	_sub_3DC9	;	global	_sub_3DC9
	global	_sub_600E	;	global	_sub_600E
	global	_warning	;	global	_warning
	global	_sub_475C	;	global	_sub_475C
	global	wrelop		;	global	wrelop
	global 	csv		;

; Disassembled version		; After compiling C source code
_sub_3DC9:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	push	hl		;	push	hl
	call	_sub_600E	;	call	_sub_600E
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	4		;	cp	4
	jr	nz,loc_3E2B	;	jp	nz,l23
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	a,(hl)		;	ld	a,(hl)
	cp	43h		;	cp	67
	jr	nz,loc_3E2B	;	jp	nz,l23
	ld	hl,19f		;	ld	hl,19f
	push	hl		;	push	hl
	call	_warning	;	call	_warning
	pop	bc		;	pop	bc
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	a,e		;	ld	a,e
	or	d		;	or	d
	or	l		;	or	l
	or	h		;	or	h
	jr	z,loc_3E3C	;	jp	z,l25
	ld	(iy+0),5	;	ld	(iy+0),5
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
loc_3E2B:			;l23:
	xor	a		;	xor	a
	ld	(_byte_B014),a	;	ld	(_byte_B014),a
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	0Fh		;	cp	15
	jr	nz,loc_3E45	;	jp	nz,l27
	ld	(iy+0),25h	;	ld	(iy+0),37
	jr	loc_3E50	;	jp	l28
loc_3E3C:			;l25:
	push	iy		;	push	iy
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret
loc_3E45:			;l27:
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	13h		;	cp	19
	jr	nz,loc_3E50	;	jp	nz,l28
	ld	(iy+0),26h 	;	ld	(iy+0),38
loc_3E50:			;l28:
	push	iy		;	push	iy
	call	_sub_3CDF	;	call	_sub_3CDF
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(_byte_B014)	;	ld	a,(_byte_B014)
	or	a		;	or	a
	push	iy		;	push	iy
	jr	z,loc_3E68	;	jp	z,L4
	call	_sub_600E	;	call	_sub_600E
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ex	(sp),hl		;	ex	(sp),hl
loc_3E68:			;L4:
	call	_sub_2BD0	;	call	_sub_2BD0
	pop	bc		;	pop	bc
	ld	(ix+-2),0	;	ld	(ix+-2),0
	ld	(ix+-1),0	;	ld	(ix+-1),0
	jr	loc_3E96	;	jp	l31
loc_3E76:			;l32:
	ld	de,_array_AFFD	;	ld	de,_array_AFFD
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_2BD0	;	call	_sub_2BD0
	pop	bc		;	pop	bc
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
loc_3E96:			;l31:
	ld	a,(_byte_B014)	;	ld	a,(_byte_B014)
	ld	e,a		;	ld	e,a
	ld	d,0		;	ld	d,0
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	call	wrelop		;	call	wrelop
	jr	c,loc_3E76	;	jp	c,l32
	jp	cret		;	jp	cret

; End of function sub_3DC9 OK++

	psect	data

d_3dc9_A9B4:
19:	;	"constant conditional branch"
defb	99,111,110,115,116,97,110,116,32,99,111,110,100,105,116,105
defb	111,110,97,108,32,98,114,97,110,99,104,0


	psect	text

; End of file 3CDF.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated with original code

; File - 3EAA.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_3EAA OK+
;
; From source in C, compiler generates code that performs
; expected action, but differs from original image
;=========================================================
	global	_sub_3EAA	;	global	_sub_3EAA
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_dopetab	;	global	_dopetab
	global	_sub_14F3	;	global	_sub_14F3
	global	_sub_36E0	;	global	_sub_36E0
	global	_sub_39CA	;	global	_sub_39CA
	global	_word_B015	;	global	_word_B015
	global	_sub_3B65	;	global	_sub_3B65
	global	_sub_475C	;	global	_sub_475C
	global	_sub_3A79	;	global	_sub_3A79
	global	_sub_3BC6	;	global	_sub_3BC6
	global	alsub		;	global	alsub
	global 	csv		;	global 	csv

	psect	text

;	Disassembled version	; After compiling C source code	
_sub_3EAA:
	call	csv		;	call csv
	push	hl		;	push hl
	push	hl		;	push hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	and	0Ch		;	and	12
	ld	l,a		;	ld	l,a
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_3EE6	;	jp	z,l12
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_3EAA	;	call	_sub_3EAA
	pop	bc		;	pop	bc
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
loc_3EE6:			;l12:				;m1:
	ld	de,8		;	ld	de,8
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_3F05	;	jp	nz,l13
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_3EAA	;	call	_sub_3EAA
	pop	bc		;	pop	bc
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
loc_3F05:			;l13:				; m2:
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	14h		;	cp	20
	jr	nz,loc_3F5B	;	jp	nz,l14
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	a,(hl)		;	ld	a,(hl)
	cp	44h		;	cp	68
	jr	nz,loc_3F5B	;	jp	nz,l14
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	jr	nz,loc_3F5B	;	jp	nz,l14
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	jp	cret		;	jp	cret
loc_3F5B:			;l14:				; m3:
	ld	a,(ix+-4)	;	ld	a,(ix+-4)
	or	(ix+-3)		;	or	(ix+-3)
	jr	z,loc_3F6E	;	jp	z,L11
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	a,(hl)		;	ld	a,(hl)
	cp	43h		;	cp	67
	jr	z,loc_3F74	;	jp	z,l18
loc_3F6E:			;L11:
	push	iy		;	push	iy		; Label 
loc_3F70:			;			   <----+ deleted
	pop	hl		;	pop	hl		; by optimizer
	jp	cret		;	jp	cret
loc_3F74:			;l18:
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	14h		;	cp	20
	jr	nz,loc_3F84	;	jp	nz,l19
	push	iy		;	push	iy
	call	_sub_39CA	;	call	_sub_39CA
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret
loc_3F84:			;l19:
	ld	de,8		;	ld	de,8
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_3FA1	;	jp	nz,l21
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	ld	a,(hl)		;	ld	a,(hl)
	cp	43h		;	cp	67
	push	iy		;			   <----+
	jr	z,loc_3FA3	;	jp	nz,L11		: Result of 
	jr	loc_3F70	;				: optimizer 
loc_3FA1:			;l21:				: pass
	push	iy		;	push	iy		:
loc_3FA3:			;			   <----+
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	2		;	cp	2
	ld	a,(iy+0)	;	ld	a,(iy+0)
	jr	nz,loc_3FD2	;	jp	nz,L5
	cp	6		;	cp	6
	jp	z,loc_4048	;	jp	z,l26
	cp	18h		;	cp	24
	jp	z,loc_4048	;	jp	z,l26
	cp	1Eh		;	cp	30
	jp	z,loc_4040	;	jp	z,l29
	cp	20h		;	cp	32
	jp	z,loc_4040	;	jp	z,l29
	cp	2Dh		;	cp	45
	jp	z,loc_4040	;	jp	z,l29
	cp	2Eh		;	cp	46
	jp	z,loc_4040	;	jp	z,l29
	cp	2Fh		;	cp	47
	jp	z,loc_4048	;	jp	z,l26
loc_3FD2:			;L3:
	cp	1		;	cp	1			
	jp	z,loc_4117	;	jp	z,l35		; Possibly
				;	ld	a,(iy+0)    <---+ deleted 
	cp	2		;	cp	2		; manually
	jp	z,loc_40AA	;	jp	z,l37
	cp	6		;	cp	6
	jp	z,loc_40AF	;	jp	z,l39
	cp	7		;	cp	7
	jp	z,loc_40AF	;	jp	z,l39
	cp	8		;	cp	8
	jp	z,loc_40AF	;	jp	z,l39
	cp	0Ch		;	cp	12
	jp	z,loc_40AF	;	jp	z,l39
	cp	0Eh		;	cp	14
	jp	z,loc_40AF	;	jp	z,l39
	cp	12h		;	cp	18
	jp	z,loc_40AF	;	jp	z,l39
	cp	15h		;	cp	21
	jp	z,loc_40DD	;	jp	z,l46
	cp	18h		;	cp	24
	jp	z,loc_40AF	;	jp	z,l39
	cp	1Eh		;	cp	30
	jp	z,loc_40AA	;	jp	z,l37
	cp	1Fh		;	cp	31
	jp	z,loc_40AF	;	jp	z,l39
	cp	20h		;	cp	32
	jp	z,loc_40AA	;	jp	z,l37
	cp	29h		;	cp	41
	jp	z,loc_40AA	;	jp	z,l37
	cp	2Dh		;	cp	45
	jp	z,loc_40AA	;	jp	z,l37
	cp	2Eh		;	cp	46
	jp	z,loc_40AA	;	jp	z,l37
	cp	2Fh		;	cp	47
	jp	z,loc_40AF	;	jp	z,l39
	cp	3Ah		;	cp	58
	jp	z,loc_40AF	;	jp	z,l39
	cp	3Ch		;	cp	60
	jp	z,loc_40AF	;	jp	z,l39
	cp	3Dh		;	cp	61
	jp	z,loc_40AF	;	jp	z,l39
	cp	3Fh		;	cp	63
	jp	z,loc_413A	;	jp	z,l59
loc_403B:			;			    <---+ Optimization 
	push	iy		;			    	; pass built a 
	jp	loc_3F70	;	jp	L11	    <---+ more optimal 
loc_4040:			;l32:				: code
	ld	hl,19f		;	ld	hl,19f		:
loc_4043:			;L12:				:
	ld	(_word_B015),hl	;	ld	(_word_B015),hl	:
	jr	loc_403B	;	jp	L11	    <---+
loc_4048:			;l29:
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	call	_sub_3B65	;	call	_sub_3B65
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
loc_4074:			;l63:
	ld	de,8		;	ld	de,8
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_408D	;	jp	nz,l64
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
loc_408D:			;l64:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	push	iy		;	push	iy
	call	_sub_3A79	;	call	_sub_3A79
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	jp	cret		;	jp	cret
loc_40AA:			;l40:
	ld	hl,29f		;	ld	hl,29f
	jr	loc_4043	;	jp	L12
loc_40AF:			;l42:
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	call	_sub_3BC6	;	call	_sub_3BC6
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	jr	loc_4074	;	jp	l63
loc_40DD:			;l49:
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	hl,0		;	ld	hl,0
	pop	bc		;	pop	bc
	or	a		;	or	a
	sbc	hl,bc		;	sbc	hl,bc
	pop	bc		;	pop	bc
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	sbc	hl,bc		;	sbc	hl,bc
loc_40FF:			;L8:
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	inc	hl		;	inc	hl
	pop	bc		;	pop	bc
	ld	(hl),c		;	ld	(hl),c
	inc	hl		;	inc	hl
	ld	(hl),b		;	ld	(hl),b
	jp	loc_4074	;	jp	l63
loc_4117:			;l38:
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	a,e		;	ld	a,e
	or	d		;	or	d
	or	l		;	or	l
	or	h		;	or	h
	ld	de,1		;			   <----+
	jr	z,loc_4133	;	jp	z,L2		; Could not find
	dec	de		;	ld	de,0		; operators in
loc_4133:			;L10:				; C language
	ld	a,d		;	ld	hl,0		; generating 
	rla			;	jp	L8		; code that
	sbc	a,a		;L2:				; exactly matches
	ld	l,a		;	ld	de,1		; binary codes
	ld	h,a		;	jp	L10		;
	jr	loc_40FF	;			   <----+
loc_413A:			;l62:
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	hl,0FFFFh	;	ld	de,-1	   <----+ At this point,
	pop	bc		;	ld	l,e		; from source
	or	a		;	ld	h,d		; in C, compiler
	sbc	hl,bc		;	call	alsub		; generates code
	pop	bc		;				; that performs
	ex	de,hl		;				; expected action,
	ld	hl,0FFFFh	;				; but differs from 
	sbc	hl,bc		;			   <----+ original image
	jr	loc_40FF	;	jp	L8

; End of function sub_3EAA OK+

	psect	data

p_3eaa_A9D0:
19:
	defb	99,111,110,115,116,97,110,116,32,114,101,108,97,116,105,111
	defb	110,97,108,32,101,120,112,114,101,115,115,105,111,110,0

p_3eaa_A9EF:
29:
	defb	99,111,110,115,116,97,110,116,32,114,101,108,97,116,105,111
	defb	110,97,108,32,101,120,112,114,101,115,115,105,111,110,0

	psect	text

; End of file 3EAA.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 415E.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_415E OK++
;=========================================================
	global	_sub_415E	;	global	_sub_415E
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_sub_3712	;	global	_sub_3712
	global	_word_AE11	;	global	_word_AE11
	global 	csv		;	global 	csv

	psect	text

_sub_415E:
; Disassembled version		; After compiling C source code
	call 	csv		;	call	csv
	call	_sub_3712	;	call	_sub_3712
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	(iy+0),43h	;	ld	(iy+0),67
	ld	hl,(_word_AE11)	;	ld	hl,(_word_AE11)
	ld	(iy+23),l	;	ld	(iy+17h),l
	ld	(iy+24),h	;	ld	(iy+18h),h
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	(iy+25),e	;	ld	(iy+19h),e
	ld	(iy+26),d	;	ld	(iy+1Ah),d
	ld	(iy+27),l	;	ld	(iy+1Bh),l
	ld	(iy+28),h	;	ld	(iy+1Ch),h
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret

; End of function sub_415E OK++

; End of file 415E.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 4192.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_4192 OK+
;
; Code generated from restored C language program is completely
; identical to binary image of executable file. To simplify
; comparison, code fragments generated from restored C program
; with labels were moved in accordance with its location in binary
; image of the executable file.
;=========================================================
	global	_sub_4192	;	global	_sub_4192
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_sub_306	;	global	_sub_306
	global	__ctype_	;	global	__ctype_
	global	_sub_415E	;	global	_sub_415E
	global	_atol		;	global	_atol
	global	_sub_3712	;	global	_sub_3712
	global	_sub_265	;	global	_sub_265
	global	_sub_C36	;	global	_sub_C36
	global	_sub_627	;	global	_sub_627
	global	_word_AED7	;	global	_word_AED7
	global	_allocmem	;	global	_allocmem
	global	_strlen		;	global	_strlen
	global	_strcpy		;	global	_strcpy
	global	_sub_174C	;	global	_sub_174C
	global	_sub_1B2	;	global	_sub_1B2
	global	_dopetab	;	global	_dopetab
	global	_sub_1B0C	;	global	_sub_1B0C
	global	_sub_19C1	;	global	_sub_19C1
	global	_sub_17E0	;	global	_sub_17E0
	global	_faterror	;	global	_faterror
	global	_sub_43EF	;	global	_sub_43EF

	psect	text

;	Disassembled version	; After compiling C source code
_sub_4192:				
	call	ncsv		;	call 	ncsv
	defw	-8		;	defw 	-8
loc_4197:			;l12:
	call	_sub_306	;	call	_sub_306
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	2,(hl)		;	bit	2,(hl)
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,(hl)		;	ld	a,(hl)
	jr	nz,loc_41CF	;	jp	nz,L7
	cp	2Dh		;	cp	45
	jp	nz,loc_423C	;	jp	nz,L10
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	bit	2,(hl)		;	bit	2,(hl)
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,(hl)		;	ld	a,(hl)
	jp	z,loc_423D	;	jp	z,L8
loc_41CF:			;L7:
	cp	2Dh		;	cp	45
	jr	nz,loc_41EA	;	jp	nz,l17
	ld	(ix+-8),1	;	ld	(ix+-8),1
	ld	(ix+-7),0	;	ld	(ix+-7),0
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	inc	hl		;	inc	hl
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	jr	loc_41F2	;	jp	l18
loc_41EA:			;l17:
	ld	(ix+-8),0	;	ld	(ix+-8),0
	ld	(ix+-7),0	;	ld	(ix+-7),0
loc_41F2:			;l18:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_atol		;	call	_atol
	ex	(sp),	hl	;	ex	(sp),hl
	push	de		;	push	de
	call	_sub_415E	;	call	_sub_415E
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(ix+-8)	;	ld	a,(ix+-8)
	or	(ix+-7)		;	or	(ix+-7)
	jr	z,loc_4236	;	jp	z,l20
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	push	de		;	push	de
	ld	hl,0		;	ld	hl,0
	pop	bc		;	pop	bc
	or	a		;	or	a
	sbc	hl,bc		;	sbc	hl,bc
	pop	bc		;	pop	bc
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	sbc	hl,bc		;	sbc	hl,bc
	ld	(iy+19h),e	;	ld	(iy+25),e
	ld	(iy+1Ah),d	;	ld	(iy+26),d
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
loc_4236:			;l20:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret
loc_423C:			;L10:
	ld	a,(hl)		;	ld	a,(hl)
loc_423D:			;L8:
	cp	5Fh		;	cp	95
	jr	z,loc_4257	;	jp	z,L3
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,(hl)		;	ld	a,(hl)
	ld	e,a		;	ld	e,a
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	d,a		;	ld	d,a
	ld	hl,__ctype_+1	;	ld	hl,__ctype_+1
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	and	3		;	and	3
	or	a		;	or	a
	jp	z,loc_42A7	;	jp	z,l21
loc_4257:			;L3:
	call	_sub_3712	;	call	_sub_3712
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	(hl),	42h	;	ld	(hl),66
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_sub_265	;	call	_sub_265
	pop	bc		;	pop	bc
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
	ex	de,hl		;	ex	de,hl
	ld	hl,0Fh		;	ld	hl,15
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+17h),c	;	ld	(iy+23),c
	ld	(iy+18h),b	;	ld	(iy+24),b
	ld	hl,0Dh		;	ld	hl,13
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+15h),c	;	ld	(iy+21),c
	ld	(iy+16h),b	;	ld	(iy+22),b
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	cp	3		;	cp	3
	jr	nz,loc_4236	;	jp	nz,l20
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	bit	1,(hl)		;	bit	1,(hl)
	jr	nz,loc_4236	;	jp	nz,l20
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	push	hl		;	push	hl
	call	_sub_C36	;	call	_sub_C36
	pop	bc		;	pop	bc
	jr	loc_4236	;	jp	l20
loc_42A7:			;l21:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,(hl)		;	ld	a,(hl)
	cp	60h		;	cp	96
	jr	nz,loc_42D8	;	jp	nz,l24
	call	_sub_3712	;	call	_sub_3712
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	push	hl		;	push	hl
	pop	de		;	pop	de
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_sub_627	;	call	_sub_627
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(iy+17h),l	;	ld	(iy+23),l
	ld	(iy+18h),h	;	ld	(iy+24),h
	ld	(iy+0),41h	;	ld	(iy+0),65
	jp	loc_4236	;	jp	l20
loc_42D8:			;l24:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	a,(hl)		;	ld	a,(hl)
	cp	2Eh		;	cp	46
	jp	nz,loc_4340	;	jp	nz,L9				
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	or	a		;	or	a
	dec	hl		;	dec	hl
	jp	z,loc_4340	;	jp	z,L9
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	cp	2Eh		;	cp	46
	jp	z,loc_433A	;	jp	z,l27
	call	_sub_3712	;	call	_sub_3712
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	hl,(_word_AED7)	;	ld	hl,(_word_AED7)
	ld	(iy+17h),l	;	ld	(iy+23),l
	ld	(iy+18h),h	;	ld	(iy+24),h
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	call	_strlen		;	call	_strlen
	ex	(sp),hl		;	ex	(sp),hl
	call	_allocmem	;	call	_allocmem
	pop	bc		;	pop	bc
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	inc	hl		;	inc	hl
	push	hl		;	push	hl
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_strcpy		;	call	_strcpy
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	call	_sub_174C	;	call	_sub_174C
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h	
	ld	(iy+0),44h	;	ld	(iy+0),68
	jp	loc_4236	;	jp	l20
loc_433A:			;l27:
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
loc_4340:			;L9:
	push	hl		;	push	hl
	call	_sub_1B2	;	call	_sub_1B2
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	h,a		;	ld	h,a
	ld	(ix+-8),l	;	ld	(ix+-8),l
	ld	(ix+-7),h	;	ld	(ix+-7),h
	ld	de,_dopetab	;	ld	de,_dopetab
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	and	0Ch		;	and	12
	ld	l,a		;	ld	l,a
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	ld	(ix+-6),l	;	ld	(ix+-6),l
	ld	(ix+-5),h	;	ld	(ix+-5),h
	ld	h,(ix+-5)	;	ld	h,(ix+-5)
	ld	a,h		;	ld	a,h
	or	a		;	or	a
	jp	nz,loc_4197	;	jp	nz,l12
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	jp	z,loc_43BC	;	jp	z,l37
	cp	4		;	cp	4
	jp	z,loc_43D1	;	jp	z,l38
	cp	8		;	cp	8
	jp	z,loc_43DA	;	jp	z,l39
	cp	0Ch		;	cp	12
	jp	nz,loc_4197	;	jp	nz,l12
	ld	l,(ix+-8)	;	ld	l,(ix+-8)
	ld	h,(ix+-7)	;	ld	h,(ix+-7)
	ld	a,h		;	ld	a,h
	or	a		;	or	a		^
	jr	nz,loc_43B4	;	jp	nz,l31		;
	ld	a,l		;	ld	a,l		; Code generated from     
	cp	34h		;	cp	52		; restored C language
	jr	z,loc_43AE	;	jp	z,l33		; program is completely
	cp	37h		;	cp	55		; identical to binary
	jr	z,loc_43A0	;	jp	z,l35		; image of executable
	cp	38h		;	cp	56		; file
	jr	z,loc_43A0	;	jp	z,l35		;
	cp	39h		;	cp	57	   <----+
	jr	nz,loc_43B4	;	jp	z,l36		; To simplify comparison,
				;	l36:			; code fragments generated
	call	_sub_17E0	;	call	_sub_17E0	; from restored C program
	jp	loc_4197	;	jp	l12		; with labels were moved
loc_43A0:			;l35:				; in accordance with its
	ld	l,(ix+-8)	;	ld	l,(ix+-8)	; location in binary image
	ld	h,(ix+-7)	;	ld	h,(ix+-7)	; of the executable file
	push	hl		;	push	hl		;
	call	_sub_19C1	;	call	_sub_19C1	v
	pop	bc		;	pop	bc
	jp	loc_4197	;	jp	l12
loc_43AE:			;l33:
	call	_sub_1B0C	;	call	_sub_1B0C
	jp	loc_4197	;	jp	l12
loc_43B4:			;l31:
	ld	hl,19f		;	ld	hl,19f
	push	hl		;	push	hl
	call	_faterror	;	call	_faterror
	pop	bc		;	pop	bc
loc_43BC:			;l37:
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
loc_43C0:			;L12:
	push	hl		;	push	hl
	ld	l,(ix+-8)	;	ld	l,(ix+-8)
	ld	h,(ix+-7)	;	ld	h,(ix+-7)
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret
loc_43D1:			;l38:
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	call	_sub_4192	;	call	_sub_4192
	jr	loc_43C0	;	jp	L12
loc_43DA:			;l39:
	call	_sub_4192	;	call	_sub_4192
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	call	_sub_4192	;	call	_sub_4192
	push	hl		;	push	hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	jr	loc_43C0	;	jp	L12

	psect	data

p_4192_1:
19:
	defb	69,120,112,114,101,115,115,105,111,110,32,101,114,114,111,114
	defb	0

	psect	text

; End of function sub_4192 OK+

; End of file 4192.asm

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 43EF.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_43EF OK+
;
; Generated code is completely identical, except for
; location of code of branches of "switch" operator.
;
; For easy visual comparison Some parts of compiled code are
; moved in accordance with order of disassembled code from
; binary image.
;=========================================================
	global	_sub_43EF	;	global	_sub_43EF
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_sub_3712	;	global	_sub_3712
	global	_word_AE11	;	global	_word_AE11
	global	_word_AF1B	;	global	_word_AF1B
	global	_word_AFE9	;	global	_word_AFE9
	global	_dopetab	;	global	_dopetab
	global	_nodesize	;	global	_nodesize
	global	_warning	;	global	_warning
	global	_sub_475C	;	global	_sub_475C
	global	wrelop		;	global	wrelop
	global	_sub_385B	;	global	_sub_385B
	global	_sub_37ED	;	global	_sub_37ED
	global	_sub_36E0	;	global	_sub_36E0
	global	_word_AF1D	;	global	_word_AF1D
	global	_word_AED9	;	global	_word_AED9

	psect	text

;	Disassembled version	; After compiling С source code	
_sub_43EF:
	call	ncsv		;	call	ncsv
	defw 	0FFFAh		;	defw	-6
	call	_sub_3712	;	call	_sub_3712
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(ix+6)	;	ld	a,(ix+6)
	ld	(iy+0),a	;	ld	(iy+0),a
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	and	30h		;	and	48
	ld	l,a		;	ld	l,a
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	or	a		;	or	a
	jr	nz,loc_443E	;	jp	nz,l17
	ld	a,l		;	ld	a,l
	cp	10h		;	cp	16
	jp	z,loc_4493	;	jp	z,l14
	cp	20h		;	cp	32
	jp	z,loc_449E	;	jp	z,l15
	cp	30h		;	cp	48
	jp	z,loc_44A3	;	jp	z,l16
loc_443E:			;l17:
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+17h),c	;	ld	(iy+23),c
	ld	(iy+18h),b	;	ld	(iy+24),b
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+15h),c	;	ld	(iy+21),c
	ld	(iy+16h),b	;	ld	(iy+22),b
loc_445E:			;l19:
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	3		;	cp	3
	jp	z,loc_4666	;	jp	z,l20
	cp	9		;	cp	9
	jp	z,loc_4605	;	jp	z,l24
	cp	0Ah		;	cp	10
	jp	z,loc_464B	;	jp	z,l28
	cp	0Dh		;	cp	13
	jp	z,loc_464B	;	jp	z,l28
	cp	14h		;	cp	20
	jp	z,loc_45E2	;	jp	z,l35
	cp	16h		;	cp	22
	jr	z,loc_44A8	;	jp	z,l29
	cp	1Bh		;	cp	27
	jp	z,loc_4652	;	jp	z,l32
	cp	1Ch		;	cp	28
	jp	z,loc_45E2	;	jp	z,l35
	cp	30h		;	cp	48
	jp	z,loc_45E2	;	jp	z,l35
loc_448D:			;l18:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret
loc_4493:			;l14:
	ld	hl,(_word_AE11)	;	ld	hl,(_word_AE11)
loc_4496:			;L5:
	ld	(iy+17h),l	;	ld	(iy+23),l
	ld	(iy+18h),h	;	ld	(iy+24),h
	jr	loc_445E	;	jp	l19
loc_449E:			;l15:
	ld	hl,(_word_AF1B)	;	ld	hl,(_word_AF1B)
	jr	loc_4496	;	jp	L5
loc_44A3:			;l16:
	ld	hl,(_word_AFE9)	;	ld	hl,(_word_AFE9)
	jr	loc_4496	;	jp	L5
loc_44A8:			;l29:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ld	a,(hl)		;	ld	a,(hl)
	cp	41h		;	cp	65
	jp	nz,loc_4519	;	jp	nz,l30
	ex	de,hl		;	ex	de,hl
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-2),c	;	ld	(ix+-2),c
	ld	(ix+-1),b	;	ld	(ix+-1),b
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(ix+0Ah)	;	ld	l,(ix+10)
	ld	h,(ix+0Bh)	;	ld	h,(ix+11)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	(iy+17h),l	;	ld	(iy+23),l
	ld	(iy+18h),h	;	ld	(iy+24),h
	ex	de,hl		;	ex	de,hl
	ld	hl,13h		;	ld	hl,19
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	add	hl,hl		;	add	hl,hl
	add	hl,bc		;	add	hl,bc
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ld	a,d		;	ld	a,d
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	l,a		;	ld	l,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(ix+0Ah)	;	ld	e,(ix+10)
	ld	d,(ix+0Bh)	;	ld	d,(ix+11)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	inc	hl		;	inc	hl
	pop	bc		;	pop	bc
	ld	(hl),c		;	ld	(hl),c
	inc	hl		;	inc	hl
	ld	(hl),b		;	ld	(hl),b
	jp	loc_448D	;	jp	l18
loc_4519:			;l30:
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	hl,13h		;	ld	hl,19
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	e,(ix+0Ah)	;	ld	e,(ix+10)
	ld	d,(ix+0Bh)	;	ld	d,(ix+11)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	add	hl,hl		;	add	hl,hl
	add	hl,bc		;	add	hl,bc
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-2),c	;	ld	(ix+-2),c
	ld	(ix+-1),b	;	ld	(ix+-1),b
	ld	e,c		;	ld	e,c
	ld	d,b		;	ld	d,b
	ld	hl,0Fh		;	ld	hl,15
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+17h),c	;	ld	(iy+23),c
	ld	(iy+18h),b	;	ld	(iy+24),b
	ld	hl,0Dh		;	ld	hl,13
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+15h),c	;	ld	(iy+21),c
	ld	(iy+16h),b	;	ld	(iy+22),b
	ld	hl,11h		;	ld	hl,17
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ld	a,d		;	ld	a,d
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	l,a		;	ld	l,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(ix+0Ah)	;	ld	e,(ix+10)
	ld	d,(ix+0Bh)	;	ld	d,(ix+11)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	inc	hl		;	inc	hl
	pop	bc		;	pop	bc
	ld	(hl),c		;	ld	(hl),c
	inc	hl		;	inc	hl
	ld	(hl),b		;	ld	(hl),b
	ld	e,(ix+0Ah)	;	ld	e,(ix+10)
	ld	d,(ix+0Bh)	;	ld	d,(ix+11)
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	de,(_word_AF1D)	;	ld	de,(_word_AF1D)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	bit	4,(hl)		;	bit	4,(hl)
	jp	z,loc_448D	;	jp	z,l18
	call	_sub_3712	;	call	_sub_3712
	ld	(ix+8),l	;	ld	(ix+8),l
	ld	(ix+9),h	;	ld	(ix+9),h
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	push	hl		;	push	hl
	ld	bc,1Dh		;	ld	bc,29
	ldir			;	ldir
	pop	hl		;	pop	hl
	ld	e,(ix+8)	;	ld	e,(ix+8)
	ld	d,(ix+9)	;	ld	d,(ix+9)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	push	iy		;	push	iy
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	(iy+0),47h	;	ld	(iy+0),71
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
				;	jp	L2
loc_45D9:			;L2:
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
	jp	loc_448D	;	jp	l18
loc_45E2:			;l35:
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+17h),c	;	ld	(iy+23),c
	ld	(iy+18h),b	;	ld	(iy+24),b
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+15h),c	;	ld	(iy+21),c
	ld	(iy+16h),b	;	ld	(iy+22),b
	jp	loc_448D	;	jp	l18
loc_4605:			;l24:
	ld	a,(iy+15h)	;	ld	a,(iy+21)
	or	(iy+16h)	;	or	(iy+22)
	jr	nz,loc_4642	;	jp	nz,l25
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	hl,0Bh		;	ld	hl,11
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ld	hl,1		;	ld	hl,1
	call	wrelop		;	call	wrelop
	jr	nc,loc_4642	;	jp	nc,l25
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	hl,0Dh		;	ld	hl,13
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+15h),c	;	ld	(iy+21),c
	ld	(iy+16h),b	;	ld	(iy+22),b
	ld	hl,0Fh		;	ld	hl,15
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+17h),c	;	ld	(iy+23),c
	ld	(iy+18h),b	;	ld	(iy+24),b
loc_4642:			;l25:
	push	iy		;	push	iy
	call	_sub_385B	;	call	_sub_385B
loc_4647:			;L4:
	pop	bc		;	pop	bc
	jp	loc_448D	;	jp	l18
loc_464B:			;l28:
	push	iy		;	push	iy
	call	_sub_37ED	;	call	_sub_37ED
	jr	loc_4647	;	jp	L4
loc_4652:			;l32:
	ld	hl,(_word_AED9)	;	ld	hl,(_word_AED9)
	ld	(iy+17h),l	;	ld	(iy+23),l
	ld	(iy+18h),h	;	ld	(iy+24),h
	ld	(iy+15h),1	;	ld	(iy+21),1
	ld	(iy+16h),0	;	ld	(iy+22),0
	jp	loc_448D	;	jp	l18
loc_4666:			;l20:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	a,(hl)		;	ld	a,(hl)
	cp	42h		;	cp	66
	jr	nz,loc_4691	;	jp	nz,l21
	ex	de,hl		;	ex	de,hl
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	hl,9		;	ld	hl,9
	add	hl,bc			;add	hl,bc
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ld	hl,0		;	ld	hl,0
	ld	(ix+-6),e	;	ld	(ix+-6),e
	ld	(ix+-5),d	;	ld	(ix+-5),d
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
	jr	loc_46AC	;	jp	l22
loc_4691:			;l21:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	ld	(ix+-6),e	;	ld	(ix+-6),e
	ld	(ix+-5),d	;	ld	(ix+-5),d
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h
loc_46AC:			;l22:
	ld	a,(ix+-6)	;	ld	a,(ix+-6)
	or	(ix+-5)		;	or	(ix+-5)
	or	(ix+-4)		;	or	(ix+-4)
	or	(ix+-3)		;	or	(ix+-3)
	jr	nz,loc_46C2	;	jp	nz,l23
	ld	hl,19f		;	ld	hl,19f
	push	hl		;	push	hl
	call	_warning	;	call	_warning
	pop	bc		;	pop	bc
loc_46C2:			;l23:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
	ld	(iy+0),43h	;	ld	(iy+0),67
	ld	hl,(_word_AE11)	;	ld	hl,(_word_AE11)
	ld	(iy+17h),l	;	ld	(iy+23),l
	ld	(iy+18h),h	;	ld	(iy+24),h
	ld	(iy+15h),0	;	ld	(iy+21),0
	ld	(iy+16h),0	;	ld	(iy+22),0
	ld	e,(ix+-6)	;	ld	e,(ix+-6)
	ld	d,(ix+-5)	;	ld	d,(ix+-5)
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	ld	(iy+19h),e	;	ld	(iy+25),e
	ld	(iy+1Ah),d	;	ld	(iy+26),d
	jp	loc_45D9	;	(jp	L2)

	psect	data

p_43ef_AA1F:
	;	'Sizeof yields 0'
19:	defb	83,105,122,101,111,102,32,121,105,101,108,100,115,32,48,0


	psect	text

; End of function sub_43EF

; Endof file 43EF.as

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 46F7.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_46F7 OK++
;=========================================================
	global	_sub_46F7	;	global	_sub_46F7
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	aland		;	global	aland
	global	arelop		;	global	arelop
	global	asalrsh		;	global	asalrsh
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code	
_sub_46F7:
	call	csv		;	call	csv
	push	hl		;	push	hl
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	push	de		;	push	de
	ex	de,hl		;	ex	de,hl
	ld	bc,0FFFFh	;	ld	bc,-1
	add	hl,bc		;	add	hl,bc
	ex	de,hl		;	ex	de,hl
	adc	hl,bc		;	adc	hl,bc
	call	aland		;	call	aland
	ld	a,e		;	ld	a,e
	or	d		;	or	d
	or	l		;	or	l
	or	h		;	or	h
	jr	nz,loc_4734	;	jp	nz,L1
	ld	de,1		;	ld	de,1
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(ix+6)	;	ld	e,(ix+6)
	ld	d,(ix+7)	;	ld	d,(ix+7)
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	call	arelop		;	call	arelop
	jp	p,loc_4739	;	jp	p,l2
loc_4734:			;L1:
	ld	l,0		;	ld	l,0
	jp	cret		;	jp	cret
loc_4739:			;l2:
	ld	(ix+-1),0	;	ld	(ix+-1),0
	jr	loc_4742	;	jp	l3
loc_473F:			;l4:
	inc	(ix+-1)		;	inc	(ix+-1)
loc_4742:			;l3:
	ld	b,1		;	ld	b,1
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,6		;	ld	hl,6
	add	hl,de		;	add	hl,de
	call	asalrsh		;	call	asalrsh
	ld	a,e		;	ld	a,e
	or	d		;	or	d
	or	l		;	or	l
	or	h		;	or	h
	jr	nz,loc_473F	;	jp	nz,l4
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	inc	a		;	inc	a
	ld	l,a		;	ld	l,a
	jp	cret		;	jp	cret

; End of function sub_46F7 OK++

; End of file 46F7.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 475C.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_475C OK++
;=========================================================
	global	_sub_475C	;	global	_sub_475C
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_dopetab	;	global	_dopetab
	global	_sub_36E0	;	global	_sub_36E0
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_475C:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	and	0Ch		;	and	12
	ld	l,a		;	ld	l,a
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_47AA	;	jp	z,l12
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
	ld	de,8		;	ld	de,8
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_47AA	;	jp	nz,l12
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
loc_47AA:			;l12:
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	jp	cret		;	jp	cret

; End of function sub_475C OK++

; End of file 475C.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 47B2.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_47B2 OK+
;
; Could not find operators in C language generating code
; that exactly matches binary codes
;=========================================================
	global	_sub_47B2	;	global	_sub_47B2
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	arelop		;	global	arelop
	global	_nodesize	;	global	_nodesize
	global	_sub_3968	;	global	_sub_3968
	global	_sub_14F3	;	global	_sub_14F3
	global	_sub_2C5E	;	global	_sub_2C5E
	global	shll		;	global	shll
	global	lland		;	global	lland
	global	asalor		;	global	asalor
	global	_sub_46F7	;	global	_sub_46F7
	global 	csv		;	global 	csv

	psect	text

;	Disassembled version	; After compiling C source code
_sub_47B2:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	dec	hl		;	dec	hl
	xor	a		;	xor	a
	cp	h		;	cp	h
	jp	c,loc_4851 ;r0	;	jp	c,L50	;r0
	jr	nz,loc_47D4	;	jp	nz,L1
	ld	a,1Dh		;	ld	a,29
	cp	l		;	cp	l
	jp	c,loc_4851 ;r0	;	jp	c,L50	;r0
loc_47D4:			;L1:
	add	hl,hl		;	add	hl,hl
	ld	de,S158		;	ld	de,S160
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	jp	(hl)		;	jp	(hl)
loc_47DE:			;l14:			; case 12
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_47E7:			;l15:			; case 28
	ld	de,1		;	ld	de,1
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	call	arelop		;	call	arelop
	jp	m,loc_4A59 ;r0	;	jp	m,L50	;r0
	ld	de,3		;	ld	de,3
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	call	arelop		;	call	arelop
	jp	p,loc_4A59 ;r0	;	jp	p,L50	;r0
loc_481B:			;L46:
	ld	hl,1		;	ld	l,1
	jp	cret		;	jp	cret
loc_4821:			;l18:			; case 10
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_482A:			;l19:			; case 5
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,2		;	ld	de,2
loc_4833:			;
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_4A59 ;r0	;	jp	nz,L50	;r0
				;l21:
	push	iy		;	push	iy
	call	_sub_3968	;	call	_sub_3968
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
loc_4841:			;L57:
	jp	nz,loc_4A59 ;r0	;	jp	nz,L50	;r0
	jr	loc_481B    ;r1	;	jp	L46	;r1
loc_4846:			;l23:			; case 6
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	jr	nz,loc_485F	;	jp	nz,l25
loc_4851:			;L50:
	ld	l,0		;	ld	l,0
	jp	cret		;	jp	cret
loc_4856:			;l26:			; case 11
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
				;l25:
loc_485F:			;l27:			; case 4
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,4		;	ld	de,4
	jr	loc_4833	;	or	a
				;	sbc	hl,de
				;	jp	nz,l21
				;	jp	L50	;r0
loc_486A:			;l29:			; case 27
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_4873:			;l30:			; case 3
	push	iy		;	push	iy
	call	_sub_3968	;	call	_sub_3968
loc_4878:			;L62:
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret
loc_487C:			;l31:			; case 13
	ld	a,(iy+19h)	;	ld	a,(iy+25)
	cp	8		;	cp	8
	jr	z,loc_481B  ;r1	;	jp	z,L46	;r1
	cp	9		;	cp	9
	jr	loc_4841	;	jp	L57	;if(nz) r0 else r1
loc_4887:			;l34:			; case 14
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	call	_sub_2C5E	;	call	_sub_2C5E
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-4),e	;	ld	(ix+-4),e
	ld	(ix+-3),d	;	ld	(ix+-3),d
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	de,0FF80h	;	ld	de,-128
	ld	hl,0FFFFh	;	ld	hl,-1
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	call	arelop		;	call	arelop
	jp	m,loc_4A59 ;r0	;	jp	m,L50	;r0
	ld	de,7Dh		;	ld	de,125
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
loc_48D7:			;L53:
	call	arelop		;	call	arelop
	jp	p,loc_4A59 ;r0	;	jp	p,L50	;r0
	jp	loc_481B   ;r1	;	jp	L46	;r1
loc_48E0:	; case 25	;l37:		; case 25
	ld	de,1		;	ld	de,1
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	call	arelop		;	call	arelop
	jp	m,loc_4A59 ;r0	;	jp	m,L50	;r0
	ld	de,5		;	ld	de,5
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	jr	loc_48D7	;	jp	L53
loc_4910:			;l40:			; case 26
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	ld	(ix+-4),e	;	ld	(ix+-4),e
	ld	(ix+-3),d	;	ld	(ix+-3),d
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	2		;	cp	2
	jr	nz,loc_4986	;	jp	nz,l42
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	push	de		;	push	de
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	add	hl,hl		;	add	hl,hl
	add	hl,hl		;	add	hl,hl
	add	hl,hl		;	add	hl,hl
	ld	b,l		;	ld	b,l
	ld	hl,1		;	ld	hl,1
	call	shll		;	call	shll
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	call	lland		;	call	lland
	ld	a,e		;	ld	a,e
	or	d		;	or	d
	or	l		;	or	l
	or	h		;	or	h
	jr	z,loc_4986	;	jp	z,l42
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	add	hl,hl		;	add	hl,hl
	add	hl,hl		;	add	hl,hl
	add	hl,hl		;	add	hl,hl
	ld	b,l		;	ld	b,l
	ld	hl,1		;	ld	hl,1
	call	shll		;	call	shll
	dec	hl		;	dec	hl
	ex	de,hl		;	ex	de,hl
	ld	hl, -1		;	ld	hl,-1
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	de		;	push	de
	push	ix		;	push	ix
	pop	hl		;	pop	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	dec	hl		;	dec	hl
	call	asalor		;	call	asalor
loc_4986:			;l42:
	bit	7,(ix+-1)	;	bit	7,(ix+-4)
	jp	z,loc_4A59 ;r0	;	jp	z,L50	;r0
	ld	de, -4		;	ld	de,-4
	ld	hl, -1		;	ld	hl,-1
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(ix+-4)	;	ld	e,(ix+-4)
	ld	d,(ix+-3)	;	ld	d,(ix+-3)
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	call	arelop		;	call	arelop
	jp	m,loc_4A59 ;r0	;	jp	m,L50	;r0
	jp	loc_481B   ;r1	;	jp	L46	;r1
loc_49AA:			;l46:			; case 9
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_49B3:			;l47:			; case 2
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,1		;	ld	de,1
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_4A59 ;r0	;	jp	nz,L50	;r0
	push	iy		;	push	iy
	call	_sub_3968	;	call	_sub_3968
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	jp	loc_4841	;L61:			; if(nz) r0 else r1
				;	jp	z,L46	; r1
				;	jp	L50	; r0
loc_49CD:			;l50:			; case 20
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,4		;	ld	de,4
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_4851 ;r0	;	jp	nz,L50	; r0
loc_49DC:			;l52:
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	jr	nz,loc_49FB	;	jp	nz,l54
	jp	loc_4851 ;r0	;	jp	L50	; r0
loc_49EA:			;l55:			; case 16
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,2		;	ld	de,2
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_49DC	;	jp	z,l52
	jp	loc_4851 ;r0	;	jp	L50	; r0
loc_49FB:			;l54:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	jp	z,loc_4851 ;r0	;	jp	z,L50	; r0
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	2		;	cp	2
loc_4A15:			;
	jp	z,loc_481B  ;r1	;	jp	z,L46	; r1
				;l59:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	2		;	cp	2
	jp	loc_4841	;	jp	L58	;if(nz) r0 else r1
loc_4A29:	; case 29	;l61:		; case 29
	ld	a,(iy+19h)	;	ld	a,(iy+25)
	or	(iy+1Ah)	;	or	(iy+26)
	or	(iy+1Bh)	;	or	(iy+27)
	or	(iy+1Ch)	;	or	(iy+28)
loc_4A35:			;	jp	L57	;if(nz) r0 else r1
	ld	hl,1		;		   <----+ Could not find operators
	jp	z,cret		;			; in C language generating
	dec	hl		;			; code that exactly matches
	jp	cret		;		   <----+ binary codes
loc_4A3F:			;l63:			; case 19
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,4		;	ld	de,4
loc_4A48:			;
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jp	nz,loc_4851 ;r0	;	jp	nz,L50	; r0
				;l65:
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	1		;	cp	1
	jr	z,loc_4A6A	;	jp	nz,L50	; r0
				;	ld	l,(iy+25)
				;	ld	h,(iy+26)
				;	push	hl
				;	call	_sub_14F3
				;	pop	bc
				;	ld	a,l
				;	cp	1
				;	jp	L57
loc_4A59:			;
	ld	hl,0		;
	jp	cret		;
loc_4A5F:			;l68:			; case 17
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,2		;	ld	de,2
	jr	loc_4A48	;	or	a
				;	sbc	hl,de
				;	jp	z,l65
				;	jp	L50	; r0
loc_4A6A:			;
	ld	l,(iy+19h)	;
	ld	h,(iy+1Ah)	;
	push	hl		;
	call	_sub_14F3	;
	pop	bc		;
	ld	a,l		;
	cp	1		;
	jp	loc_4841	;
				;
loc_4A7B:			;l70:			; case15
	ld	de,1		;	ld	de,1
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	call	arelop		;	call	arelop
				;	jp	L57	if(nz) r0 else r1
	ld	bc,1		;			   <----+ Could not find
	jr	z,loc_4A98	;				; operators in C
	dec	bc		;				; language generating
loc_4A98:			;				; code that exactly
	ld	l,c		;				; matches binary
	jp	cret		;			   <----+ codes
loc_4A9C:	; case 0	;l72:			; case 0
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
loc_4AAE:			;L45:
	push	hl		;	push	hl
	push	de		;	push	de
	call	_sub_46F7	;	call	_sub_46F7
	pop	bc		;	pop	bc
	jp	loc_4878	;	jp	L59
loc_4AB7:			;l73:			; case 1
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	hl, -1		;	ld	de,-1	   <----+ At this point,
	pop	bc		;	ld	l,e		; from source
	or	a		;	ld	h,d		; in C, compiler
	sbc	hl,bc		;	call	alsub		; generates code
	pop	bc		;				; that performs
	ex	de,hl		;				; expected action,
	ld	hl, -1		;				; but differs from 
	sbc	hl,bc		;			   <----+ original image
	jr	loc_4AAE	;	jp	L45
loc_4ADB:			;l74:			; case 24
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,4		;	ld	de,4
loc_4AE4:			;L22:
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_4B02	;	jp	z,l76
	jp	loc_4851 ;r0	;	jp	L50	;r0
loc_4AEC:			;l77:			; case 18
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,2		;	ld	de,2
	jr	loc_4AE4	;	jp	L22
loc_4AF7:			;l79:			; case 8
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,1		;	ld	de,1
	jr	loc_4AE4	;	or	a	   <----+ Code
				;	sbc	hl,de		; is
				;	jp	nz,L50 ;r0 <----+ different
loc_4B02:			;l76:
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	1		;	cp	1
	jr	z,loc_4B19	;	jp	z,l81
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	2		;	cp	2
	jp	nz,loc_4A59 ;r0	;	jp	nz,L50	; r0
loc_4B19:			;l81:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	jp	loc_4841	;	jp	L58	;if(nz) r0 else r1
loc_4B2A:			;l84:			; case 23
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,1		;	ld	de,1
loc_4B38:			;L59:
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	z,loc_4B60	;	jp	z,l86
	jp	loc_4851    ;r0	;	jp	L50	; r0
loc_4B40:			;l87:			; case 22
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,2		;	ld	de,2
	jr	loc_4B38	;	jp	L56
loc_4B50:			;l89:			; case 21
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	ld	de,4		;	ld	de,4
	jr	loc_4B38	;	jp	L56
loc_4B60:			;l86:
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	jp	nz,loc_4A59 ;r0	;	jp	nz,L50	; r0
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	1		;	cp	1
	jp	loc_4A15	;	jp	nz,l59	   <----+ Code is
				;	jp	L46   ; r1 <----+ different
loc_4B7D:			;l93:		      ; case 7
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	jp	loc_4A35	;	jp	L57	;if(nz) r0 else r1

	psect	data

p_47b2_AA2F_sw:
S158:
	defw	loc_4A9C ;0	;	defw	l72
	defw	loc_4AB7 ;1	;	defw	l73
	defw	loc_49B3 ;2	;	defw	l47
	defw	loc_4873 ;3	;	defw	l30
	defw	loc_485F ;4	;	defw	l27
	defw	loc_482A ;5	;	defw	l19
	defw	loc_4846 ;6	;	defw	l23
	defw	loc_4B7D ;7	;	defw	l93
	defw	loc_4AF7 ;8	;	defw	l79
	defw	loc_49AA ;9	;	defw	l46
	defw	loc_4821 ;10	;	defw	l18
	defw	loc_4856 ;11	;	defw	l26
	defw	loc_47DE ;12	;	defw	l14
	defw	loc_487C ;13	;	defw	l31
	defw	loc_4887 ;14	;	defw	l34
	defw	loc_4A7B ;15	;	defw	l70
	defw	loc_49EA ;16	;	defw	l55
	defw	loc_4A5F ;17	;	defw	l68
	defw	loc_4AEC ;18	;	defw	l77
	defw	loc_4A3F ;19	;	defw	l63
	defw	loc_49CD ;20	;	defw	l50
	defw	loc_4B50 ;21	;	defw	l89
	defw	loc_4B40 ;22	;	defw	l87
	defw	loc_4B2A ;23	;	defw	l84
	defw	loc_4ADB ;24	;	defw	l74
	defw	loc_48E0 ;25	;	defw	l37
	defw	loc_4910 ;26	;	defw	l40
	defw	loc_486A ;27	;	defw	l29
	defw	loc_47E7 ;28	;	defw	l15
	defw	loc_4A29 ;29	;	defw	l61

	psect	text

; End of function sub_47B2 OK+

; End of file 47B2.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 4B89.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_4B89 OK++
;
; Restored function sub_4B89 is assigned the uchar type to avoid
; casting type when it is called in other functions (sub_4C12,
; sub_54B6) and generating code corresponding to binary image.
; For this reason, return value is passed in register "l".
;=========================================================
	global	_sub_4B89	;	global	_sub_4B89
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_dopetab	;	global	_dopetab
	global 	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_4B89:
	call	csv		;	call 	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	4,c		;	bit	4,c
	jr	nz,loc_4BDF	;	jp	nz,L3	   <----+ Different
	ld	a,(iy+0)	;	ld	a,(iy+0)	: jump
	cp	9		;	cp	9		: address
	jr	nz,loc_4BB8	;	jp	nz,L1		:
	ld	l,(iy+25)	;	ld	l,(iy+25)	:
	ld	h,(iy+26)	;	ld	h,(iy+26)	:
	ld	a,(hl)		;	ld	a,(hl)		:
	cp	66		;	cp	66		:
	jr	z,loc_4BDF	;	jp	z,L3	   <----+
loc_4BB8:			;L1:				:
	ld	a,(iy+0)	;	ld	a,(iy+0)	:
	cp	14		;	cp	14		:
	jr	nz,loc_4BD9	;	jp	nz,l14	   <----+
	ld	l,(iy+27)	;	ld	l,(iy+27)	:
	ld	h,(iy+28)	;	ld	h,(iy+28)	:
	ld	a,(hl)		;	ld	a,(hl)		:
	cp	67		;	cp	67		:
	jr	nz,loc_4BD9	;	jp	nz,l14	   <----+
	ld	l,(iy+25)	;	ld	l,(iy+25)
	ld	h,(iy+26)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_4B89	;	call	_sub_4B89
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l		; Different
	or	a		;	or	a		; conditions and
	jr	nz,loc_4BDF	;	jp	z,l14	   <----+ jump address
loc_4BD9:			;L3:
	ld	hl,0		;	ld	l,1	   <----+ Different
	jp	cret		;	jp	cret		: assigned
loc_4BDF:			;l14:				: values
	ld	hl,1		;	ld	l,0	   <----+
	jp	cret		;	jp	cret

; End of function sub_4B89 OK+

; End of file 4B89.as

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 4BE5.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_4BE5 OK++
;=========================================================
	global	_sub_4BE5	;	global	_sub_4BE5
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_4BE5:
	call 	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	67		;	cp	43h
	jr	nz,loc_4C0C	;	jp	nz,L13
	ld	a,(iy+25)	;	ld	a,(iy+19h)
	or	(iy+26)		;	or	(iy+1Ah)
	or	(iy+27)		;	or	(iy+1Bh)
	or	(iy+28)		;	or	(iy+1Ch)
	jr	nz,loc_4C0C	;	jr	nz,L13
	ld	hl,1		;	ld	hl,1
	jp	cret		;	jp	cret
loc_4C0C:			;L13:
	ld	hl,0		;	ld	hl,0
	jp	cret		;	jp	cret

; End of function sub_4BE5 OK++

;=========================================================
; sub_4C12 OK++
;=========================================================
	global	_sub_4C12	;	global	_sub_4C12
	global	_dopetab	;	global	_dopetab
	global	_sub_4B89	;	global	_sub_4B89
	global 	csv

; Disassembled version		; After compiling C source code
_sub_4C12:
	call	csv		;	call 	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	9		;	cp	9
	jr	nz,loc_4C36	;	jp	nz,l16
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	a,(hl)		;	ld	a,(hl)
	cp	42h		;	cp	66
	jr	nz,loc_4C36	;	jp	nz,l16
loc_4C30:			;L1:
	ld	hl,1		;	ld	hl,1
	jp	cret		;	jp	cret
loc_4C36:			;l16:
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	4,c		;	bit	4,c
	jr	z,loc_4C4D	;	jp	z,l18
	ld	hl,0		;	ld	hl,0
	jp	cret		;	jp	cret
loc_4C4D:			;l18:
	push	iy		;	push	iy
	call	_sub_4B89	;	call	_sub_4B89
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	h
	jr	nz,loc_4C30	;	jp	nz,L1
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	and	0Fh		;	and	15
	ld	l,a		;	ld	l,a
	xor	a		;	xor	a
	ld	h,a		;	ld	h,a
	jp	cret		;	jp	cret

; End of function sub_4C12 OK++

; End of file 4BE5.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 4C6D.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_4C6D OK+
;
; Could not find operators in C language generating code
; that exactly matches binary codes
;=========================================================
	global	_sub_4C6D	;	global	_sub_4C6D
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_4C6D:
	call	csv		;	call	csv
	ld	e, (ix+6)	;	ld	e,(ix+6)
	ld	d, (ix+7)	;	ld	d,(ix+7)
	ld	hl, 19h		;	ld	hl,25
	add	hl, de		;	add	hl,de
	ld	a, (hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h, (hl)		;	ld	h,(hl)
	ld	l, a		;	ld	l,a
	ld	a, (hl)		;	ld	a,(hl)
	cp	45h 		;	cp	69
	ld	hl, 1		;	jp	nz,l12	   <----+ Could not find
	jp	z, cret		;	ld	l,1		; operators in C
	dec	hl		;	jp	cret		; language generating
	jp	cret		;l12:				; code that exactly
				;	ld	l,0		; matches binary
				;	jp	cret	   <----+ codes

; End of function sub_4C6D OK+

; End of file 4C6D.as


	*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 4C8B.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_4C8B OK++
;=========================================================
	global	_sub_4C8B	;	global	_sub_4C8B
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_sub_36E0	;	global	_sub_36E0
	global	_dopetab	;	global	_dopetab
	global	_sub_605E	;	global	_sub_605E
	global	_sub_43EF	;	global	_sub_43EF
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_4C8B:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	a,(hl)		;	ld	a,(hl)
	cp	1		;	cp	1
	jr	nz,loc_4CD6	;	jp	nz,l12
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-2),c	;	ld	(ix+-2),c
	ld	(ix+-1),b	;	ld	(ix+-1),b
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
loc_4CCD:			;L4:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	jp	cret		;	jp	cret
loc_4CD6:			;l12:
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	a,c		;	ld	a,c
	and	2Ch		;	and	44
	ld	l,a		;	ld	l,a
	ld	a,b		;	ld	a,b
	and	1		;	and	1
	ld	h,a		;	ld	h,a
	ld	de,28h		;	ld	de,40
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_4D14	;	jp	nz,l13
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	l,(hl)		;	ld	l,(hl)
	ld	h, 0		;	ld	h,0
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_605E	;	call	_sub_605E
	pop	bc		;	pop	bc
loc_4D0A:			;L5:
	ld	a,l		;	ld	a,l
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	(hl),a		;	ld	(hl),a
	jr	loc_4CCD	;	jp	L4
loc_4D14:			;l13:
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	5,c		;	bit	5,c
	jp	z,loc_4D9D	;	jp	z,l14
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,1		;	ld	hl,1
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,1		;	ld	hl,1
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	a,(hl)		;	ld	a,(hl)
	cp	8		;	cp	8
	jr	z,loc_4D97	;	jp	z,L2
	ld	hl,8		;	ld	hl,8
	jp	loc_4D0A	;	jp	L5
loc_4D97:			;L2:
	ld	hl,3Dh		;	ld	hl,61
	jp	loc_4D0A	;	jp	L5
loc_4D9D:			;l14:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret

; End of function sub_4C8B OK++

;=========================================================
; sub_4DA3 OK++
;=========================================================
	global	_sub_4DA3	;	global	_sub_4DA3
	global	_sub_415E	;	global	_sub_415E
	global	_sub_475C	;	global	_sub_475C
	global	_sub_385B	;	global	_sub_385B
	global	_sub_3712	;	global	_sub_3712
	global 	csv		;	global 	csv

; Disassembled version		; After compiling C source code
_sub_4DA3:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	cp	1		;	cp	1
	jp	nz,loc_4E5C	;	jp	nz,L6
	ld	hl,11h		;	ld	hl,17
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ld	a,d		;	ld	a,d
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	l,a		;	ld	l,a
	ld	h,a		;	ld	h,a
	push	hl		;	push	hl
	push	de		;	push	de
	call	_sub_415E	;	call	_sub_415E
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ex	de,hl		;	ex	de,hl
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	e,(iy+15h)	;	ld	e,(iy+21)
	ld	d,(iy+16h)	;	ld	d,(iy+22)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	push	iy		;	push	iy
	call	_sub_475C	;	call	_sub_475C
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_385B	;	call	_sub_385B
	pop	bc		;	pop	bc
	call	_sub_3712	;	call	_sub_3712
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	iy		;	push	iy
	pop	de		;	pop	de
	push	hl		;	push	hl
	ld	bc,1Dh		;	ld	bc,29
	ldir			;	ldir
	pop	hl		;	pop	hl
	ld	(iy+0),45h	;	ld	(iy+0),69
	ld	(iy+19h),8	;	ld	(iy+25),8
	ld	(iy+1Ah),0	;	ld	(iy+26),0
	ld	(iy+1Bh),0	;	ld	(iy+27),0
	ld	(iy+1Ch),0	;	ld	(iy+28),0
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	push	iy		;	push	iy
	ld	hl,0Eh		;	ld	hl,14
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	hl,0		;	ld	hl,0
	ex	(sp),hl		;	ex	(sp),hl
	push	iy		;	push	iy
	ld	hl,0Dh		;	ld	hl,13
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret
loc_4E5C:			;L6:
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	cp	2		;	cp	2
	jr	nz,loc_4E87	;	jp	nz,l17
	ld	(iy+0),45h	;	ld	(iy+0),69
	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	hl,13h		;	ld	hl,19
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ld	a,d		;	ld	a,d
	rla			;	rla
	sbc	a,a		;	sbc	a,a
	ld	l,a		;	ld	l,a
	ld	h,a		;	ld	h,a
	ld	(iy+19h),e	;	ld	(iy+25),e
	ld	(iy+1Ah),d	;	ld	(iy+26),d
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
loc_4E87:			;l17:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret

; End of function sub_4DA3 OK++

;=========================================================
; sub_4E8D OK++
;=========================================================
	global	_sub_4E8D	;	global	_sub_4E8D
	global 	csv		;	global 	csv

; Disassembled version		; After compiling C source code
_sub_4E8D:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	4,b		;	bit	4,b
	jr	z,loc_4EFE	;	jp	z,l19
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	e,(iy+15h)	;	ld	e,(iy+21)
	ld	d,(iy+16h)	;	ld	d,(iy+22)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	ld	hl,9		;	ld	hl,9
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
	jr	loc_4F4F	;	jp	l20
loc_4EFE:			;l19:
	call	_sub_3712	;	call	_sub_3712
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	push	hl		;	push	hl
	ld	bc,1Dh		;	ld	bc,29
	ldir			;	ldir
	pop	hl		;	pop	hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	(hl),41h	;	ld	(hl),65
	push	hl		;	push	hl
	call	_sub_385B	;	call	_sub_385B
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ex	(sp),hl		;	ex	(sp),hl
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	ld	hl,9		;	ld	hl,9
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	ld	hl,14h		;	ld	hl,20
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
loc_4F4F:			;l20:
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+17h),c	;	ld	(iy+23),c
	ld	(iy+18h),b	;	ld	(iy+24),b
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+15h),c	;	ld	(iy+21),c
	ld	(iy+16h),b	;	ld	(iy+22),b
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	e,c		;	ld	e,c
	ld	d,b		;	ld	d,b
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	(iy+0),0Eh	;	ld	(iy+0),14
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	iy		;	push	iy
	ld	hl,0Dh		;	ld	hl,13
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret

; End of function sub_4E8D OK++

;=========================================================
; sub_4FA8 OK++
;=========================================================
	global	_sub_4FA8	;	global	_sub_4FA8
	global 	csv		;	global 	csv

; Disassembled version		; After compiling C source code
_sub_4FA8:
	call 	csv		;	call	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(iy+27)	;	ld	l,(iy+1Bh)
	ld	h,(iy+28)	;	ld	h,(iy+1Ch)
	push	hl		;	push	hl
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(iy+25)	;	ld	l,(iy+19h)
	ld	h,(iy+26)	;	ld	h,(iy+1Ah)
	jp	cret		;	jp	cret

; End of function sub_4FA8 OK++

; End of file 4C8B.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 4FCE.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_4FCE OK+
;
; Compiler generates identical code from restored source
; program in C, however, location of branches associated
; with case constants is different from original.
; This does not affect the function.
;=========================================================
	global	_sub_4FCE	;	global	_sub_4FCE
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	asalsub		;	global	asalsub
	global	_sub_14F3	;	global	_sub_14F3
	global	_byte_B013	;	global	_byte_B013
	global	_sub_46F7	;	global	_sub_46F7
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_4FCE:
	call	csv		;	call 	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	6		;	cp	6
	jp	z,loc_5084	;	jp	z,l14
	cp	0Ch		;	cp	12
	jr	z,loc_503B	;	jp	z,l15
	cp	18h		;	cp	24
	jr	z,loc_5047	;	jp	z,l16
	cp	22h		;	cp	34
	jp	z,loc_5069	;	jp	z,l18
	cp	24h		;	cp	36
	jr	z,loc_5041	;	jp	z,l19
	cp	27h		;	cp	39
	jr	z,loc_5058	;	jp	z,l20
loc_4FF7:			;l12:
	ld	a,1		;	ld	a,1
	ld	(_byte_B013),a	;	ld	(_byte_B013),a
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	call	_sub_46F7	;	call	_sub_46F7
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	e,l		;	ld	e,l
	ld	d,0		;	ld	d,0
	ld	hl,-1		;	ld	hl,-1
	add	hl,de		;	add	hl,de
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	inc	hl		;	inc	hl
	pop	bc		;	pop	bc
	ld	(hl),c		;	ld	(hl),c
	inc	hl		;	inc	hl
	ld	(hl),b		;	ld	(hl),b
loc_5035:			;L4:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret
loc_503B:			;l15:
	ld	(iy+0),1Fh	;	ld	(iy+0),31
	jr	loc_4FF7	;	jp	l12
loc_5041:			;l19:
	ld	(iy+0),28h	;	ld	(iy+0),40
	jr	loc_4FF7	;	jp	l12
loc_5047:			;l16:
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	2		;	cp	2
	jr	nz,loc_5035	;	jp	nz,L4
	ld	(iy+0),2Fh	;	ld	(iy+0),47
	jr	loc_4FF7	;	jp	l12
loc_5058:			;l20:
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	2		;	cp	2
	jr	nz,loc_5035	;	jp	nz,L4
	ld	(iy+0),2Ah	;	ld	(iy+0),42
	jr	loc_4FF7	;	jp	l12
loc_5069:			;l18:
	ld	(iy+0),23h	;	ld	(iy+0),35
				;	jp	L5
				;l14:
				;	ld	(iy+0),7
loc_506D:			;L5:
	ld	de,1		;	ld	de,1
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	call	asalsub		;	call	asalsub
	jr	loc_5035	;	jp	L4
loc_5084:			;
	ld	(iy+0),7	;
	jr	loc_506D	;

; End of function sub_4FCE OK+

; End of file 4FCE.as
*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 508A.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_508A OK++
;=========================================================
	global	_sub_508A	;	global	_sub_508A
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_sub_14F3	;	global	_sub_14F3
	global	_sub_36E0	;	global	_sub_36E0
	global	_sprintf	;	global	_sprintf
	global	_allocmem	;	global	_allocmem
	global	_strlen		;	global	_strlen
	global	_strcpy		;	global	_strcpy
	global	_sub_174C	;	global	_sub_174C
	global	_dopetab	;	global	_dopetab
	global	_nodesize	;	global	_nodesize
	global	wrelop		;	global	wrelop
	global	_sub_6246	;	global	_sub_6246
	global	_sub_475C	;	global	_sub_475C
	global	wrelop		;	global	wrelop
	global	wrelop		;	global	wrelop
	global	wrelop		;	global	wrelop
	global	_sub_43EF	;	global	_sub_43EF

	psect	text

; Disassembled version		; After compiling C source code
_sub_508A:
	call	ncsv		;	call ncsv
	defw	0FFE9h		;	defw -23

	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy

	push	hl		;	push	hl
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	jp	nz,loc_513A	;	jp	nz,l12

	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	a,(hl)		;	ld	a,(hl)
	cp	43h		;	cp	67
	jp	nz,loc_513A	;	jp	nz,l12

	ex	de,hl		;	ex	de,hl
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	(ix+-23),e	;	ld	(ix+-23),e
	ld	(ix+-22),d	;	ld	(ix+-22),d
	ld	(ix+-21),l	;	ld	(ix+-21),l
	ld	(ix+-20),h	;	ld	(ix+-20),h

	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_36E0	;	call	_sub_36E0
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_36E0	;	call	_sub_36E0

	ld	e,(ix+-23)	;	ld	e,(ix+-23)
	ld	d,(ix+-22)	;	ld	d,(ix+-22)
	ld	l,(ix+-21)	;	ld	l,(ix+-21)
	ld	h,(ix+-20)	;	ld	h,(ix+-20)
	ex	(sp),hl		;	ex	(sp),hl
	push	de		;	push	de
	ld	hl,d_508A_AA7C	;	ld	hl,19f
	push	hl		;	push	hl
	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FFEDh	;	ld	hl,-19
	add	hl,de		;	add	hl,de
	push	hl		;	push	hl
	call	_sprintf	;	call	_sprintf
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc

	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FFEDh	;	ld	hl,-19
	add	hl,de		;	add	hl,de
	ex	(sp),hl		;	ex	(sp),hl
	call	_strlen		;	call	_strlen
	pop	bc		;	pop	bc
	inc	hl		;	inc	hl
	push	hl		;	push	hl
	call	_allocmem	;	call	_allocmem
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h

	push	ix		;	push	ix
	pop	de		;	pop	de
	ld	hl,0FFEDh	;	ld	hl,-19
	add	hl,de		;	add	hl,de
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_strcpy		;	call	_strcpy
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc

	call	_sub_174C	;	call	_sub_174C
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h

	ld	(iy+0),44h	;	ld	(iy+0),68
loc_5134:			;L9:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret
loc_513A:			;l12:
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	(ix+-2),l	;	ld	(ix+-2),l
	ld	(ix+-1),h	;	ld	(ix+-1),h
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	4,b		;	bit	4,b
	jp	z,loc_51C8	;	jp	z,l14

	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	pop	de		;	pop	de
	call	wrelop		;	call	wrelop
	jr	c,loc_51C8	;	jp	c,l14

	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	jr	z,loc_51CF	;	jp	z,L3

	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	jr	z,loc_51C8	;	jp	z,l14

	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d

	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	e,(iy+15h)	;	ld	e,(iy+21)
	ld	d,(iy+16h)	;	ld	d,(iy+22)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d

	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
loc_51B9:			;L4:
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	jp	cret		;	jp	cret
loc_51C8:			;l14:
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
loc_51CF:			;L3:
	push	iy		;	push	iy
	call	_sub_6246	;	call	_sub_6246
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	jr	z,loc_520D	;	jp	z,l18

	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_475C	;	call	_sub_475C
	pop	bc		;	pop	bc

	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d

	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	e,(iy+15h)	;	ld	e,(iy+21)
	ld	d,(iy+16h)	;	ld	d,(iy+22)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d

	jr	loc_51B9	;	jp	L4
loc_520D:			;l18:
	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	ex	(sp),hl		;	ex	(sp),hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	pop	de		;	pop	de
	call	wrelop		;	call	wrelop
	jp	c,loc_5134	;	jp	c,L9

	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	a,(hl)		;	ld	a,(hl)
	cp	14h		;	cp	20
	jp	nz,loc_52CD	;	jp	nz,l20

	push	iy		;	push	iy
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,25		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	pop	de		;	pop	de
	call	wrelop		;	call	wrelop
	jp	c,loc_52CD	;	jp	c,l20

	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	push	iy		;	push	iy
	call	_sub_6246	;	call	_sub_6246
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	h
	jr	nz,loc_52A1	;	jp	nz,l23

	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	e,l		;	ld	e,l
	push	de		;	push	de
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	pop	de		;	pop	de
	cp	e		;	cp	e
	jr	nz,loc_52CD	;	jp	nz,l20

	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	e,l		;	ld	e,l
	push	de		;	push	de
	push	iy		;	push	iy
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	pop	de		;	pop	de
	cp	e		;	cp	e
	jr	nz,loc_52CD	;	jp	nz,l20
loc_52A1:			;l23:
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b, (hl)		;	ld	b,(hl)
	ld	(iy+19h),c	;	ld	(iy+25),c
	ld	(iy+1Ah),b	;	ld	(iy+26),b

	ld	hl,1Bh		;	ld	hl,27
	add	hl, de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_sub_36E0	;	call	_sub_36E0
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	jp	loc_5134	;	jp	L9
loc_52CD:			;l20:
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	xor	a		;	xor	a
	ld	l,a		;	ld	l,a
	ld	a,b		;	ld	a,b
	and	0Ch		;	and	12
	ld	h,a		;	ld	h,a
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jp	z,loc_5134	;	jp	z,L9

	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	push	hl		;	push	hl
	call	_sub_14F3	;	call	_sub_14F3
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	cp	3		;	cp	3
	jp	z,loc_5134	;	jp	z,L9

	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	2,b		;	bit	2,b
	jr	z,loc_534B	;	jp	z,l28

	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	a,(hl)		;	ld	a,(hl)
	cp	14h		;	cp	20
	jp	nz,loc_5134	;	jp	nz,L9

	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	push	hl		;	push	hl
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	hl,19h		;	ld	hl,25
	add	hl,bc		;	add	hl,bc
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	call	_nodesize	;	call	_nodesize
	pop	bc		;	pop	bc
	pop	de		;	pop	de
	call	wrelop		;	call	wrelop
	jp	nc,loc_5134	;	jp	nc,L9
loc_534B:			;l28:
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,14h		;	ld	hl,20
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h

	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	iy		;	push	iy
	pop	de		;	pop	de
	push	hl		;	push	hl
	ld	bc,1Dh		;	ld	bc,29
	ldir			;	ldir
	pop	hl		;	pop	hl

	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	3,c		;	bit	3,c
	push	iy		;	push	iy
	jr	z,loc_53B4	;	jp	z,L1

	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,1Bh		;	ld	hl,27
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	push	bc		;	push	bc
	ld	hl,14h		;	ld	hl,20
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	jr	loc_53BC	;	jp	l32
loc_53B4:			;L1:
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	iy,0		;	ld	iy,0
loc_53BC:			;l32:
	push	iy		;	push	iy
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	push	hl		;	push	hl
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	push	hl		;	push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(ix+-4),l	;	ld	(ix+-4),l
	ld	(ix+-3),h	;	ld	(ix+-3),h

	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(ix+-4)	;	ld	l,(ix+-4)
	ld	h,(ix+-3)	;	ld	h,(ix+-3)
	jp	cret		;	jp	cret

; End of function sub_508A OK++

;=========================================================
; sub_53EE OK++
;=========================================================
	global	_sub_53EE	;	global	_sub_53EE
	global	_byte_B013	;	global	_byte_B013
	global 	csv		;	global 	csv

; Disassembled version		; After compiling C source code
_sub_53EE:
	call	csv		;	call	csv
	push	hl		;	push	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy

	ld	e,(iy+19h)	;	ld	e,(iy+25)
	ld	d,(iy+1Ah)	;	ld	d,(iy+26)
	ld	(ix+-2),e	;	ld	(ix+-2),e
	ld	(ix+-1),d	;	ld	(ix+-1),d

	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a

	ld	l,(hl)		;	ld	l,(hl)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	ld	de,_dopetab	;	ld	de,_dopetab
	add	hl, de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	bit	4,b		;	bit	4,b
	jr	z,loc_5469	;	jp	z,l34

	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(ix+-2),c	;	ld	(ix+-2),c
	ld	(ix+-1),b	;	ld	(ix+-1),b
	ld	e,c		;	ld	e,c
	ld	d,b		;	ld	d,b
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	e,c		;	ld	e,c
	ld	d,b		;	ld	d,b
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	e,(iy+15h)	;	ld	e,(iy+21)
	ld	d,(iy+16h)	;	ld	d,(iy+22)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	jp	cret		;	jp	cret
loc_5469:			;l34:
	ld	(iy+0),14h	;	ld	(iy+0),20
	ld	l,(ix+-2)	;	ld	l,(ix+-2)
	ld	h,(ix+-1)	;	ld	h,(ix+-1)
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
	ex	de,hl		;	ex	de,hl
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+19h),c	;	ld	(iy+25),c
	ld	(iy+1Ah),b	;	ld	(iy+26),b
	ld	l,e		;	ld	l,e
	ld	h,d		;	ld	h,d
	ld	(hl),41h	;	ld	(hl),65
	ld	hl,17h		;	ld	hl,23
	add	hl,de		;	add	hl,de
	ld	e,(iy+17h)	;	ld	e,(iy+23)
	ld	d,(iy+18h)	;	ld	d,(iy+24)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	e,(ix+-2)	;	ld	e,(ix+-2)
	ld	d,(ix+-1)	;	ld	d,(ix+-1)
	ld	hl,15h		;	ld	hl,21
	add	hl,de		;	add	hl,de
	ld	e,(iy+15h)	;	ld	e,(iy+21)
	ld	d,(iy+16h)	;	ld	d,(iy+22)
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	ld	a,1		;	ld	a,1
	ld	(_byte_B013),a	;	ld	(_byte_B013),a
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret

	psect	data

d_5cf5_AA6B:
	;	"%s: large offset"
	defb	37,115,58,32,108,97,114,103,101,32,111,102,102,115,101,116
	defb	0

d_508A_AA7C:
	;	"%ld:
	defb	37,108,100,0

d_54b6_AA80:
	;	"mismatched comparision"
	defb	109,105,115,109,97,116,99,104,101,100,32,99,111,109,112,97
	defb	114,105,115,105,111,110,0

d_54b6_AA97:
	;	"degenerate unsigned comparision"
	defb	100,101,103,101,110,101,114,97,116,101,32,117,110,115,105,103
	defb	110,101,100,32,99,111,109,112,97,114,105,115,105,111,110,0

d_54b6_AAB7:
	;	"'Division by zero'"
	defb	68,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111
	defb	0


	psect	text

; End of function sub_53EE OK++
; End of file s508A.as

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

;=========================================================
; sub_sub_54B6 OK
;=========================================================
	global	_sub_54B6
	global	ncsv,cret,indir
	global	_dopetab
	global	_sub_4C12
	global	wrelop
	global	_byte_B013
	global	_sub_4B89
	global	_nodesize
	global	_sub_60A8
	global	_sub_14F3
	global	_sub_62BE
	global	_sub_36E0
	global	_word_B015
	global	_sub_6246
	global	_sub_4DA3
	global	_sub_4E8D
	global	_sub_4C8B
	global	_sub_4BE5
	global	_sub_475C
	global	_sub_415E
	global	asaladd
	global	arelop
	global	_sub_4FA8
	global	_sub_3712
	global	_word_AE53
	global	_word_AED9
	global	_sub_43EF
	global	arelop
	global	_sub_46F7
	global	_sub_4FCE
	global	_warning
	global	allsh
	global	lland
	global	lrelop
	global	_sub_508A
	global	_sub_53EE

	psect	text

_sub_54B6:
	call	ncsv
	defw	0FFF6h
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	pop	iy
	ld	de,_dopetab
	ld	l,(iy+0)
	ld	h,0
	add	hl,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	a,c
	and	0Ch
	ld	l,a
	xor	a
	ld	h,a
	ld	(ix+-6),l
	ld	(ix+-5),h
	ld	a,l
	or	(ix+-5)
	jr	z,loc_54F4
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	push	hl
	call	_sub_54B6
	pop	bc
	ld	(iy+19h),l
	ld	(iy+1Ah),h
 loc_54F4:
	ld	de,8
	ld	l,(ix+-6)
	ld	h,(ix+-5)
	or	a
	sbc	hl,de
	jr	nz,loc_5513
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	push	hl
	call	_sub_54B6
	pop	bc
	ld	(iy+1Bh),l
	ld	(iy+1Ch),h
loc_5513:
	ld	de,_dopetab
	ld	l,(iy+0)
	ld	h,0
	add	hl,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	bit	6,c
	jp	z,loc_5638
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	push	hl
	call	_sub_4C12
	ex	(sp),hl
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	push	hl
	call	_sub_4C12
	pop	bc
	pop	de
	call	wrelop
	jp	p,loc_556B
	ld	a,1
	ld	(_byte_B013),a
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	(iy+19h),l
	ld	(iy+1Ah),h
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	ld	(iy+1Bh),l
	ld	(iy+1Ch),h
loc_556B:
	ld	de,_dopetab
	ld	l,(iy+0)
	ld	h,0
	add	hl,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	bit	5,b
	jp	z,loc_5638
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	ld	a,(iy+0)
	cp	(hl)
	jp	nz,loc_5638
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	push  	hl
	call	_sub_4B89
	pop	bc
	ld	a,l
	or	a
	jr	z,loc_55E2
	ld	e,(iy+19h)
	ld	d,(iy+1Ah)
	ld	(ix+-2),e
	ld	(ix+-1),d
	ld	hl,1Bh
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	call	_sub_4B89
	pop	bc
	ld	a,l
	or	a
	jr	z,loc_55E2
	ld	a,1
	ld	(_byte_B013),a
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,1Bh
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	(iy+19h),c
	ld	(iy+1Ah),b
	ld	hl,1Bh
	add	hl,de
	push	iy
	pop	de
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	push	hl
	pop	iy
	jr	loc_5638
loc_55E2:
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	push	hl
	call	_sub_4C12
	pop	bc
	push	hl
	ld	e,(iy+19h)
	ld	d,(iy+1Ah)
	ld	hl,1Bh
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	call	_sub_4C12
	pop	bc
	pop	de
	call	wrelop
	jp	p,loc_5638
	ld	a,1
	ld	(_byte_B013),a
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	e,(iy+19h)
	ld	d,(iy+1Ah)
	ld	hl,1Bh
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	(iy+1Bh),c
	ld	(iy+1Ch),b
	ld	hl,1Bh
	add	hl,de
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	(hl),e
	inc	hl
	ld	(hl),d
loc_5638:
	ld	de,_dopetab
	ld	l,(iy+0)
	ld	h,0
	add	hl,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	xor	a
	ld	l,a
	ld	a,b
	and	0Ch
	ld	h,a
	ld	de,800h
	or	a
	sbc	hl,de
	jp	nz,loc_5715
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	ld	a,(hl)
	cp	14h
	jp	nz,loc_5715
	push	iy
	call	_nodesize
	pop	bc
	push	hl
	ld	e,(iy+19h)
	ld	d,(iy+1Ah)
	ld	hl,19h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	call	_nodesize
	pop	bc
	pop	de
	call	wrelop
	jp	nc,loc_5715
	ld	e,(iy+19h)
	ld	d,(iy+1Ah)
	ld	hl,19h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	push	hl
	call	_sub_60A8
	pop	bc
	pop	bc
	ld	a,l
	or	a
	jp	z,loc_5715
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	ld	(ix+-4),l
	ld	(ix+-3),h
	ld	e,(ix+-4)
	ld	d,(ix+-3)
	ld	hl,19h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	(iy+19h),c
	ld	(iy+1Ah),b
	ld	e,c
	ld	d,b
	ld	hl,17h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	(iy+17h),c
	ld	(iy+18h),b
	ld	hl,15h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	(iy+15h),c
	ld	(iy+16h),b
	ld	e,(iy+1Bh)
	ld	d,(iy+1Ch)
	ld	hl,17h
	add	hl,de
	ld	e,(iy+17h)
	ld	d,(iy+18h)
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	e,(iy+1Bh)
	ld	d,(iy+1Ch)
	ld	hl,15h
	add	hl,de
	ld	e,c
	ld	d,b
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	e,(ix+-4)
	ld	d,(ix+-3)
	ld	hl,19h
	add	hl,de
	push	iy
	pop	de
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	l,(ix+-4)
	ld	h,(ix+-3)
	push	hl
	pop	iy
 loc_5715:
	ld	de,_dopetab
	ld	l,(iy+0)
	ld	h,0
	add	hl,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	a,c
	and	20h
	ld	l,a
	ld	a,b
	and	4
	ld	h,a
	ld	de,420h
	or	a
	sbc	hl,de
	jp	nz,loc_58D0
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	a,(hl)
	cp	14h
	jp	nz,loc_58D0
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,19h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	call	_nodesize
	pop	bc
	ld	a,l
	or	h
	jp	z,loc_58D0
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	push	hl
	call	_nodesize
	pop	bc
	push	hl
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,19h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	call	_nodesize
	pop	bc
	pop	de
	call	wrelop
	jp	nc,loc_58D0
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	a,(hl)
	cp	43h
	jp	nz,loc_5839
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	push	hl
	call	_sub_14F3
	pop	bc
	ld	a,l
	cp	1
	jr	z,loc_57B5
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,19h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	call	_sub_14F3
	pop	bc
	ld	a,l
	cp	2
	jp	nz,loc_5839
 loc_57B5:
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	push	hl
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	push	hl
	call	_sub_62BE
	pop	bc
	pop	bc
	ld	a,l
	or	a
	jp	z,loc_5830
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	push	hl
	call	_sub_36E0
	pop	bc
	ld	e,(iy+19h)
	ld	d,(iy+1Ah)
	ld	hl,1Bh
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	call	_sub_36E0
	pop	bc
	ld	e,(iy+19h)
	ld	d,(iy+1Ah)
	ld	hl,19h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	(iy+19h),c
	ld	(iy+1Ah),b
	ld	e,c
	ld	d,b
	ld	hl,17h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	e,(iy+1Bh)
	ld	d,(iy+1Ch)
	ld	hl,17h
	add	hl,de
	ld	(hl),c
	inc	hl
	ld	(hl),b
	ld	e,(iy+19h)
	ld	d,(iy+1Ah)
	ld	hl,15h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	e,(iy+1Bh)
	ld	d,(iy+1Ch)
	ld	hl,15h
	add	hl,de
	ld	(hl),c
	inc	hl
	ld	(hl),b
	jp	loc_58D0
 loc_5830:
	ld	hl,d_54b6_AA80
	ld	(_word_B015),hl
	jp	loc_58D0
 loc_5839:
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	a,(hl)
	cp	14h
	jp	nz,loc_58D0
	ex	de,hl
	ld	hl,19h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	ld	e,(iy+19h)
	ld	d,(iy+1Ah)
	ld	hl,19h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	call	_sub_6246
	pop	bc
	pop	bc
	ld	a,l
	or	a
	jp	z,loc_58D0
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,19h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	(iy+19h),c
	ld	(iy+1Ah),b
	ld	hl,1Bh
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	call	_sub_36E0
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	ex	(sp),hl
	call	_sub_36E0
	pop	bc
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,19h
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	(iy+1Bh),c
	ld	(iy+1Ch),b
	ld	hl,1Bh
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	call	_sub_36E0
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	ex	(sp),hl
	call	_sub_36E0
	pop	bc
 loc_58D0:
	ld	a,(iy+0)
	cp	1
	jp	z,loc_5973
	cp	6
	jp	z,loc_5B65
	cp	7
	jp	z,loc_5B90
	cp	9
	jp	z,loc_5CB0
	cp	0Ch
	jp	z,loc_5B3A
	cp	0Dh
	jp	z,loc_5CC4
	cp	0Eh
	jp	z,loc_5A9B
	cp	10h
	jp	z,loc_5C9E
	cp	12h
	jp	z,loc_5A9B
	cp	14h
	jp	z,loc_5C96
	cp	16h
	jp	z,loc_596C
	cp	18h
	jp	z,loc_5B3A
	cp	1Eh
	jp	z,loc_597A
	cp	1Fh
	jp	z,loc_5A9B
	cp	20h
	jp	z,loc_59C9
	cp	22h
	jp	z,loc_5B65
	cp	23h
	jp	z,loc_5B90
	cp	24h
	jp	z,loc_5B3A
	cp	25h
	jp	z,loc_5A9B
	cp	26h
	jp	z,loc_5A9B
	cp	27h
	jp	z,loc_5B3A
	cp	28h
	jp	z,loc_5A9B
	cp	2Ah
	jp	z,loc_5A9B
	cp	2Ch
	jp	z,loc_5A58
	cp	2Dh
	jp	z,loc_59C9
	cp	2Eh
	jr	z,loc_597A
	cp	2Fh
	jp	z,loc_5A9B
	cp	3Ch
	jp	z,loc_5A58
	cp	42h
	push	iy
	jp	nz,loc_59C5
	call	_sub_4DA3
 loc_5968:
	pop	bc
	jp	cret
 loc_596C:
	push	iy
	call	_sub_4E8D
	jr	loc_5968
 loc_5973:
	push	iy
	call	_sub_4C8B
	jr	loc_5968
 loc_597A:
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	push	hl
	call	_sub_14F3
	pop	bc
	ld	a,l
	cp	2
	jr	nz,loc_59C3
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	push	hl
	call	_sub_4BE5
	pop	bc
	ld	a,l
	or	a
	jr	z,loc_59C3
	ld	hl,d_54b6_AA97
	ld	(_word_B015),hl
	push	iy
	call	_sub_475C
	pop	bc
	ld	a,(iy+0)
	cp	2Eh
	jr	z,loc_59B3
	ld	de,0
	ld	l,e
	ld	h,d
	jr	loc_59B9
 loc_59B3:
	ld	de,1
	ld	hl,0
 loc_59B9:
	push	hl
	push	de
	call	_sub_415E
	pop	bc
	pop	bc
	push	hl
	pop	iy
 loc_59C3:
	push	iy
 loc_59C5:
	pop	hl
	jp	cret
 loc_59C9:
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	push	hl
	call	_sub_14F3
	pop	bc
	ld	a,l
	cp	2
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	jr	nz,loc_5A02
	push	hl
	call	_sub_4BE5
	pop	bc
	ld	a,l
	or	a
	jr	z,loc_59FC
	ld	a,(iy+0)
	cp	2Dh
	jr	z,loc_59F4
	ld	hl,29h
	jr	loc_59F7
 loc_59F4:
	ld	hl,2
 loc_59F7:
	ld	(iy+0),l
	jr	loc_59C3
 loc_59FC:
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
 loc_5A02:
	ld	a,(hl)
	cp	43h
	jr	nz,loc_5A28
	ld	de,1
	ld	hl,0
	push	hl
	push	de
	ld	e,(iy+1Bh)
	ld	d,(iy+1Ch)
	ld	hl,19h
	add	hl,de
	call	asaladd
	ld	a,(iy+0)
	cp	2Dh
	jr	z,loc_5A53
 loc_5A23:
	ld	hl,1Eh
	jr	loc_59F7
 loc_5A28:
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	(iy+19h),l
	ld	(iy+1Ah),h
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	ld	(iy+1Bh),l
	ld	(iy+1Ch),h
	ld	a,(iy+0)
	cp	2Dh
	jr	z,loc_5A23
 loc_5A53:
	ld	hl,2Eh
	jr	loc_59F7
 loc_5A58:
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	a,(hl)
	cp	43h
	jr	nz,loc_5A9B
	ld	de,0FFFFh
	ld	l,e
	ld	h,d
	push	hl
	push	de
	ld	e,(iy+1Bh)
	ld	d,(iy+1Ch)
	ld	hl,19h
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	lrelop
	jr	nz,loc_5A9B
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	push	hl
	call	_sub_475C
	pop	bc
	push	iy
	call	_sub_36E0
	pop	bc
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	jp	cret
 loc_5A9B:
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	a,(hl)
	cp	43h
	jr	nz,loc_5AC1
	ex	de,hl
	ld	hl,19h
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	a,e
	or	d
	or	l
	or	h
	jr	nz,loc_5AC1
 loc_5AB9:
	push	iy
 loc_5ABB:
	call	_sub_4FA8
	jp	loc_5968
 loc_5AC1:
	ld	de,_dopetab
	ld	l,(iy+0)
	ld	h,0
	add	hl,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	bit	7,c
	jp	z,loc_59C3
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	push	hl
	call	_nodesize
	pop	bc
	ld	de,1
	or	a
	sbc	hl,de
	jp	z,loc_59C3
	call	_sub_3712
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	push	hl
	call	_sub_14F3
	pop	bc
	ld	a,l
	cp	2
	jr	z,loc_5B05
	ld	hl,(_word_AED9)
	jr	loc_5B08
 loc_5B05:
	ld	hl,(_word_AE53)
 loc_5B08:
	push	hl
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,17h
	add	hl,de
	pop	de
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	ld	(hl),41h
	push	hl
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	push	hl
	ld	hl,14h
	push	hl
	call	_sub_43EF
	pop	bc
	pop	bc
	pop	bc
	ld	(iy+1Bh),l
	ld	(iy+1Ch),h
	jp	loc_59C3
 loc_5B3A:
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	a,(hl)
	cp	43h
	jr	nz,loc_5B65
	ld	de,1
	ld	hl,0
	push	hl
	push	de
	ld	e,(iy+1Bh)
	ld	d,(iy+1Ch)
	ld	hl,19h
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	lrelop
	jp	z,loc_5AB9
 loc_5B65:
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	a,(hl)
	cp	43h
	jr	nz,loc_5B90
	ex	de,hl
	ld	hl,19h
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	push	hl
	push	de
	call	_sub_46F7
	pop	bc
	pop	bc
	ld	a,l
	or	a
	jr	z,loc_5B90
	push	iy
	call	_sub_4FCE
	jp	loc_5968
 loc_5B90:
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	a,(hl)
	cp	43h
	jp	nz,loc_5C12
	ex	de,hl
	ld	hl,19h
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	a,e
	or	d
	or	l
	or	h
	jp	nz,loc_5C12
	ld	a,(iy+0)
	cp	6
	jr	z,loc_5BD4
	cp	7
	jr	z,loc_5BE1
	cp	0Ch
	jr	z,loc_5BE1
	cp	18h
	jr	z,loc_5BD4
	cp	22h
	jr	z,loc_5BD4
	cp	23h
	jp	z,loc_5C0C
	cp	24h
	jr	z,loc_5C0C
	cp	27h
	jr	nz,loc_5C12
 loc_5BD4:
	ld	hl,d_54b6_AAB7
	push	hl
	call	_warning
	pop	bc
 loc_5BDC:
	push	iy
	jp	loc_59C5
 loc_5BE1:
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	push	hl
	call	_sub_475C
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ex	(sp),	hl
	call	_sub_475C
	pop	bc
	ld	(iy+0),43h
	ld	(iy+19h),0
	ld	(iy+1Ah),0
	ld	(iy+1Bh),0
	ld	(iy+1Ch),0
	jr	loc_5BDC
 loc_5C0C:
	ld	(iy+0),21h
	jr	loc_5BDC
 loc_5C12:
	push	iy
	call	_nodesize
	pop	bc
	ld	de,4
	call	wrelop
	jr	nc,loc_5C3D
	push	iy
	call	_nodesize
	pop	bc
	add	hl,hl
	add	hl,hl
	add	hl,hl
	ld	b,l
	ld	de,1
	ld	hl,0
	call	allsh
	ex	de,hl
	ld	bc,0FFFFh
	add	hl,bc
	ex	de,hl
	adc	hl,bc
	jr	loc_5C42
 loc_5C3D:
	ld	de,0FFFFh
	ld	l,e
	ld	h,d
 loc_5C42:
	ld	(ix+-10),e
	ld	(ix+-9),d
	ld	(ix+-8),l
	ld	(ix+-7),h
	ld	a,(iy+0)
	cp	7
	jr	z,loc_5C5A
	cp	23h
	jp	nz,loc_59C3
 loc_5C5A:
	ld	l,(iy+1Bh)
	ld	h,(iy+1Ch)
	ld	a,(hl)
	cp	43h
	jp	nz,loc_59C3
	ld	e,(ix+-10)
	ld	d,(ix+-9)
	ld	l,(ix+-8)
	ld	h,(ix+-7)
	push	hl
	push	de
	push	hl
	push	de
	ld	e,(iy+1Bh)
	ld	d,(iy+1Ch)
	ld	hl,19h
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	lland
	call	lrelop
	push	iy
	jp	nz,loc_59C5
	jp	loc_5ABB
 loc_5C96:
	push	iy
	call	_sub_508A
	jp	loc_5968
 loc_5C9E:
	push	iy
	call	_sub_36E0
	pop	bc
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	push	hl
	pop	iy
	jp	loc_59C3
 loc_5CB0:
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	ld	a,(hl)
	cp	0Dh
	push	iy
	jp	nz,loc_59C5
 loc_5CBE:
	call	_sub_53EE
	jp	loc_5968
 loc_5CC4:
	ld	l,(iy+19h)
	ld	h,(iy+1Ah)
	ld	a,(hl)
	cp	9
	jp	nz,loc_59C3
	ex	de,hl
	ld	hl,19h
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	a,(hl)
	cp	0Ah
	jp	z,loc_59C3
	ld	a,(hl)
	cp	21h
	jp	z,loc_59C3
	ld	a,(hl)
	cp	30h
	push	iy
	jp	z,loc_59C5
	jr	loc_5CBE

; End	of function sub_54B6

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

;=========================================================
; sub_sub_5CF5 OK+
;
; Compiler generates identical code from restored source
; program in C, however, location of branches associated
; with case constants is different from original.
; This does not affect the function.
;=========================================================
	global	_sub_5CF5	;	global	_sub_5CF5
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_sub_61AA	;	global	_sub_61AA
	global	_array_AE13	;	global	_array_AE13
	global	_lvlidx		;	global	_lvlidx
	global	wrelop		;	global	wrelop
	global	wrelop		;	global	wrelop
	global	_warning	;	global	_warning
	global	_sub_C57	;	global	_sub_C57
	global	_array_AE97	;	global	_array_AE97
	global	csv		;	global	csv

	psect	text

;	Disassembled version	; After compiling C source code
_sub_5CF5:
	call	csv		;	call 	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(iy+15h)	;	ld	a,(iy+21)	
	cp	1		;	cp	1
	jr	z,loc_5D1A	;	jp	z,l14	
	cp	3		;	cp	3
	jp	z,loc_5DEF	;	jp	z,l19	
	cp	4		;	cp	4
	jp	z,loc_5DEF	;	jp	z,l19	
	cp	5		;	cp	5
	jp	z,loc_5D84	;	jp	z,l20	
	jp	cret		;	jp	cret
loc_5D1A:			;l14:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	push	iy		;	push	iy
	call	_sub_61AA	;	call	_sub_61AA
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	h
	jp	nz,cret		;	jp	nz,cret
	ld	c,(iy+9)	;	ld	c,(iy+9)
	ld	b,(iy+0Ah)	;	ld	b,(iy+10)
	ld	de,_array_AE13	;	ld	de,_array_AE13
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ex	de,hl		;	ex	de,hl
	or	a		;	or	a
	sbc	hl,bc		;	sbc	hl,bc
	ex	de,hl		;	ex	de,hl
	ld	(hl),d		;	ld	(hl),d
	dec	hl		;	dec	hl
	ld	(hl),e		;	ld	(hl),e
	ex	de,hl		;	ex	de,hl
	ld	de,_array_AE13	;	ld	de,_array_AE13
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	ld	(iy+11h),l	;	ld	(iy+17),l
	ld	(iy+12h),h	;	ld	(iy+18),h
	ld	de,0FF80h	;	ld	de,-128
	call	wrelop		;	call	wrelop
	jp	p,cret		;	jp	p,cret
	ld	e,(iy+9)	;	ld	de,4
	ld	d,(iy+0Ah)	;	ld	l,(iy+9)
	ld	hl,4		;	ld	h,(iy+10)
	call	wrelop		;	call	wrelop
	jp	c,cret		;	jp	c,cret
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,(iy+1)	;	ld	h,(iy+1)
	push	hl		;	push	hl
	ld	hl,d_5cf5_AA6B	;	ld	hl,19f
	push	hl		;	push	hl
	call	_warning	;	call	_warning
	pop	bc		;	pop	bc
loc_5D80:			;L1:
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret
loc_5D84:			;l20:
	ld	de,_array_AE97	;	ld	de,_array_AE97
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+11h),c	;	ld	(iy+17),c
	ld	(iy+12h),b	;	ld	(iy+18),b
	ld	c,(iy+9)	;	ld	c,(iy+9)
	ld	b,(iy+0Ah)	;	ld	b,(iy+10)
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	ex	de,hl		;	ex	de,hl
	add	hl,bc		;	add	hl,bc
	ex	de,hl		;	ex	de,hl
	ld	(hl),d		;	ld	(hl),d
	dec	hl		;	dec	hl
	ld	(hl),e		;	ld	(hl),e
	ex	de,hl		;	ex	de,hl
	ld	de,1		;	ld	de,1
	ld	l,c		;	ld	l,c
	ld	h,b		;	ld	h,b
	or	a		;	or	a
	sbc	hl,de		;	sbc	hl,de
	jr	nz,loc_5DD5	;	jp	nz,l21
	ld	l,(iy+0Fh)	;	ld	l,(iy+15)
	ld	h,(iy+10h)	;	ld	h,(iy+16)
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	cp	37h		;	cp	55
	jr	z,loc_5DD5	;	jp	z,l21		; Restored function  
	ld	a,(hl)		;			   <----+ does not generate an
	cp	38h		;	cp	56		; unnecessary command
	jr	z,loc_5DD5	;	jp	z,l21
	ld	de,_array_AE97	;	ld	de,_array_AE97
	ld	hl,(_lvlidx)	;	ld	hl,(_lvlidx)
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	inc	bc		;	inc	bc
	ld	(hl),b		;	ld	(hl),b
	dec	hl		;	dec	hl
	ld	(hl),c		;	ld	(hl),c
loc_5DD5:			;l21:
	ld	l,(ix+8)	;	ld	l,(ix+8)
	ld	h,(ix+9)	;	ld	h,(ix+9)
	push	hl		;	push	hl
	push	iy		;	push	iy
	call	_sub_61AA	;	call	_sub_61AA
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	a,l		;	ld	a,l
	or	a		;	or	a
	jp	nz,cret		;	jp	nz,cret
	ld	(iy+15h),1	;	ld	(iy+21),1
	jp	cret		;	jp	cret
loc_5DEF:			;l19:
	push	iy		;	push	iy
	call	_sub_C57	;	call	_sub_C57
	jr	loc_5D80	;	jp	L1

; End of function sub_5CF5 OK+


; End of file 5CF5.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 5DF6.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_5DF6 OK++
;=========================================================
	global	_sub_5DF6	;	global	_sub_5DF6
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_dopetab	;	global	_dopetab
	global	_sub_43EF	;	global	_sub_43EF
	global	_sub_36E0	;	global	_sub_36E0
	global	_allocmem	;	global	_allocmem
	global	_strlen		;	global	_strlen
	global	_strcat		;	global	_strcat
	global	_strcpy		;	global	_strcpy
	global	_sub_7028	;	global	_sub_7028
	global 	csv		;	global 	csv

	psect	text

;	Disassembled version	; After compiling C source code
_sub_5DF6:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	and	0Ch		;	and	12
	ld	(ix+-1),a	;	ld	(ix+-1),a
	cp	8		;	cp	8
	jr	nz,loc_5E29	;	jp	nz,l12	
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_5DF6	;	call	_sub_5DF6
	pop	bc		;	pop	bc
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h	
loc_5E29:			;l12:
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	or	a		;	or	a
	jr	z,loc_5E40	;	jp	z,l15
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_5DF6	;	call	_sub_5DF6
	pop	bc		;	pop	bc
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h	
loc_5E40:			;l15:
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	12h		;	cp	18
	jr	z,loc_5E51	;	jp	z,l17	
	cp	15h		;	cp	21
	jp	z,loc_5EC6	;	jp	z,l20
	cp	26h		;	cp	38
	jp	nz,loc_5EC0	;	jp	nz,l14
loc_5E51:			;l17:
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	ld	a,(hl)		;	ld	a,(hl)
	cp	43h		;	cp	67
	jp	nz,loc_5E93	;	jp	nz,l18
	ex	de,hl		;	ex	de,hl
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	e,(hl)		;	ld	e,(hl)
	inc	hl		;	inc	hl
	ld	d,(hl)		;	ld	d,(hl)
	inc	hl		;	inc	hl
	ld	a,(hl)		;	ld	a,(hl)
	inc	hl		;	inc	hl
	ld	h,(hl)		;	ld	h,(hl)
	ld	l,a		;	ld	l,a
	push	hl		;	push	hl
	push	de		;	push	de
	ld	hl,0		;	ld	hl,0
	pop	bc		;	pop	bc
	or	a		;	or	a
	sbc	hl,bc		;	sbc	hl,bc
	pop	bc		;	pop	bc
	ex	de,hl		;	ex	de,hl
	ld	hl,0		;	ld	hl,0
	sbc	hl,bc		;	sbc	hl,bc
	push	hl		;	push	hl
	push	de		;	push	de
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	pop	de		;	pop	de
	ld	(hl),e		;	ld	(hl),e
	inc	hl		;	inc	hl
	ld	(hl),d		;	ld	(hl),d
	inc	hl		;	inc	hl
	pop	bc		;	pop	bc
	ld	(hl),c		;	ld	(hl),c
	inc	hl		;	inc	hl
	ld	(hl),b		;	ld	(hl),b
	ld	l,c		;	ld	l,c
	ld	h,b		;	ld	h,b
	jr	loc_5EAE	;	jp	l19
loc_5E93:			;l18:
	ld	hl,0		;	ld	hl,0
	push	hl		;	push	hl
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	ld	hl,15h		;	ld	hl,21
	push	hl			;push	hl
	call	_sub_43EF	;	call	_sub_43EF
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	pop	bc		;	pop	bc
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
loc_5EAE:			;l19:
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	12h		;	cp	18
	jr	z,loc_5EBA	;	jp	z,L2
	ld	hl,25h		;	ld	hl,37
	jr	loc_5EBD	;	jp	L1
loc_5EBA:			;L2:
	ld	hl,0Eh		;	ld	hl,14
loc_5EBD:			;L1:
	ld	(iy+0),l	;	ld	(iy+0),l
loc_5EC0:			;l14:
	push	iy		;	push	iy
loc_5EC2:			;L3:
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret
loc_5EC6:			;l20:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	a,(hl)		;	ld	a,(hl)
	cp	15h		;	cp	21
	jr	nz,loc_5EED	;	jp	nz,l21
	push	iy		;	push	iy
	call	_sub_36E0	;	call	_sub_36E0
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
loc_5EED:			;l21:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	a,(hl)		;	ld	a,(hl)
	cp	44h		;	cp	68
	push	iy		;	push	iy
	jr	nz,loc_5EC2	;	jp	nz,L3
	call	_sub_36E0	;	call	_sub_36E0
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ex	(sp),hl		;	ex	(sp),hl
	call	_strlen		;	call	_strlen
	pop	bc		;	pop	bc
	inc	hl		;	inc	hl
	inc	hl		;	inc	hl
	push	hl		;	push	hl
	call	_allocmem	;	call	_allocmem
	ld	(ix+-3),l	;	ld	(ix+-3),l
	ld	(ix+-2),h	;	ld	(ix+-2),h
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ex	(sp),	hl	;	ex	(sp),hl
	ld	hl,19f		;	ld	hl,19f
	push	hl		;	push	hl
	ld	l,(ix+-3)	;	ld	l,(ix+-3)
	ld	h,(ix+-2)	;	ld	h,(ix+-2)
	push	hl		;	push	hl
	call	_strcpy		;	call	_strcpy
	pop	bc		;	pop	bc
	ex	(sp),hl		;	ex	(sp),hl
	call	_strcat		;	call	_strcat
	pop	bc		;	pop	bc
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_7028	;	call	_sub_7028
	pop	bc		;	pop	bc
	ld	l,(ix+-3)	;	ld	l,(ix+-3)
	ld	h,(ix+-2)	;	ld	h,(ix+-2)
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
	jp	loc_5EC0	;	jp	l14

; End of function sub_5DF6 OK++

	psect	data

p_5df6_1:
19:	; "-"
	defb	45,0

	psect	text

; End of file 5DF6.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 5F52.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_5F52 OK++
;=========================================================
	global	_sub_5F52	;	global	_sub_5F52
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_dopetab	;	global	_dopetab
	global	_sub_36E0	;	global	_sub_36E0
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_5F52:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	de,_dopetab	;	ld	de,_dopetab
	ld	l,(iy+0)	;	ld	l,(iy+0)
	ld	h,0		;	ld	h,0
	add	hl,hl		;	add	hl,hl
	add	hl,de		;	add	hl,de
	ld	a,(hl)		;	ld	a,(hl)
	and	0Ch		;	and	12
	ld	(ix+-1),a	;	ld	(ix+-1),a
	cp	8		;	cp	8
	jr	nz,loc_5F85	;	jp	nz,l12
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	push	hl		;	push	hl
	call	_sub_5F52	;	call	_sub_5F52
	pop	bc		;	pop	bc
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
loc_5F85:			;l12:
	ld	a,(ix+-1)	;	ld	a,(ix+-1)
	or	a		;	or	a
	jr	z,loc_5F9C	;	jp	z,l15
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	push	hl		;	push	hl
	call	_sub_5F52	;	call	_sub_5F52
	pop	bc		;	pop	bc
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
loc_5F9C:			;l15:
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	0Eh		;	cp	14
	jr	z,loc_5FAE	;	jp	z,l16
	cp	25h		;	cp	37
	jp	z,loc_5FD7	;	jp	z,l18
loc_5FA8:			;l14:
	push	iy		;	push	iy
	pop	hl		;	pop	hl
	jp	cret		;	jp	cret
loc_5FAE:			;l16:
	ld	l,(iy+19h)	;	ld	l,(iy+25)
	ld	h,(iy+1Ah)	;	ld	h,(iy+26)
	ld	a,(hl)		;	ld	a,(hl)
	cp	15h		;	cp	21
	jr	nz,loc_5FD7	;	jp	nz,l18
	ld	(ix+-3),l	;	ld	(ix+-3),l
	ld	(ix+-2),h	;	ld	(ix+-2),h
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	ld	(iy+19h),l	;	ld	(iy+25),l
	ld	(iy+1Ah),h	;	ld	(iy+26),h
	ld	l,(ix+-3)	;	ld	l,(ix+-3)
	ld	h,(ix+-2)	;	ld	h,(ix+-2)
	ld	(iy+1Bh),l	;	ld	(iy+27),l
	ld	(iy+1Ch),h	;	ld	(iy+28),h
loc_5FD7:			;l18:
	ld	l,(iy+1Bh)	;	ld	l,(iy+27)
	ld	h,(iy+1Ch)	;	ld	h,(iy+28)
	ld	a,(hl)		;	ld	a,(hl)
	cp	15h		;	cp	21
	jr	nz,loc_5FA8	;	jp	nz,l14
	push	hl		;	push	hl
	call	_sub_36E0	;	call	_sub_36E0
	pop	bc		;	pop	bc
	ld	e,(iy+1Bh)	;	ld	e,(iy+27)
	ld	d,(iy+1Ch)	;	ld	d,(iy+28)
	ld	hl,19h		;	ld	hl,25
	add	hl,de		;	add	hl,de
	ld	c,(hl)		;	ld	c,(hl)
	inc	hl		;	inc	hl
	ld	b,(hl)		;	ld	b,(hl)
	ld	(iy+1Bh),c	;	ld	(iy+27),c
	ld	(iy+1Ch),b	;	ld	(iy+28),b
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	25h		;	cp	37
	jr	z,loc_6006	;	jp	z,L2
	ld	hl,12h		;	ld	hl,18
	jr	loc_6009	;	jp	L1
loc_6006:			;L2:
	ld	hl,26h		;	ld	hl,38
loc_6009:			;L1:
	ld	(iy+0),l	;	ld	(iy+0),l
	jr	loc_5FA8	;	jp	l14

; End of function sub_5F52 OK++

; End of file 5F52.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 600E.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_600E OK++
;=========================================================
	global	_sub_600E	;	global	_sub_600E
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_word_B015	;	global	_word_B015
	global	_sub_5DF6	;	global	_sub_5DF6
	global	_byte_B013	;	global	_byte_B013
	global	_sub_3EAA	;	global	_sub_3EAA
	global	_sub_54B6	;	global	_sub_54B6
	global	_warning	;	global	_warning
	global	_sub_5F52	;	global	_sub_5F52
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_600E:
	call	csv		;	call 	csv
	push	hl		;	push 	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	hl,0		;	ld	hl,0
	ld	(_word_B015),hl	;	ld	(_word_B015),hl
	push	iy		;	push	iy
	call	_sub_5DF6	;	call	_sub_5DF6
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	(ix+-2),0	;	ld	(ix+-2),0
	ld	(ix+-1),0	;	ld	(ix+-1),0
loc_6032:			;l14:
	xor	a		;	xor	a
	ld	(_byte_B013),a	;	ld	(_byte_B013),a
	push	iy		;	push	iy
	call	_sub_54B6	;	call	_sub_54B6
	ex	(sp),hl		;	ex	(sp),hl
	call	_sub_3EAA	;	call	_sub_3EAA
	pop	bc		;	pop	bc
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(_byte_B013)	;	ld	a,(_byte_B013)
	or	a		;	or	a
	jr	nz,loc_6032	;	jp	nz,l14
	ld	hl,(_word_B015)	;	ld	hl,(_word_B015)
	ld	a,l		;	ld	a,l
	or	h		;	or	h
	jr	z,loc_6055	;	jp	z,l15
	push	hl		;	push	hl
	call	_warning	;	call	_warning
	pop	bc		;	pop	bc
loc_6055:			;l15:
	push	iy		;	push	iy
	call	_sub_5F52	;	call	_sub_5F52
	pop	bc		;	pop	bc
	jp	cret		;	jp	cret

; End of function sub_600E OK++

; End of file 600E.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 605E.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_605E OK++
;=========================================================
	global	_sub_605E	;	global	_sub_605E
	global	ncsv,cret,indir	;	global	ncsv,cret,indir
	global	csv		;	global	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_605E:
	call	csv		;	call 	csv
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	ld	a,h		;	ld	a,h
	or	a		;	or	a
	jr	nz,loc_6084	;	jp	nz,l12
	ld	a,l		;	ld	a,l
	cp	2		;	cp	2
	jr	z,loc_6084	;	jp	z,l12
	cp	1Eh		;	cp	30
	jr	z,loc_6090	;	jp	z,l15
	cp	20h		;	cp	32
	jr	z,loc_6096	;	jp	z,l16
	cp	29h		;	cp	41
	jr	z,loc_608A	;	jp	z,l17
	cp	2Dh		;	cp	45
	jr	z,loc_60A2	;	jp	z,l18
	cp	2Eh		;	cp	46
	jr	z,loc_609C	;	jp	z,l19
loc_6084:			;l12:
	ld	hl,29h		;	ld	hl,41
	jp	cret		;	jp	cret
loc_608A:			;l17:
	ld	hl,2		;	ld	hl,2
	jp	cret		;	jp	cret
loc_6090:			;l15:
	ld	hl,2Eh		;	ld	hl,46
	jp	cret		;	jp	cret
loc_6096:			;l16:
	ld	hl,2Dh		;	ld	hl,45
	jp	cret		;	jp	cret
loc_609C:			;l19:
	ld	hl,1Eh		;	ld	hl,30
	jp	cret		;	jp	cret
loc_60A2:			;l18:
	ld	hl,20h		;	ld	hl,32
	jp	cret		;	jp	cret

; Compiler generates identical code from restored source
; program in C, however, location of branches associated
; with case constants is different from original.
; This does not affect the function.

; End of function sub_605E

; End of file 605E.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 60A8.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; sub_60A8
;
; Added the r_bc variable to preserve the logical
; behavior of the function. This function was optimized
; manually in assembly language. In places with forced 
; type casting in the original binary program image, the 
; value is returned in the HL register pair.
;
; Generated code is different, but does not affect the
; program logic. This function is boolean and only returns
; 0 or 1.
;=========================================================
	global	_sub_60A8	;	global	_sub_60A8
	global	ncsv,cret,indir	;	global	ncsv, cret, indir
	global	_nodesize	;	global	_nodesize
	global	wrelop		;	global	wrelop
	global	_sub_14F3	;	global	_sub_14F3
	global	shll		;	global	shll
	global	arelop		;	global	arelop
	global	asaldiv		;	global	asaldiv
	global 	csv		;	global 	csv

	psect	text

; Disassembled version		; After compiling C source code
_sub_60A8:
	call	csv		;	call ncsv
	push	hl		;	defw -5
	push	hl
	ld	l,(ix+6)	;	ld	l,(ix+6)
	ld	h,(ix+7)	;	ld	h,(ix+7)
	push	hl		;	push	hl
	pop	iy		;	pop	iy
	ld	a,(iy+0)	;	ld	a,(iy+0)
	cp	67		;	cp	67
	jr	z,loc_60C2	;	jp	z,l12
loc_60BD:			;L3:			<--+
	ld	l,0		;	ld	l,0	   ;
	jp	cret		;	jp	cret	   ;
loc_60C2:			;l12:	   		   ;
	ld	l,(ix+8)	;	ld	l,(ix+8)   ;
	ld	h,(ix+9)	;	ld	h,(ix+9)   ;
	push	hl		;	push	hl   	   ;
	call	_nodesize	;	call	_nodesize  ;
	pop	bc		;	pop	bc   	   ;
	ld	de,4		;	ld	de,4   	   ; Return 0
	call	wrelop		;	call	wrelop     ; in a different
	jp	c,loc_60F8	;	jp	c,l18	   ; location
	bit	7,(iy+28)	;	bit	7,(iy+28)  ;
	jr	z,loc_60EC	;	jp	z,l17      ;
	ld	l,(ix+8)	;	ld	l,(ix+8)   ;
	ld	h,(ix+9)	;	ld	h,(ix+9)   ;
	push	hl		;	push	hl	   ;
	call	_sub_14F3	;	call	_sub_14F3  ;
	pop	bc		;	pop	bc	   ;
	ld	a,l		;	ld	a,l	   ;
	cp	1		;	cp	1	   ;
	jr	nz,loc_60F2 ;-+	;	jp	nz,L3	---+
loc_60EC:		      ;	;l17:
	ld	hl,1	      ;	;	ld	l,1  <--+	
	jp	cret	      ;	;	jp	cret	; Returns a 				
loc_60F2:		;<----+	;			; value	1 or 0
	ld	hl,0		;		        ; in L register
	jp	cret		;		     <--+		
loc_60F8:			;l18:				
	ld	l,(ix+8)	;	ld	l,(ix+8)	
	ld	h,(ix+9)	;	ld	h,(ix+9)	
	push	hl		;	push	hl		
	call	_nodesize	;	call	_nodesize	
	pop	bc		;	pop	bc		
	add	hl,hl		;	add	hl,hl		
	add	hl,hl		;	add	hl,hl		
	add	hl,hl		;	add	hl,hl		
	ld	b,l		;	ld	b,l		
	ld	hl,1		;	ld	hl,1		
	call	shll		;	call	shll		
	ex	de,hl		;	ex	de,hl		
	ld	hl,0		;	ld	hl,0		
	ld	(ix+-4),e	;	ld	(ix+-4),e	
	ld	(ix+-3),d	;	ld	(ix+-3),d	
	ld	(ix+-2),l	;	ld	(ix+-2),l	
	ld	(ix+-1),h	;	ld	(ix+-1),h	
	ld	l,(ix+8)	;	ld	l,(ix+8)	
	ld	h,(ix+9)	;	ld	h,(ix+9)	
	push	hl		;	push	hl		
	call	_sub_14F3	;	call	_sub_14F3	
	pop	bc		;	pop	bc		
	ld	a,l		;	ld	a,l		
	cp	2		;	cp	2		
	jp	nz,loc_615C	;	jp	nz,l20		
	bit	7,(iy+28)	;	bit	7,(iy+28)	
	jr	nz,loc_60BD	;	jp	nz,L3		
				;	ld	(ix+-5),1 <-+
	ld	e,(ix+-4)	;	ld	e,(ix+-4)   ;
	ld	d,(ix+-3)	;	ld	d,(ix+-3)   ;
	ld	l,(ix+-2)	;	ld	l,(ix+-2)   ;
	ld	h,(ix+-1)	;	ld	h,(ix+-1)   ;
	push	hl		;	push	hl	    ; Variable is
	push	de		;	push	de	    ; initialized
loc_6142:			;L1:			    ; above
	ld	e,(iy+25)	;	ld	e,(iy+25)   ;
	ld	d,(iy+26)	;	ld	d,(iy+26)   ;
	ld	l,(iy+27)	;	ld	l,(iy+27)   ;
	ld	h,(iy+28)	;	ld	h,(iy+28)   ;
	call	arelop		;	call	arelop	    ;
	ld	bc,1		;			----+		
	jp	m,loc_6158	;	jp	m,l24
	dec	bc		;	dec	(ix+-5)
loc_6158:			;l24:
	ld	l,c		;	ld	l,(ix+-5)
	jp	cret		;	jp	cret		
loc_615C:			;l20:				
	ld	de,2		;	ld	de,2		
	ld	hl,0		;	ld	hl,0		
	push	hl		;	push	hl		
	push	de		;	push	de		
	push	ix		;	push	ix		
	pop	hl		;	pop	hl		
	dec	hl		;	dec	hl		
	dec	hl		;	dec	hl		
	dec	hl		;	dec	hl		
	dec	hl		;	dec	hl		
	call	asaldiv		;	call	asaldiv		
	bit	7,(iy+28)	;	bit	7,(iy+28)	
				;	ld	(ix+-5),1 <-+
	ld	e,(ix+-4)	;	ld	e,(ix+-4)   ;
	ld	d,(ix+-3)	;	ld	d,(ix+-3)   ;
	ld	l,(ix+-2)	;	ld	l,(ix+-2)   ;
	ld	h,(ix+-1)	;	ld	h,(ix+-1)   ;
	push	hl		;	push	hl	    ;
	push	de		;	push	de	    ;
	jr	z,loc_6142	;	jp	z,L1	    ;
	ld	hl,0		;	ld	hl,0	    ;
	pop	bc		;	pop	bc	    ;
	or	a		;	or	a	    ; Variable is
	sbc	hl,bc		;	sbc	hl,bc	    ; initialized
	pop	bc		;	pop	bc	    ; above
	ex	de,hl		;	ex	de,hl	    ;
	ld	hl,0		;	ld	hl,0	    ;
	sbc	hl,bc		;	sbc	hl,bc	    ;
	push	hl		;	push	hl	    ;
	push	de		;	push	de	    ;
	ld	e,(iy+25)	;	ld	e,(iy+25)   ;
	ld	d,(iy+26)	;	ld	d,(iy+26)   ;
	ld	l,(iy+27)	;	ld	l,(iy+27)   ;
	ld	h,(iy+28)	;	ld	h,(iy+28)   ;
	call	arelop		;	call	arelop	    ;
	ld	bc,1		;			----+	
	jp	p,loc_6158	;	jp	p,l24		
	dec	bc		;	dec	(ix+-5)		
	jr	loc_6158	;	jp	l24		

; End of function sub_60A8

; End of file 60A8.as


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - nularg.asm Created 09.03.2019 Last Modified 31.01.2021

global	nularg

	psect	data

nularg:	defb	0

	psect	text

; End of data from file nularg.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - libc1.asm Created 09.03.2019 Last Modified 31.01.2021

;
; For easier obtaining an exact copy of the binary executable
; file, all library functions are located in files libc1.asm,
; libc2.asm, libc3.asm, libc4.asm, libc5.asm.
;
	global	ncsv, cret, indir
	global	csv

;=========================================================
; sub_6AA2 OK++   faterror
;=========================================================
;	void faterror(char * p1, FILE *p2, char *p3) {
;
;	    sub_6B55(p1, p2, p3);
;	    fclose(stdout);
;	    exit(2);
;	}
;
	global	_faterror
	global	_sub_6B55
	global	_fclose
	global	__iob
	global	_exit

	psect	text

_faterror:
	call 	csv
	ld	l,(ix+10)
	ld	h,(ix+11)
	push	hl
	ld	l,(ix+8)
	ld	h,(ix+9)
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	call	_sub_6B55
	pop	bc
	pop	bc
	ld	hl,__iob+8
	ex	(sp),hl
	call	_fclose
	ld	hl,2
	ex	(sp),hl
	call	_exit
	jp	cret

;=========================================================
; sub_6AD0 warning   Warning message
;=========================================================
;    void warning(char *p1, char *p2, char *p3) {
;
;	if(wflag == 0) {
;	    fprintf(stderr, "%s:%d:\t", progname, lineno);
;	    fprintf(stderr, p1, p2, p3);
;	    fprintf(stderr, " (warning)\n");
;	}
;    }
;
	global	_warning
	global	_wflag
	global	_fprintf
	global	_progname
	global	_lineno

_warning:
	call	csv
	ld	a,(_wflag)
	or	a
	jp	nz,cret
	ld	hl,(_lineno)
	push	hl
	ld	hl,_progname
	push	hl
	ld	hl,19f
	push	hl
	ld	hl,__iob+16
	push	hl
	call	_fprintf
	pop	bc
	pop	bc
	pop	bc
	ld	l,(ix+10)
	ld	h,(ix+11)
	ex	(sp),hl
	ld	l,(ix+8)
	ld	h,(ix+9)
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	ld	hl,__iob+16
	push	hl
	call	_fprintf
	pop	bc
	pop	bc
	pop	bc
	ld	hl,29f
	ex	(sp),hl
	ld	hl,__iob+16
	push	hl
	call	_fprintf
	jp	cret

	psect	data

19:	defb	37,115,58,37,100,58,9,0
29:	defb	32,40,119,97,114,110,105,110,103,41,10,0

	psect	text

;=========================================================
; uerror Nonfatal error		Restored by decompilation
;=========================================================
;	void uerror(char * p1, char * p2, char * p3) {
;
;	    sub_6B55(p1, p2, p3);
;	    if(++errcnt >= MAXERR) {
;	      faterror("Too many errors");
;	    }
;	}
;
	global	_uerror
	global	_sub_6B55
	global	_errcnt
	global	wrelop
	global	_faterror

	psect	text

_uerror:
	call 	csv
	ld	l,(ix+10)
	ld	h,(ix+11)
	push	hl
	ld	l,(ix+8)
	ld	h,(ix+9)
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	call	_sub_6B55
	pop	bc
	pop	bc
	pop	bc
	ld	de,30
	ld	hl,(_errcnt)
	inc	hl
	ld	(_errcnt),hl
	call	wrelop
	jp	m,cret
	ld	hl,19f
	push	hl
	call	_faterror
	jp	cret

;=========================================================
; sub_6B55
;=========================================================
;	void sub_6B55(char *p1, char *p2, char *p3) {
;
;	    fprintf(stderr, "%s:%d:\t", progname, lineno);
;	    fprintf(stderr, p1, p2, p3);
;	    fputc ('\n', stderr);
;	}
;
	global	_fprintf
	global	__iob
	global	_progname
	global	_lineno
	global	_fputc

_sub_6B55:
	call 	csv
	ld	hl,(_lineno)
	push	hl
	ld	hl,_progname
	push	hl
	ld	hl,29f
	push	hl
	ld	hl,__iob+16
	push	hl
	call	_fprintf
	pop	bc
	pop	bc
	pop	bc
	ld	l,(ix+10)
	ld	h,(ix+11)
	ex	(sp),hl
	ld	l,(ix+8)
	ld	h,(ix+9)
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	ld	hl,__iob+16
	push	hl
	call	_fprintf
	pop	bc
	pop	bc
	pop	bc
	ld	hl,__iob+16
	ex	(sp),hl
	ld	hl,10
	push	hl
	call	_fputc
	jp	cret

	psect	data

19:	defb	84,111,111,32,109,97,110,121,32,101,114,114,111,114,115,0
29:	defb	37,115,58,37,100,58,9,0

	psect	text

;=========================================================
; allocmem alloc_mem & return ptr
;=========================================================
;    void * allocmem(unsigned int size) {
;	register char * ptr;
;
;	do {
;	    if((ptr = cmalloc(size)) != (void *)0) goto m1;
;	} while (sub_374C() != 0);
;	faterror("No room");
;   m1: blkclr(ptr, size);
;       return ptr;
;    }	
;
	global	_allocmem
	global	_cmalloc
	global	_sub_374C
	global	_faterror
	global	_blkclr

	psect	text

_allocmem:
	call csv
l14:
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	call	_cmalloc
	pop	bc
	push	hl
	pop	iy
	ld	a,l
	or	h
	jr	nz,l16

	call	_sub_374C
	ld	a,l
	or	a
	jr	nz,l14

	ld	hl,19f
	push	hl
	call	_faterror
	pop	bc
l16:
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	push	iy
	call	_blkclr
	pop	bc
	pop	bc
	push	iy
	pop	hl
	jp	cret

	psect	data

19:	defb	78,111,32,114,111,111,109,0

	psect	text

;=========================================================
; sub_6BD3 fprintf
;=========================================================
;    #include <stdio.h>
;
;    fprintf(file, f, a) FILE * file; char * f; int a; {
;	return(_doprnt(file, f, &a));
;    }
;
	psect	text

	global	_fprintf
	global	__doprnt

_fprintf:
	call	csv
	push	ix
	pop	de
	ld	hl,10
	add	hl,de
	push	hl
	ld	l,(ix+8)
	ld	h,(ix+9)
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	call	__doprnt
	pop	bc
	pop	bc
	pop	bc
	jp	cret

;=========================================================
; sub_6BF5 freopen OK(no code matching)   Used in: main
;=========================================================
;	FILE * freopen(char * name, char * mode, register FILE * f) {
;	    unsigned char c1, func;
;	    struct fcb * p;
;
;	    fclose(f);
;	    p = _fcb + (f->_file = (f - stdin));
;	    c1 = 0;
;	    func = CPMOPN;
;	    f->_flag &= 0x4F;
;	    switch(*mode) {
;	      case 'w':
;		c1++;
;	        func = CPMMAKE;
;	      case 'r':
;		if(*(mode+1) == 'b') f->_flag = _IOBINARY;
;		break;
;	    }
;	    def_fcb(p, name);
;	    if(func == CPMMAKE) bdos(CPMDEL, p);
;	    if(bdos(func, p) == -1) return 0;
;	    LO_CHAR(p->rwp) = c1 ? 2 : 1;
;	    if(((LO_CHAR(f->_flag) |= (c1+1))&0xC) == 0) {
;		if(f->_base == 0) f->_base = sbrk(512);
;	    }
;	    f->_ptr = f->_base;
;	    if(f->_base == 0) goto m8;
;	    LO_CHAR(f->_cnt) = 0;
;	    if(c1 == 0) goto m9;
;	    HI_CHAR(f->_cnt) = 2;
;	    goto m10;
;	m8: LO_CHAR(f->_cnt) = 0;
;	m9: HI_CHAR(f->_cnt) = 0;
;	m10:
;	    return f;
;	}
;
	global	_freopen
	global	_fclose
	global	__fcb
	global	__iob
	global	adiv
	global	amul
	global	_def_fcb
	global	_bdos
	global	_sbrk

	psect	text

_freopen:
	call	csv
	push	hl
	push	hl
	ld	l,(ix+10)
	ld	h,(ix+11)
	push	hl
	pop	iy
	push	hl
	call	_fclose
	pop	bc
	ld	de,__iob
	push	iy
	pop	hl
	or	a
	sbc	hl,de
	ld	de,8
	call	adiv
	ld	a,l
	ld	(iy+7),a
	ld	l,a
	rla
	sbc	a,a
	ld	h,a
	ld	de,41
	call	amul
	ld	de,__fcb
	add	hl,de
	ld	(ix+-4),l
	ld	(ix+-3),h
	ld	(ix+-1),0
	ld	(ix+-2),15
	ld	a,(iy+6)
	and	79
	ld	(iy+6),a
	ld	l,(ix+8)
	ld	h,(ix+9)
	ld	a,(hl)
	cp	'r'
	jr	z,loc_6C55
	cp	'w'
	jr	nz,loc_6C65
	inc	(ix+-1)
	ld	(ix+-2),22
loc_6C55:
	ld	l,(ix+8)
	ld	h,(ix+9)
	inc	hl
	ld	a,(hl)
	cp	'b'
	jr	nz,loc_6C65
	ld	(iy+6),-128
loc_6C65:
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	ld	l,(ix+-4)
	ld	h,(ix+-3)
	push	hl
	call	_def_fcb
	pop	bc
	pop	bc
	ld	a,(ix+-2)
	cp	22
	ld	l,(ix+-4)
	ld	h,(ix+-3)
	push	hl
	jr	nz,loc_6C95
	ld	hl,19
	push	hl
	call	_bdos
	pop	bc
	ld	l,(ix+-4)
	ld	h,(ix+-3)
	ex	(sp),hl
loc_6C95:
	ld	l,(ix+-2)
	ld	h,0
	push	hl
	call	_bdos
	pop	bc
	pop	bc
	ld	a,l
	cp	255
	jr	nz,loc_6CAB
	ld	hl,0
	jp	cret
loc_6CAB:
	ld	a,(ix+-1)
	or	a
	jr	nz,loc_6CB6
	ld	hl,1
	jr	loc_6CB9
loc_6CB6:
	ld	hl,2
loc_6CB9:
	ld	a,l
	ld	e,(ix+-4)
	ld	d,(ix+-3)
	ld	hl,36
	add	hl,de
	ld	(hl),a
	ld	a,(ix+-1)
	inc	a
	ld	e,a
	ld	a,(iy+6)
	or	e
	ld	(iy+6),a
	and	12
	or	a
	jr	nz,loc_6CEC
	ld	a,(iy+4)
	or	(iy+5)
	jr	nz,loc_6CEC
	ld	hl,512
	push	hl
	call	_sbrk
	pop	bc
	ld	(iy+4),l
	ld	(iy+5),h
loc_6CEC:
	ld	l,(iy+4)
	ld	h,(iy+5)
	ld	(iy+0),l
	ld	(iy+1),h
	ld	a,l
	or	(iy+5)
	jr	z,loc_6D0E
	ld	a,(ix+-1)
	or	a
	ld	(iy+2),0
	jr	z,loc_6D12
	ld	(iy+3),2
	jr	loc_6D16
loc_6D0E:
	ld	(iy+2),0
loc_6D12:
	ld	(iy+3),0
loc_6D16:
	push	iy
	pop	hl
	jp	cret

;=========================================================
; sub_6D1C
;=========================================================
	global	_sub_6D1C
	global	ncsv, cret, indir
	global	wrelop
	global 	csv

	psect	text

_sub_6D1C:
	call	csv
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	pop	iy
	ld	e,(ix+8)
	ld	d,(ix+9)
	ld	hl,80h
	call	wrelop
	jp	p,loc_6D51
	ld	l,(ix+8)
	ld	h,(ix+9)
	dec	hl
	dec	hl
	dec	hl
	ld	(iy+0),l
	ld	(iy+1),h
	ld	de,3
	add	iy,de
	ld	(iy+-1),80h
	jr	loc_6D5B
loc_6D51:
	ld	a,(ix+8)
	add	a,0FFh
	ld	(iy+0),a
	inc	iy
loc_6D5B:
	push	iy
	pop	hl
	jp	cret

;=========================================================
; sub_6D61
;=========================================================
	global	_sub_6D61
	global	_word_B023
	global	_sub_7028

_sub_6D61:
	call	ncsv
	defw	0FFF7h
	ld	(ix+-9),0
loc_6D6A:
	ld	hl,_word_B023+1
	ld	(ix+-8),l
	ld	(ix+-7),h
	jp	loc_6EC0
loc_6D76:
	push	iy
	pop	hl
	ld	(ix+-4),l
	ld	(ix+-3),h
	ld	a,(iy+-1)
	ld	l,a
	rla
	sbc	a,a
	bit	7,l
	ld	l,(ix+-4)
	dec	hl
	jr	z,loc_6D97
	dec	hl
	dec	hl
	ld	(ix+-4),l
	ld	(ix+-3),h
	jr	loc_6D9D
loc_6D97:
	ld	(ix+-4),l
	ld	(ix+-3),h
loc_6D9D:
	ld	hl,_word_B023+1
	ld	(ix+-6),l
	ld	(ix+-5),h
	jp	loc_6EA3
loc_6DA9:
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	l,e
	ld	h,d
	dec	hl
	bit	7,(hl)
	jr	nz,loc_6DBB
	ld	l,(hl)
	ld	h,0
	jr	loc_6DC1
loc_6DBB:
	dec	hl
	dec	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
loc_6DC1:
	add	hl, de
	ld	e,(ix+-4)
	ld	d,(ix+-3)
	or	a
	sbc	hl,de
	jp	nz,loc_6E97
	push	iy
	pop	de
	ld	l,(ix+-6)
	ld	h,(ix+-5)
	or	a
	sbc	hl,de
	jr	nz,loc_6DF0
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	l,(ix+-8)
	ld	h,(ix+-7)
	ld	(hl),c
	inc	hl
	ld	(hl),b
	jr	loc_6E33
loc_6DF0:
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	l,(ix+-8)
	ld	h,(ix+-7)
	or	a
	sbc	hl,de
	jr	nz,loc_6E12
	ld	e,(iy+0)
	ld	d,(iy+1)
	ld	l,(ix+-6)
	ld	h,(ix+-5)
	ld	(hl),e
	inc	hl
	ld	(hl),d
	jr	loc_6E33
loc_6E12:
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	l,(ix+-6)
	ld	h,(ix+-5)
	ld	(hl),c
	inc	hl
	ld	(hl),b
	ld	e,(iy+0)
	ld	d,(iy+1)
	ld	l,(ix+-8)
	ld	h,(ix+-7)
	ld	(hl),e
	inc	hl
	ld	(hl),d
loc_6E33:
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	dec	hl
	ld	a,(hl)
	ld	l,a
	rla
	sbc	a,a
	bit	7,l
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	dec	hl
	jr	z,loc_6E53
	dec	hl
	dec	hl
	ld	(ix+-2),l
	ld	(ix+-1),h
	jr	loc_6E59
loc_6E53:
	ld	(ix+-2),l
	ld	(ix+-1),h
loc_6E59:
	bit	7,(iy+-1)
	jr	nz,loc_6E66
	ld	l,(iy+-1)
	ld	h,0
	jr	loc_6E6C
loc_6E66:
	ld	l,(iy+-3)
	ld	h,(iy+-2)
loc_6E6C:
	push	hl
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,0
	or	a
	sbc	hl,de
	pop	de
	add	hl,de
	push	iy
	pop	de
	add	hl,de
	push	hl
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	push	hl
	call	_sub_6D1C
	pop	bc
	ex	(sp),hl
	call	_sub_7028
	pop	bc
	ld	(ix+-9),1
	jp	loc_6D6A
loc_6E97:
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	ld	(ix+-6),l
	ld	(ix+-5),h
loc_6EA3:
	ld	l,(ix+-6)
	ld	h,(ix+-5)
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	(ix+-2),c
	ld	(ix+-1),b
	ld	a,c
	or	b
	jp	nz,loc_6DA9
	push	iy
	pop	hl
	ld	(ix+-8),l
	ld	(ix+-7),h
loc_6EC0:
	ld	l,(ix+-8)
	ld	h,(ix+-7)
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	push	bc
	pop	iy
	ld	a,c
	or	b
	jp	nz,loc_6D76
	jp	cret

;=========================================================
; cmalloc
;=========================================================
	global	_cmalloc
	global	wrelop
	global	_sbrk

_cmalloc:
	call	ncsv
	defw	0FFFBh
	ld	de,2
	ld	l,(ix+6)
	ld	h,(ix+7)
	call	wrelop
	jr	nc,loc_6EEF
	ld	(ix+6),2
	ld	(ix+7),0
loc_6EEF:
	ld	(ix+-5),0
loc_6EF3:
	ld	iy,_word_B023+1
	jp	loc_6FBD
loc_6EFA:
	ld	e,(ix+6)
	ld	d,(ix+7)
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	dec	hl
	bit	7,(hl)
	jr	nz,loc_6F10
	ld	l,(hl)
	ld	h,0
	jr	loc_6F16
loc_6F10:
	dec	hl
	dec	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
loc_6F16:
	call	wrelop
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	jp	c,loc_6FBA
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	(iy+0),c
	ld	(iy+1),b
	dec	hl
	push	hl
	pop	iy
	bit	7,(iy+-1)
	jr	nz,loc_6F3C
	ld	l,(iy+-1)
	ld	h,0
	jr	loc_6F42
loc_6F3C:
	ld	l,(iy+-3)
	ld	h,(iy+-2)
loc_6F42:
	ex	de,hl
	push	ix
	pop	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	push	de
	ld	e,(ix+6)
	ld	d,(ix+7)
	ld	hl,6
	add	hl,de
	pop	de
	call	wrelop
	push	iy
	jr	nc,loc_6FB6
	pop	de
	ld	l,(ix+6)
	ld	h,(ix+7)
	add	hl,de
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	e,(ix+6)
	ld	d,(ix+7)
	ld	l,(ix+-4)
	ld	h,(ix+-3)
	or	a
	sbc	hl,de
	push	hl
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	push	hl
	call	_sub_6D1C
	pop	bc
	ex	(sp),hl
	call	_sub_7028
	pop	bc
	ld	a,(iy+-1)
	ld	l,a
	rla
	sbc	a,a
	ld	h,a
	bit	7,l
	jr	z,loc_6FA0
	ld	de,0FFFDh
	add	iy,de
	jr	loc_6FA5
loc_6FA0:
	ld	de,0FFFFh
	add	iy,de
loc_6FA5:
	ld	l,(ix+6)
	ld	h,(ix+7)
loc_6FAB:
	push	hl
	push	iy
	call	_sub_6D1C
	pop	bc
	pop	bc
	jp	cret
loc_6FB6:
	pop	hl
	jp	cret
loc_6FBA:
	push	hl
	pop	iy
loc_6FBD:
	ld	l,(iy+0)
	ld	h,(iy+1)
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	a,l
	or	h
	jp	nz,loc_6EFA
	ld	a,(ix+-5)
	or	a
	jr	nz,loc_6FDF
	call	_sub_6D61
	ld	a,l
	ld	(ix+-5),a
	or	a
	jp	nz,loc_6EF3
loc_6FDF:
	ld	de,80h
	ld	l,(ix+6)
	ld	h,(ix+7)
	call	wrelop
	jr	c,loc_6FF2
	ld	hl,3
	jr	loc_6FF5
loc_6FF2:
	ld	hl,1
loc_6FF5:
	ld	(ix+-4),l
	ld	(ix+-3),h
	ex	de,hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	add	hl,de
	push	hl
	call	_sbrk
	pop	bc
	push	hl
	pop	iy
	ld	de,0FFFFh
	or	a
	sbc	hl,de
	jr	nz,loc_7019
	ld	hl,0
	jp	cret
loc_7019:
	ld	e,(ix+-4)
	ld	d,(ix+-3)
	ld	l,(ix+6)
	ld	h,(ix+7)
	add	hl,de
	jr	loc_6FAB

;=========================================================
; sub_7028
;=========================================================
_sub_7028:
	call	csv
	ld	iy,_word_B023+1
	jr	loc_703A
loc_7031:
	ld	l,(iy+0)
	ld	h,(iy+1)
	push	hl
	pop	iy
loc_703A:
	ld	a,(iy+0)
	or	(iy+1)
	jr	z,loc_7074
	ld	l,(ix+6)
	ld	h,(ix+7)
	dec	hl
	bit	7,(hl)
	jr	nz,loc_7052
	ld	l,(hl)
	ld	h,0
	jr	loc_7058
loc_7052:
	dec	hl
	dec	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
loc_7058:
	ex	de,hl
	ld	l,(iy+0)
	ld	h,(iy+1)
	dec	hl
	bit	7,(hl)
	jr	nz,loc_7069
	ld	l,(hl)
	ld	h,0
	jr	loc_706F
loc_7069:
	dec	hl
	dec	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
loc_706F:
	call	wrelop
	jr	c,loc_7031
loc_7074:
	ld	e,(iy+0)
	ld	d,(iy+1)
	ld	l,(ix+6)
	ld	h,(ix+7)
	ld	(hl),e
	inc	hl
	ld	(hl),d
	dec	hl
	ld	(iy+0),l
	ld	(iy+1),h
	jp	cret

;=========================================================
; 708D printf
;=========================================================
;    printf(char * f, int a) {
;
;	return(_doprnt(stdout, f, &a));
;    }
;
	global	_printf
	global	__doprnt
	global	__iob

	psect	text

_printf:
	call csv
	push	ix
	pop	de
	ld	hl,8
	add	hl,de
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	ld	hl,__iob+8
	push	hl
	call	__doprnt
	pop	bc
	pop	bc
	pop	bc
	jp	cret

;=========================================================
; 70AC getchar
;=========================================================
;    getchar() {
;	return(fgetc(stdin));
;    }
;
	global	_getchar
	global	_fgetc
	global	__iob

	psect	text

_getchar:
	ld	hl,__iob
	push	hl
	call	_fgetc
	pop	bc
	ret	

;=========================================================
; 70B5 putchar
;=========================================================
;    putchar(c) {
;	return(fputc(c, stdout));
;    }
;
	global	_putchar
	global	_fputc

_putchar:
	call	csv
	ld	hl,__iob+8
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	call	_fputc
	pop	bc
	pop	bc
	jp	cret

;=========================================================
; * 70CB toupper
;=========================================================
;    char toupper(char c) {
;	if(c >= 'a' && c <= 'z') c += 'A' - 'a';
;	return c;
;    }
;
	global	_toupper
	global	brelop
	global	wrelop

	psect	text

_toupper:
	call	csv
	ld	b,'a'
	ld	a,(ix+6)
	call	brelop
	jp	m,loc_70F2
	ld	a,(ix+6)
	ld	e,a
	rla
	sbc	a,a
	ld	d,a
	ld	hl,'z'
	call	wrelop
	jp	m,loc_70F2
	ld	a,(ix+6)
	add	a,224	; 'A' - 'a'
	ld	l, a
	jp	cret
loc_70F2:
	ld	l,(ix+6)
	jp	cret	

;=========================================================
; sub_70F8 def_fcb Define FCB fields
;=========================================================
;    char def_fcb(register struct fcb * fc, char * fname) {
;	char * cp;
;
;	fc->dr = 0;
;	if(*(fname+1) == ':') {		
;	    fc->dr = *(fname) & 0xf;	
;	    fname += 2;			
;	}					
;	cp = &fc->name;
;	while((*fname != '.')
;	&& ('\t' < *fname)		
;	&& (cp < &fc->ft))  *(cp++) = toupper(*(fname++));
;	while(cp < &fc->ft) *(cp++) = ' ';
;	do {if(*fname == 0) break;} while(*(fname++) != '.');	
;	while(('\t' < *(fname))
;	&& (cp < (char*)&fc->ex)) *(cp++) = toupper(*(++fname));
;	while(cp <= (char*)&fc->ex) *(cp++) = ' ';
;	fc->ex = fc->nr =  0;		
;	return 0;
;    }
;
	global	_def_fcb
	global	_toupper
	global	wrelop

	psect	text

_def_fcb:
	call 	csv
	push 	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	pop	iy
	ld	(iy+0),0
	ld	l,(ix+8)
	ld	h,(ix+9)
	inc	hl
	ld	a,(hl)
	cp	58
	jr	nz,loc_712D
	dec	hl
	ld	a,(hl)
	ld	l,a
	rla
	ld	a,l
	and	15
	ld	(iy+0),a
	ld	l,(ix+8)
	ld	h,(ix+9)
	inc	hl
	inc	hl
	ld	(ix+8),l
	ld	(ix+9),h
loc_712D:
	push	iy
	pop	hl
	inc	hl
	ld	(ix+-2),l
	ld	(ix+-1),h
	jr	loc_7160
loc_7139:
	ld	l,(ix+8)
	ld	h,(ix+9)
	ld	a,(hl)
	inc	hl
	ld	(ix+8),l
	ld	(ix+9),h
	ld	l,a
	rla
	sbc	a,a
	ld	h,a
	push	hl
	call	_toupper
	pop	bc
	ld	e,l
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	inc	hl
	ld	(ix+-2),l
	ld	(ix+-1),h
	dec	hl
	ld	(hl),e
loc_7160:
	ld	l,(ix+8)
	ld	h,(ix+9)
	ld	a,(hl)
	cp	46
	jr	z,loc_719E
	ld	a,(hl)
	ld	e,a
	rla
	sbc	a,a
	ld	d,a
	ld	hl,9
	call	wrelop
	push	iy
	pop	de
	ld	hl,9
	jp	p,loc_71A4
	add	hl,de
	ex	de,hl
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	call	wrelop
	jr	c,loc_7139
	jr	loc_719E
loc_718E:
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	inc	hl
	ld	(ix+-2),l
	ld	(ix+-1),h
	dec	hl
	ld	(hl),32
loc_719E:
	push	iy
	pop	de
	ld	hl,9
loc_71A4:
	add	hl,de
	ex	de,hl
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	call	wrelop
	jr	c,loc_718E
loc_71B1:
	ld	l,(ix+8)
	ld	h,(ix+9)
	ld	a,(hl)
	or	a
	ld	a,(hl)
	jr	z,loc_71F7
	inc	hl
	ld	(ix+8),l
	ld	(ix+9),h
	cp	46
	jr	nz,loc_71B1
	jr	loc_71F0
loc_71C9:
	ld	l,(ix+8)
	ld	h,(ix+9)
	ld	a,(hl)
	inc	hl
	ld	(ix+8),l
	ld	(ix+9),h
	ld	l,a
	rla
	sbc	a,a
	ld	h,a
	push	hl
	call	_toupper
	pop	bc
	ld	e,l
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	inc	hl
	ld	(ix+-2),l
	ld	(ix+-1),h
	dec	hl
	ld	(hl),e
loc_71F0:
	ld	l,(ix+8)
	ld	h,(ix+9)
	ld	a,(hl)
loc_71F7:
	ld	e,a
	rla
	sbc	a,a
	ld	d,a
	ld	hl,9
	call	wrelop
	push	iy
	pop	de
	ld	hl,12
	jp	p,loc_722F
	add	hl,de
	ex	de,hl
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	call	wrelop
	jr	c,loc_71C9
	jr	loc_7229
loc_7219:
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	inc	hl
	ld	(ix+-2),l
	ld	(ix+-1),h
	dec	hl
	ld	(hl),32
loc_7229:
	push	iy
	pop	de
	ld	hl,12
loc_722F:
	add	hl,de
	ex	de,hl
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	call	wrelop
	jr	c,loc_7219
	xor	a
	ld	(iy+32),a
	ld	(iy+12),a
	ld	l,a
	jp	cret

;=========================================================
; sub_7247 sprintf
;=========================================================
;    static FILE spf;
; 
;	int sprintf(char * wh, char * f, int a) {
;	spf._cnt = 32767;
;	spf._ptr = wh;
;	spf._flag = _IOWRT|_IOBINARY
;	_doprnt(&spf, f, &a);
;	*spf._ptr = 0;
;	return spf._ptr - wh;
;    }
;
	global	_sprintf
	global	__doprnt

	psect	text

_sprintf:
	call 	csv
	ld	hl,32767
	ld	(_spf+2),hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	ld	(_spf),hl
	ld	hl,_spf+6
	ld	(hl),82h
	push	ix
	pop	de
	ld	hl,10
	add	hl,de
	push	hl
	ld	l,(ix+8)
	ld	h,(ix+9)
	push	hl
	ld	hl,_spf
	push	hl
	call	__doprnt
	pop	bc
	pop	bc
	pop	bc
	ld	hl,(_spf)
	ld	(hl),0
	ld	e,(ix+6)
	ld	d,(ix+7)
	or	a
	sbc	hl,de
	jp	cret

	psect	bss

_spf:	defs	8

	psect	text

;=========================================================
; sub_7288 pputc
;=========================================================
;    FILE * word_B02F;
;
;    int sub_7288(int c) fputc(c, word_B02F);
;
	global	_fputc
	global	_ffile

	psect	text

_pputc:
	call 	csv
	ld	hl,(_ffile)
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	call	_fputc
	jp	cret

;	psect	bss	; Data has been temporarily moved to another location.

;_ffile:	defs	2

	psect	text

;=========================================================
; * sub_729C pnum
;=========================================================
;    char  left;
;    uchar base;
;
;    int pputc(int);
;
;    pnum(long i) {
;	long j;
;	
;	left--;
;	if((j = i/base) != 0) pnum(j);
;	while ((int)left > 0) {
;	    left--;
;	    pputc(' ');
;	}
;	pputc((uchar)"0123456789ABCDEF"[i%base]);
;	return;
;    }
;
	global	__pnum
	global	_left
	global	_base
	global	_ffile
	global	lldiv
	global	_pputc
	global	wrelop
	global	llmod

	psect	text

__pnum:
	call 	csv
	push 	hl
	push 	hl
	ld	a,(_left)
	ld	e, a
	dec	a
	ld	(_left),a
	ld	a,(_base)
	ld	hl,0
	ld	d,l
	ld	e,a
	push	hl
	push	de
	ld	e,(ix+6)
	ld	d,(ix+7)
	ld	l,(ix+8)
	ld	h,(ix+9)
	call	lldiv
	ld	(ix+-4),e
	ld	(ix+-3),d
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	a,e
	or	d
	or	l
	or	h
	jr	z,loc_72ED
	push	hl
	push	de
	call	__pnum
	pop	bc
	pop	bc
	jr	loc_72ED
loc_72DD:
	ld	a,(_left)
;	sub	1
	ld	e,a
	dec	a
	ld	(_left),a
	ld	hl,32
	push	hl
	call	_pputc
	pop	bc
loc_72ED:
	ld	a,(_left)
	ld	e, a
	rla
	sbc	a, a
	ld	d, a
	ld	hl,0
	call	wrelop
	jp	m,loc_72DD
	ld	a,(_base)
	ld	hl,0
	ld	d,l
	ld	e,a
	push	hl
	push	de
	ld	e,(ix+6)
	ld	d,(ix+7)
	ld	l,(ix+8)
	ld	h,(ix+9)
	call	llmod
	ex	de,hl
	ld	de,19f
	add	hl,de
	ld	l,(hl)
	ld	h,0
	push	hl
	call	_pputc
;	pop	bc
	jp	cret

	psect	data

19:	defb	48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70
	defb	0

	psect	bss

_left:		defs	1	; byte_B02E
_ffile:		defs	2	; word_B02F
_base:		defs	1	; byte_B031

	psect	text

;=========================================================
; sub_7325 _doprnt(file, f, a)
;=========================================================
;	_doprnt(FILE * file, register char * f, int * a) {
;	    char  c;
;	    uchar sign, len, width;
;	    long  xxxx;
;	    int   yyyy
;	    ...
;	}
;
	global	__doprnt
	global	_strlen
	global	brelop
	global	wrelop
	global	_atoi
	global	__ctype_
	global	__pnum
	global	_pputc
	global	_left
	global	_base
	global	_ffile

	psect	text

__doprnt:				; sub_7325:
	call	ncsv
	defw	-10	; 0FFF6h
	ld	l,(ix+8)
	ld	h,(ix+9)		;
	push	hl			;
	pop	iy			; f

	ld	l,(ix+6)		;
	ld	h,(ix+7)		;
	ld	(_ffile),hl		; ffile = file;
	jp	loc_74A7		; goto m15;

loc_733F:			; m1:
	ld	a,(ix+-1)
	cp	'%'
	jr	z,loc_7351		; if(c == '%') goto m3;
	
	ld	l,a
	ld	h,0
	push	hl

loc_734A:			; m2:
	call	_pputc			; pputc(c);
	pop	bc
	jp	loc_74A7		; goto m15;

loc_7351:			; m3:
	ld	a,0Ah
	ld	(_base),a		; base = 10;
	ld	(ix+-4),0FFh		; -4 width = -1;
	ld	(ix+-2),0		; -2 sign  =  0;
	ld	a,0
	ld	(_left),a		; left = 0;

	ld	(ix+-3),1		; -3 len = sizeof(int)/sizeof *a;

loc_7367:			; m4:
	ld	a,(iy+0)
	inc	iy
	ld	(ix+-1),a		; -1 c = *f++
	or	a			; if(c == 0) return;
	jp	z,cret			; switch(c){
	cp	'*'			; case: '*':
	jr	z,loc_73CF		;   goto m
	cp	'.'			; case: '.':
	jp	z,loc_7565		;   goto m
	cp	'c'			; case: 'c':
	jp	z,loc_74CD		;   goto m
	cp	'd'			; case: 'd':
	jp	z,loc_74B6		;   goto m
	cp	'l'			; case: 'l':
	jr	z,loc_73E0		;   goto m
	cp	'o'			; case: 'o':
	jr	z,loc_73E6		;   goto m
	cp	's'			; case: 's':
	jp	z,loc_74F1		;   goto m
	cp	'u'			; case: 'u':
	jr	z,loc_73EB		;   goto m9;

	ld	b,30h	; '0'
	call	brelop
	jp	m,loc_7599		; if((c >= '0') || (c > '9') goto m26;

	ld	a,(ix+-1)
	ld	e,a
	rla
	sbc	a,a
	ld	d,a
	ld	hl,39h	; '9'
	call	wrelop
	jp	m,loc_7599		; if() goto m26;

	ld	de,0Ah
	ld	a,(_left)
	ld	l,a
	rla
	sbc	a,a
	ld	h,a
	call	amul ; hl*de
	ld	a,l
	ld	(_left),a		; left *= 10;

	ld	a,(ix+-1)
	add	a,0D0h		
	ld	e,a			; e = c+0xd0
	ld	a,(_left)		; left +c+0xd0
	add	a,e

loc_73CA:			; m5:
	ld	(_left),a		; left =
	jr	loc_7367		; goto m4;

loc_73CF:	; '*'		; m6:
	ld	l,(ix+0Ah)
	ld	h,(ix+0Bh) ; a
	ld	a,(hl)
	inc	hl
	inc	hl
	ld	(ix+0Ah),l
	ld	(ix+0Bh),h		; a += sizeof(char*)/sizeof *a;
	jr	loc_73CA		; goto m5;

loc_73E0:	; 'l'		; m7:
	ld	(ix+-3),2		; len = 2;
	jr	loc_7367		; goto m4;

loc_73E6:	; 'o'		; m8:
	ld	a,8
	ld	(_base),a		; base = 8 ;

loc_73EB:	; 'u'		; m9:

	ld	l,(ix+0Ah)
	ld	h,(ix+0Bh) ; a
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	a,d
	rla
	sbc	a,a
	ld	l,a
	ld	h,a
	ld	(ix+-8),e
	ld	(ix+-7),d
	ld	(ix+-6),l
	ld	(ix+-5),h		; a =

	ld	a,(ix+-2) ; sign	;
	or	a			;
	jr	nz,loc_7423		; if(sign != 0) goto m10;

	ld	l,(ix+0Ah)
	ld	h,(ix+0Bh) ; a
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	hl,0
	ld	(ix+-8),e
	ld	(ix+-7),d
	ld	(ix+-6),l
	ld	(ix+-5),h ;

loc_7423:			; m10:
	ld	a,(ix+-3) ; len	;
	cp	1			;
	jr	z,loc_7444		; if(len == 1) goto m11;

	ld	l,(ix+0Ah)
	ld	h,(ix+0Bh) ; a
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	(ix+-8),e
	ld	(ix+-7),d
	ld	(ix+-6),l
	ld	(ix+-5),h ; xxxx 

loc_7444:			; m11:
	ld	a,(ix+-2) ; sign
	or	a
	jr	z,loc_7480		; if(sign == 0)  goto m12;

	bit	7,(ix+-5)

	ld	e,(ix+-8)
	ld	d,(ix+-7)
	ld	l,(ix+-6)
	ld	h,(ix+-5) ; xxxx
	push	hl
	push	de
	jr	z,loc_748E		; if( == ) goto m13;

	ld	hl,0
	pop	bc
	or	a
	sbc	hl,bc
	pop	bc
	ex	de,hl
	ld	hl,0
	sbc	hl,bc
	ld	(ix+-8),e
	ld	(ix+-7),d
	ld	(ix+-6),l
	ld	(ix+-5),h ; xxxx

	ld	hl,'-'
	push	hl
	call	_pputc			; pputc('-');
	pop	bc

loc_7480:			; m12:
	ld	e,(ix+-8)
	ld	d,(ix+-7)
	ld	l,(ix+-6)
	ld	h,(ix+-5) ; xxxx
	push	hl
	push	de

loc_748E:			; m13:
	call	__pnum			;
	pop	bc			;
	pop	bc			;
	ld	l,(ix+-3) ; len	;
	ld	h,0			;
	add	hl,hl			;
	ex	de,hl			;
	ld	l,(ix+0Ah)		;
	ld	h,(ix+0Bh) ; a		;
	add	hl,de			;
	ld	(ix+0Ah),l		;

loc_74A4:			; m14:
	ld	(ix+0Bh),h		; a =

loc_74A7:			; m15:
	ld	a,(iy+0)		;
	inc	iy			;			
	ld	(ix+-1),a		; (c = *(++f))
	or	a			;
	jp	nz,loc_733F		; if(c != 0) goto m1;
	jp	cret

loc_74B6:	; 'd'		; m16:
	ld	(ix+-2),1		; sign = 1;
	jp	loc_73EB		; goto m9;

loc_74BD:			; m17:
	ld	hl,' '			;
	push	hl			;
	call	_pputc			; pputc(' ');
	pop	bc			;

	ld	a,(_left)		;
	ld	e,a			;
	dec	a	;-1		;
	ld	(_left),a		; left--;

loc_74CD:	; 'c'		; m18:
	ld	a,(_left); left	;
	ld	e,a			;
	rla				;
	sbc	a,a			;
	ld	d,a			;
	ld	hl,1			;
	call	wrelop			; if(reg_hl-reg_de)
	jp	m,loc_74BD		; if(  ) goto m17;

	ld	l,(ix+0Ah)		;
	ld	h,(ix+0Bh) ; a		;
	ld	c,(hl)			;
	inc	hl			;
	ld	b,(hl)			;
	inc	hl			;
	ld	(ix+0Ah),l		;
	ld	(ix+0Bh),h		; a =
	push	bc
	jp	loc_734A		; goto m2;

loc_74F1:	; 's'		; m19:
	ld	l,(ix+0Ah)		;
	ld	h,(ix+0Bh)		;
	ld	c,(hl)			;
	inc	hl			;
	ld	b,(hl)			;
	inc	hl			;
	ld	(ix+0Ah),l		;
	ld	(ix+0Bh),h		; a += sizeof(char*)/sizeof *a;

	ld	(ix+-10),c
	ld	(ix+-9),b		; file =
	ld	l,c
	ld	h,b
	push	hl
	call	_strlen			; int strlen(char *s);
	pop	bc
	ld	(ix+-2),l		; sign	=

	ld	b,(ix+-4)		; width
	ld	a,l			;
	call	brelop			;
	jr	nc,loc_7532		; if(reg_a==reg_b) goto m21;

	ld	a,(ix+-2)		;
	ld	(ix+-4),a		; width = sign;
	jr	loc_7532		; goto m21;

loc_7522:			; m20:
	ld	hl,' '
	push	hl
	call	_pputc			; pputc(' ');
	pop	bc

	ld	a,(_left)		;
	ld	e,a			;
	dec	a			;
	ld	(_left),a		; left--;

loc_7532:			; m21:

	ld	a,(_left) ; left
	ld	e,a
	ld	d,0
	ld	l,(ix+-4) ; width
	ld	h,d
	call	wrelop
	jr	c,loc_7522		; if(reg_hl-reg_de) goto m20;
	jr	loc_7559		; goto m23;

loc_7543:			; m22:
	ld	l,(ix+-10)		;
	ld	h,(ix+-9)		;
	inc	hl			;
	ld	(ix+-10),l		;
	ld	(ix+-9),h ; file++;	;
	dec	hl			;
	ld	l,(hl)			;
	ld	h,0			;
	push	hl			;
	call	_pputc			; pputc(*(file++));
	pop	bc

loc_7559:			; m23:
	ld	a,(ix+-4)		;
	dec	(ix+-4)		;
	or	a			;
	jr	nz,loc_7543		; if(width != 0) goto m22;
	jp	loc_74A7		; goto m15;

loc_7565:	; '.'		; m24:
	ld	a,(iy+0)		
	cp	'*'
	jr	nz,loc_7587		; if(*f != '*') goto m25;

	ld	l,(ix+0Ah)
	ld	h,(ix+0Bh)
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	inc	hl
	ld	(ix+0Ah),l
	ld	(ix+0Bh),h		; a += sizeof(char*)/sizeof *a;
	push	bc
	call	_atoi
	pop	bc
	ld	(ix+-4),l		; width = atoi(*a);
	jp	loc_7367		; goto m4;

loc_7587:			; m25:
	ld	a,(iy+0)
	ld	l,a
	rla
	sbc	a,a
	ld	h,a
	ld	a,l
	add	a,0D0h
	ld	(ix+-4),a		; width = *f+0xD0;
	inc	iy			; f++;
	jp	loc_7367		; goto m4;

loc_7599:			; m26:

	ld	l,(ix+-1) ; c
	ld	h,0
	push	hl
	jp	loc_734A		; goto m2;

;=========================================================
;	Offsets of things in the _iob structure

	ptr	equ	0	; pointer to next byte
	cnt	equ	2	; number of bytes left
	base	equ	4	; beginning of buffer
	flag	equ	6	; flag bits
	file	equ	7	; file number

;	The bit numbers of the flags in flag
	
	_IOREAD_BIT	equ	0
	_IOWRT_BIT	equ	1
	_IONBF_BIT	equ	2
	_IOMYBUF_BIT	equ	3
	_IOEOF_BIT	equ	4
	_IOERR_BIT	equ	5
	_IOSTRG_BIT	equ	6
	_IOBINARY_BIT	equ	7

;	Various characters

	CPMEOF	equ	032q	; EOF byte 
	NEWLINE	equ	012q	; newline character 
	RETURN	equ	015q	; carriage return 

	EOF	equ	-1	; stdio EOF value

;=========================================================
; 75A2 fputc(uchar c, FILE * f) from library
;=========================================================
;	#include	<stdio.h>
;	
;	fputc(c, f) register FILE * f; uchar c; {
;	    if(!(f->_flag & _IOWRT)) return EOF;
;	    if((f->_flag & _IOBINARY) == 0 && c == '\n')
;	        fputc('\r', f);
;		if(f->_cnt > 0) {
;		    f->_cnt--;
;		    *f->_ptr++ = c;
;		} else
;		    return _flsbuf(c, f);
;		return c;
;	}
;
;*Include	stdio.i

	global	_fputc, __flsbuf
	psect	text
_fputc:
	pop	de			;return address
	pop	bc			;character argument
	ld	b,0			;so zero the top byte
	ex	(sp),iy			;save iy and get file pointer
	bit	_IOWRT_BIT,(iy+flag)	;are we reading
	jr	z,reteof1
	bit	_IOBINARY_BIT,(iy+flag)	;binary mode?
	jr	nz,2f			;yes, just return
	ld	a,c			;is it a newline?
	cp	NEWLINE
	jr	nz,2f			;no
	push	bc			;save thingos
	push	de
	push	iy			;file argument
	ld	hl,RETURN
	push	hl
	call	_fputc
	pop	hl			;unjunk stack
	pop	bc
	pop	de
	pop	bc
2:
	ld	l,(iy+cnt)
	ld	h,(iy+cnt+1)
	ld	a,l			;check count
	or	h
	jr	z,1f			;no room at the inn
	dec	hl			;update count
	ld	(iy+cnt),l
	ld	(iy+cnt+1),h
	ld	l,(iy+ptr)
	ld	h,(iy+ptr+1)		;get pointer
	ld	(hl),c			;store character
	inc	hl			;bump pointer
	ld	(iy+ptr),l
	ld	(iy+ptr+1),h
3:
	ex	(sp),iy			;restore iy
	push	bc			;fix stack up
	push	de
	ld	l,c
	ld	h,b			;return the character
	ret

1:
	ex	(sp),iy			;restore the stack to what it was
	push	bc
	push	de			;return address and all
	jp	__flsbuf		;let flsbuf handle it

reteof1:
	ld	bc,-1
	jr	3b

;=========================================================
; 75FA flsbuf 		Push next buffer to file
;=========================================================
;	int _flsbuf(int c, register FILE * f) {
;	    struct fcb * p;
;
;	    sub_77F5();	/* Test ^c */
;	    p = _fcb + (f - stdin);
;
;	    if(f->_flag & _IOWRT) {
;		if(f->_base == (char *)NULL) {
;	    	    f->_cnt = 0;
;	    	    if((char)(p->rwp) == 4) {
;			bdos(CPMWCON, c);
;			return c;
;		    }
;	    	    return -1;
;		} else {
;		    fflush(f);
;	    	    *(f->_ptr++) = c;
;	    	    f->_cnt--;
;		}
;		return c;
;	    }
;	    return -1;
;	}
;
	global	__flsbuf
	global	_sub_77F5
	global	__fcb
	global	__iob
	global	adiv
	global	amul
	global	_bdos
	global	_fflush

	psect	text

__flsbuf:
	call	csv
	push	hl
	ld	l,(ix+8)
	ld	h,(ix+9)
	push	hl
	pop	iy
	call	_sub_77F5
	ld	de,__iob
	push	iy
	pop	hl
	or	a
	sbc	hl,de
	ld	de,8
	call	adiv
	ld	de,41
	call	amul
	ld	de,__fcb
	add	hl,de
	ld	(ix+-2),l
	ld	(ix+-1),h
	bit	1,(iy+6)
	jr	z,loc_7689
	ld	a,(iy+4)
	or	(iy+5)
	jr	nz,loc_7662
	ld	(iy+2),0
	ld	(iy+3),0
	ex	de,hl
	ld	hl,36
	add	hl,de
	ld	a,(hl)
	cp	4
	jr	nz,loc_7689
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	ld	hl,2
	push	hl
	call	_bdos
	pop	bc
	pop	bc
loc_7659:
	ld	l,(ix+6)
	ld	h,(ix+7)
	jp	cret
loc_7662:
	push	iy
	call	_fflush
	pop	bc
	ld	a,(ix+6)
	ld	l,(iy+0)
	ld	h,(iy+1)
	inc	hl
	ld	(iy+0),l
	ld	(iy+1),h
	dec	hl
	ld	(hl),a
	ld	l,(iy+2)
	ld	h,(iy+3)
	dec	hl
	ld	(iy+2),l
	ld	(iy+3),h
	jr	loc_7659
loc_7689:
	ld	hl,-1
	jp	cret

;=========================================================
; 768F fgetc(FILE * f) from libraty
;=========================================================
;    fgetc(f) register FILE * f; {
;	int c;
;	
;	if(f->_flag & _IOEOF || !(f->_flag & _IOREAD)) {
;    reteof:
;	    f->_flag |= _IOEOF;
;	    return EOF;
;	}
;    loop:
;	if(f->_cnt > 0) {
;	    c = (unsigned)*f->_ptr++;
;	    f->_cnt--;
;	} else if(f->_flag & _IOSTRG)
;	    goto reteof;
;	else
;	    c = _filbuf(f);
;	if(f->_flag & _IOBINARY)
;	    return c;
;	if(c == '\r')
;	    goto loop;
;	if(c == CPMEOF) {
;	    f->_cnt++;
;	    f->_ptr--;
;	    goto reteof;
;	}
;	return c;
;    }

;	The assembler version of the above routine

;*Include	stdio.i
	global	_fgetc, __filbuf
	psect	text

_fgetc:
	pop	de			;get return address off stack
	ex	(sp),iy			;save iy and get arguement into iy
	ld	a,(iy+flag)		;get flag bits
	bit	_IOREAD_BIT,a
	jr	z,reteof		;return EOF if not open for read
	bit	_IOEOF_BIT,a		;Already seen EOF?
	jr	nz,reteof		;yes, repeat ourselves

loop:
	ld	l,(iy+cnt)
	ld	h,(iy+cnt+1)
	ld	a,l
	or	h			;any bytes left?
	jr	z,1f			;no, go get some more
	dec	hl
	ld	(iy+cnt),l		;update count
	ld	(iy+cnt+1),h
	ld	l,(iy+ptr)		;get the pointer
	ld	h,(iy+ptr+1)
	ld	a,(hl)
	inc	hl
	ld	(iy+ptr),l		;update pointer
	ld	(iy+ptr+1),h
2:
	bit	_IOBINARY_BIT,(iy+flag)	;Binary mode?
	jr	z,3f			;no, check for EOF etc
retch:
	ld	l,a			;return the character in a
	ld	h,0
	ex	(sp),iy			;restore iy
	push	de			;put return address back
	ret				;with char in hl

3:
	cp	RETURN			;carriage return
	jr	z,loop			;yes, get another instead
	cp	CPMEOF			;end of file?
	jr	nz,retch		;no, return it!

;	ld	a,(iy+base)		;buffered?
;	or	(iy+base+1)
;	jr	z,reteof		;yup, leave count alone

	ld	l,(iy+cnt)
	ld	h,(iy+cnt+1)
	inc	hl			;reset count
	ld	(iy+cnt),l
	ld	(iy+cnt+1),h

	ld	l,(iy+ptr)
	ld	h,(iy+ptr+1)
	dec	hl			;reset pointer
	ld	(iy+ptr),l
	ld	(iy+ptr+1),h
reteof:
	set	_IOEOF_BIT,(iy+flag)	;note EOF
	ld	hl,EOF
	ex	(sp),iy			;restore iy
	push	de
	ret				;return with EOF in hl

1:
	bit	_IOSTRG_BIT,(iy+flag)	;end of string?
	jr	nz,reteof		;yes, return EOF
	push	de			;save de
	push	iy			;pass iy as argument
	call	__filbuf		;refill the buffer
	ld	a,l			;the returned value
	pop	bc
	pop	de			;return address in de again
	bit	7,h
	jr	nz,reteof		;returned EOF
	jr	2b

;=========================================================
; sub_770B filbuf			   Used in: fgetc
;=========================================================
;    int filbuf(register FILE * f) {
;	struct fcb * p;
;
;	p = _fcb + (f - stdin);
;	f->_cnt = 0;
;	sub_77F5();
;	if((char)p->rwp == 1) {
;	    for(f->_ptr = f->_base; f->_ptr < f->_base+BUFSIZ; f->_ptr += 0x80) {
;		bdos(CPMSDMA, f->_ptr);
;		if(bdos(CPMREAD, p) != 0) break;
;	    }
;	    f->_cnt = f->_ptr - f->_base;
;	    f->_ptr = f->_base;
;	    if(f->_cnt == 0) return -1;
;	    f->_cnt--;
;	    return (unsigned char)*(f->_ptr++);
;	}
;	return -1;
;    }
;
	global	__filbuf
	global	__fcb
	global	__iob
	global	adiv
	global	amul
	global	_sub_77F5
	global	_bdos
	global	wrelop

	psect	text

__filbuf:
	call	csv
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	pop	iy
	ld	de,__iob
	push	iy
	pop	hl
	or	a
	sbc	hl,de
	ld	de,8
	call	adiv
	ld	de,41
	call	amul
	ld	de,__fcb
	add	hl,de
	ld	(ix+-2),l
	ld	(ix+-1),h

	ld	(iy+2),0
	ld	(iy+3),0

	call	_sub_77F5
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,36
	add	hl,de
	ld	a,(hl)
	cp	1
	jp	nz,loc_77CE

	ld	l,(iy+4)
	ld	h,(iy+5)
	ld	(iy+0),l
	ld	(iy+1),h
	jr	loc_7793

loc_7760:
	ld	l,(iy+0)
	ld	h,(iy+1)
	push	hl
	ld	hl,26 ; Set DMA adr
	push	hl
	call	_bdos
	pop	bc
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	ex	(sp),hl
	ld	hl,20 ; Read next record
	push	hl
	call	_bdos
	pop	bc
	pop	bc
	ld	a,l
	or	a
	jr	nz,loc_77A9

	ld	de,128
	ld	l,(iy+0)
	ld	h,(iy+1)
	add	hl,de
	ld	(iy+0),l
	ld	(iy+1),h

loc_7793:
	ld	e,(iy+4)
	ld	d,(iy+5)
	ld	hl,512
	add	hl,de
	ex	de,hl
	ld	l,(iy+0)
	ld	h,(iy+1)
	call	wrelop
	jr	c,loc_7760

loc_77A9:
	ld	e,(iy+4)
	ld	d,(iy+5)
	ld	l,(iy+0)
	ld	h,(iy+1)
	or	a
	sbc	hl,de
	ld	(iy+2),l
	ld	(iy+3),h
	ld	l,e
	ld	h,d
	ld	(iy+0),l
	ld	(iy+1),h
	ld	a,(iy+2)
	or	(iy+3)
	jr	nz,loc_77D4

loc_77CE:
	ld	hl,-1
	jp	cret

loc_77D4:
	ld	l,(iy+2)
	ld	h,(iy+3)
	dec	hl
	ld	(iy+2),l
	ld	(iy+3),h
	ld	l,(iy+0)
	ld	h,(iy+1)
	inc	hl
	ld	(iy+0),l
	ld	(iy+1),h
	dec	hl
	ld	l,(hl)
	ld	h,0
	jp	cret

;=========================================================
; sub_77F5	Test ^c
;=========================================================
;    #define CPMRCON	1	/* read console */
;    #define	CPMICON	11	/* interrogate console ready */
;
;    char sub_77F5() {	/* Test ^c */
;	char * st;
;	
;	if(bdos(CPMICON) == 0) return;	   /* status console */
;	if(( *st=bdos(CPMRCON)) != 3) return;  /* read console   */
;	exit();
;    }
;
	global	_sub_77F5
	global	_exit

	psect	text

_sub_77F5:
	call	csv
	push 	hl
	ld	hl,11	; CPMICON - interrogate console ready
	push	hl
	call	_bdos
	pop	bc
	ld	a,l
	or	a
	jp	z,cret
	ld	hl,1	; CPMRCON - read console
	push	hl
	call	_bdos
	pop	bc
	ld	e,l
	ld	(ix+-1),e
	ld	a,e
	cp	3
	jp	nz,cret
	call	_exit
	jp	cret

;=========================================================
; 781E exit
;=========================================================
;	#include "stdio.h"
;
;	#define	uchar	unsigned char
;	#define	MAXFILE 5
;	#define WPOKE(addr, word) *((unsigned *)addr) = (unsigned)word
;
;	void exit(int code) {
;	    uchar i;
;	    register FILE * ip;
;
;	    i = MAXFILE;
;	    ip = _iob;
;	    do {
;		fclose(ip);
;		ip++;
;	    } while(--i);
;	    WPOKE(0x80, code);
;	#asm
;	    call   0	/* Exit; */
;	#endasm
;	}
;
	global	_exit
	global	__iob
	global	_fclose

	psect	text

_exit:
	call	csv
	push	hl
	ld	(ix+-1),5
	ld	iy,__iob
loc_782A:
	push	iy
	pop	hl
	ld	bc,8
	add	hl,bc
	push	hl
	pop	iy		
	sbc	hl,bc
	push	hl
	call	_fclose	
	pop	bc
	ld	a,(ix+-1)
	add	a,0FFh
	ld	(ix+-1),a
	or	a
	jr	nz,loc_782A
	ld	l,(ix+6)
	ld	h,(ix+7)
	ld	(128),hl
	call	0
	jp	cret

;=========================================================
; sub_7855 fclose
;=========================================================
;    int fclose(register FILE * f) {
;	struct fcb * p;
;
;	p = _fcb + (f - stdin);
;	if(!(f->_flag & _IORW)) return EOF; 
;	fflush(f);
;	f->_flag &= ~(_IOREAD|_IOWRT|_IONBF);
;	if((char)p->rwp == 2) goto l1;
;	if(!(ISMPM())) goto l2;
;    l1:
;	bdos(CPMCLS, p);	/* close file */
;    l2:
;	LO_CHAR(p->rwp) = 0;
;	return 0;
;    }
;
	global	_fclose
	global	__fcb
	global	__iob
	global	adiv
	global	amul
	global	_fflush
	global	_bdoshl
	global	_bdos

	psect	text

_fclose:
	call	csv
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	pop	iy
	ld	de,__iob
	push	iy
	pop	hl
	or	a
	sbc	hl,de
	ld	de,8
	call	adiv
	ld	de,41
	call	amul
	ld	de,__fcb
	add	hl,de
	ld	(ix+-2),l
	ld	(ix+-1),h
	ld	a,(iy+6)
	and	3
	or	a
	jr	nz,loc_788F
	ld	hl,-1
	jp	cret
loc_788F:
	push	iy
	call	_fflush
	pop	bc
	ld	a,(iy+6)
	and	248
	ld	(iy+6),a
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,36
	add	hl,de
	ld	a,(hl)
	cp	2
	jr	z,l6
	ld	hl,12
	push	hl
	call	_bdoshl
	pop	bc
	bit	0,h
	jr	z,l8
l6:
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	push	hl
	ld	hl,16	; CPMCLS - close file
	push	hl
	call	_bdos
	pop	bc
	pop	bc
l8:
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,36
	add	hl,de
	ld	(hl),0
	ld	hl,0
	jp	cret

;=========================================================
; 78DA _bdoshl - from libraty
;=========================================================
;	Bdos calls which return values in HL
;	short	bdoshl(fun, arg);

psect	text

entry	equ	5		; CP/M entry point

arg	equ	8		; argument to call
func	equ	6		; desired function


	global	_bdoshl
	global	csv,cret

	psect	text

_bdoshl:
	call	csv
	ld	e,(ix+arg)
	ld	d,(ix+arg+1)
	ld	c,(ix+func)
	push	ix
	call	entry
	pop	ix
	jp	cret		; return value already in hl

;=========================================================
; sub_78F0 - fflush
;=========================================================
;	int fflush(register FILE * f) {
;	    struct fcb * p;
;
;	    p = _fcb + (f - stdin);
;
;	    if(!(f->_flag & _IOWRT)) return -1;
;
;	    if(((unsigned int)f->_cnt & 0x7F) != 0) {
;	        if(p->rwp > 4)  {
;	            *(f->_ptr) = CPMETX;
;	            count--;
;	        }
;	    }
;	    if((f->_ptr = f->_base) == 0) return 0;
;	    f->_cnt = BUFSIZ - f->_cnt;
;	    switch((char)p->rwp) {
;	      case 2:
;		f->_cnt = (f->_cnt+127)/128;
;		for(;;) {
;		    if(f->_cnt-- == 0) break;
;		    bdos(CPMSDMA, f->_ptr);
;		    bdos(CPMWRIT, p);
;		    if(bdos(CPMWRIT, p) != 0) break;
;		    f->_ptr += 128;
;	    	}
;	      case 4:
;		for(;;) {
;		    if(f->_cnt-- == 0) break;
;		    bdos(CPMWCON, *(f->_ptr++));
;	    	}
;	    }
;	    f->_cnt = 0;
;	    f->_ptr = f->_base;
;	    LO_CHAR(f->_cnt) = 0;
;	    HI_CHAR(f->_cnt) = 2;
;	    return 0;
;	}
;
	global	_fflush
	global	__fcb
	global	__iob
	global	adiv
	global	amul
	global	wrelop
	global	_bdos

	psect	text

_fflush:
	call	csv
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	pop	iy
	ld	de,__iob
	push	iy
	pop	hl
	or	a
	sbc	hl,de
	ld	de,8
	call	adiv
	ld	de,41
	call	amul
	ld	de,__fcb
	add	hl,de
	ld	(ix+-2),l
	ld	(ix+-1),h
	bit	1,(iy+6)
	jr	nz,loc_7928
	ld	hl,-1
	jp	cret
loc_7928:			; m0:
	ld	a,(iy+2)
	and	127
	ld	l,a
	xor	a
	ld	h,a
	ld	a,l
	or	h
	jr	z,loc_795B
	ld	b,4	
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,36
	add	hl,de	
	ld	a,(hl)	
	call	brelop	
	jr	nc,loc_795B
	ld	l,(iy+0)
	ld	h,(iy+1)
	ld	(hl),26
	ld	l,(iy+2)
	ld	h,(iy+3)
	dec	hl
	ld	(iy+2),l
	ld	(iy+3),h
loc_795B:			; m1:
	ld	l,(iy+4)
	ld	h,(iy+5)
	ld	(iy+0),l
	ld	(iy+1),h
	ld	a,l
	or	h
	jr	nz,loc_7971
loc_796B:			; m2:
	ld	hl,0
	jp	cret
loc_7971:			; m3:
	ld	e,(iy+2)
	ld	d,(iy+3)
	ld	hl,512
	or	a
	sbc	hl,de
	ld	(iy+2),l
	ld	(iy+3),h

	ld	e,(ix+-2)
	ld	d,(ix+-1)
	ld	hl,36
	add	hl,de
	ld	a,(hl)
	cp	2
	jr	z,loc_79E4
	cp	4
	jr	z,loc_79D0
loc_7996:			; m4:
	ld	(iy+2),0
	ld	(iy+3),0
	ld	l,(iy+4)
	ld	h,(iy+5)
	ld	(iy+0),l
	ld	(iy+1),h
	ld	(iy+2),0
	ld	(iy+3),2
	jr	loc_796B
loc_79B4:			; m5:
	ld	l,(iy+0)
	ld	h,(iy+1)
	ld	a,(hl)
	inc	hl
	ld	(iy+0),l
	ld	(iy+1),h
	ld	l,a
	rla
	sbc	a,a
	ld	h,a
	push	hl
	ld	hl,2
	push	hl
	call	_bdos
	pop	bc
	pop	bc
loc_79D0:	; case 4:	; m6:
	ld	l,(iy+2)
	ld	h,(iy+3)
	dec	hl
	ld	(iy+2),l
	ld	(iy+3),h
	inc	hl
	ld	a,l
	or	h
	jr	nz,loc_79B4
	jr	loc_7996
loc_79E4:	; case 2:	; m7:
	ld	e,(iy+2)
	ld	d,(iy+3)
	ld	hl,7Fh 	
	add	hl,de	
	ld	de,80h  
	call	adiv    
	ld	(iy+2),l
	ld	(iy+3),h
	jr	loc_7A30
loc_79FC:			; m8:
	ld	l,(iy+0)
	ld	h,(iy+1)
	push	hl
	ld	hl,1Ah ;CPMSDMA
	push	hl
	call	_bdos
	pop	bc

	ld	l,(ix+-2)
	ld	h,(ix+-1)
	ex	(sp),hl
	ld	hl,15h ;CPMWRIT
	push	hl
	call	_bdos
	pop	bc
	pop	bc
	ld	a,l
	or	a
	jp	nz,loc_7996
	ld	de,80h
	ld	l,(iy+0)
	ld	h,(iy+1)
	add	hl,de
	ld	(iy+0),l
	ld	(iy+1),h
loc_7A30:			; m9:
	ld	l,(iy+2)
	ld	h,(iy+3)
	dec	hl
	ld	(iy+2),l
	ld	(iy+3),h
	inc	hl
	ld	a,l
	or	h
	jr	nz,loc_79FC
	jp	loc_7996

;=========================================================
; 7A45 bdos char bdos(func, arg)	from bdos.asm
;=========================================================

;entry	equ	5		; CP/M entry point

;arg	equ	8		; argument to call
;func	equ	6		; desired function

	global	_bdos

	psect	text
_bdos:
	call	csv
	ld	e,(ix+arg)
	ld	d,(ix+arg+1)
	ld	c,(ix+func)
	push	ix
;	push	iy
	call	entry
;	pop	iy
	pop	ix
	ld	l,a
	rla
	sbc	a,a
	ld	h,a
	jp	cret

;=========================================================
; 7A5F start1.asm
;=========================================================
	psect	text

	global	__getargs, startup, __argc_, __sibuf

startup:
	jp	__getargs

	psect	bss

__sibuf:	defs	512
__argc_:	defs	2

	psect	text

;=========================================================
; 7A62  start2.asm
;=========================================================
	global	__getargs, __argc_, nularg

	psect	text

__getargs:
	pop	hl		; return address
	exx
	pop	hl
	pop	hl		; unjunk stack
	ld	a,(80h)		; get buffer length
	inc	a		; allow for null byte
	neg
	ld	l,a
	ld	h,-1
	add	hl,sp
	ld	sp,hl		; allow space for args
	ld	bc,0		; flag end of args
	push	bc
	ld	hl,80h		; address of argument buffer
	ld	c,(hl)
	ld	b,0
	add	hl,bc
	ld	b,c
	ex	de,hl
	ld	hl,(6)
	ld	c,1
	dec	hl
	ld	(hl),0
	inc	b
	jr	3f

2:	ld	a,(de)
	cp	' '
	dec	de
	jr	nz,1f
	push	hl
	inc	c
4:	ld	a,(de)		; remove extra spaces
	cp	' '
	jr	nz,5f
	dec	de
	jr	4b
5:
	xor	a
1:	dec	hl
	ld	(hl),a
3:
	djnz	2b
	ld	(__argc_),bc	; store argcount
	ld	hl,nularg
	push	hl
	ld	hl,0
	add	hl,sp
	exx
	push	de		; junk the stack again
	push	de
	push	hl		; return address
	exx
	ret

;	psect	data
;
;nularg:	defb	0
;
;	psect	text

;=========================================================
; 7AB0 asallsh:	asallsh.asm
;=========================================================		
;	ASsign Arithmetic Long Left  SHift
;	ASsign Logical Long Left SHift

	psect	text

	global	asallsh, aslllsh, allsh, iregstore

asallsh:
aslllsh:
	push	bc		; save the count
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ex	(sp),hl		; save pointer, restore count
	push	bc		; hi word
	ex	(sp),hl
	pop	bc
	call	allsh		; do the shift
	jp	iregstore	; go store the value and return

;=========================================================
; 7AC2 allsh:	allsh.asm
;=========================================================
;	arithmetic long left shift
;	value in HLDE, count in B

	global	allsh, lllsh

	psect	text
allsh:
lllsh:
	ld	a,b		; check for zero shift
	or	a
	ret	z
	cp	33
	jr	c,1f		; limit shift to 32 bits
	ld	b,32
1:
	ex	de,hl
	add	hl,hl
	ex	de,hl 
	adc	hl,hl
	djnz	1b
	ret

;=========================================================
; 7AD3 asalrsh:	asalrsh.asm
;=========================================================
;	ASsign Arithmetic Long Right  SHift

	psect	text

	global	asalrsh, alrsh, iregstore

asalrsh:
	push	bc		; save the count
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ex	(sp),hl		; save pointer, restore count
	push	bc		; hi word
	ex	(sp),hl
	pop	bc
	call	alrsh		; do the shift
	jp	iregstore	; go store the value and return


;=========================================================
; 7AE5 asar:	asar.asm
;=========================================================
; Shift operations - the count is always in B,
; the quantity to be shifted is in HL, except for the
; assignment  type operations, when it is in the memory
; location pointed to by HL

	global	asar	; assign shift arithmetic right

	psect	text

	global	shar

asar:
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	push	hl		; save for the store
	ex	de,hl
	call	shar
	ex	de,hl
	pop	hl
	ld	(hl),d
	dec	hl
	ld	(hl),e
	ex	de,hl		; return value in hl
	ret

;=========================================================
; 7AF4 asaladd:	asladd.asm
;=========================================================
	psect	text

	global	iregset, iregstore, asaladd, aslladd, aladd

asaladd:
aslladd:
	call	iregset
	call	aladd
	jp	iregstore

;=========================================================
; 7AFD asaland:	asland.asm
;=========================================================
	psect	text

	global	iregset, iregstore, asaland, aslland, aland

asaland:
aslland:
	call	iregset
	call	aland
	jp	iregstore

;=========================================================
; 7B06 asll:	asll.asm
;=========================================================
; Shift operations - the count is always in B, the quantity
; to be shifted is in HL, except for the assignment type
; operations, when it is in the memory location pointed to
; by HL

	global	asll,asal	; assign shift left (logical or arithmetic)

	psect	text

	global	shal
asll:
asal:
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	push	hl		; save for the store
	ex	de,hl
	call	shal
	ex	de,hl
	pop	hl
	ld	(hl),d
	dec	hl
	ld	(hl),e
	ex	de,hl		; return value in hl
	ret

;=========================================================
; 7B15 asllrsh:	asllrsh.asm
;=========================================================
;	ASsign Logical Long Right  SHift

	psect	text

	global	asllrsh, llrsh, iregstore

asllrsh:
	push	bc		; save the count
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ex	(sp),hl		; save pointer, restore count
	push	bc		; hi word
	ex	(sp),hl
	pop	bc
	call	llrsh		; do the shift
	jp	iregstore	; go store the value and return

;=========================================================
; 7B27 asalmul:	aslmul.asm
;=========================================================
	psect	text

	global	iregset, iregstore, asalmul, asllmul, almul

asalmul:
asllmul:
	call	iregset
	call	almul
	jp	iregstore

;=========================================================
; 7B30 asalor:	aslor.asm
;=========================================================
	psect	text
	global	iregset, iregstore, asalor, asllor, alor

asalor:
asllor:
	call	iregset
	call	alor
	jp	iregstore

;=========================================================
; 7B39 asalsub:	aslsub.asm
;=========================================================
	psect	text

	global	iregset, iregstore, asalsub, asllsub, alsub

asalsub:
asllsub:
	call	iregset
	call	alsub
	jp	iregstore

;=========================================================
; 7B42 asalxor:	aslxor.asm
;=========================================================		
	psect	text

	global	iregset, iregstore, asalxor, asllxor, alxor

asalxor:
asllxor:
	call	iregset
	call	alxor
	jp	iregstore

;=========================================================
; 7B4B digit:	
; 7B52 _atoi:	atoi.asm
;=========================================================		
	psect	text

digit:	sub	'0'
	ret	c
	cp	10
	ccf
	ret

	global	_atoi
_atoi:	pop	bc	; return address
	pop	de
	push	de
	push	bc
	ld	hl,0
1:
	ld	a,(de)
	inc	de
	cp	' '
	jr	z,1b
	cp	9	; tab
	jr	z,1b
	dec	de	; point to 1st non blank char
	cp	'-'
	jr	z,3f
	cp	'+'
	jr	nz,2f
	or	a	; reset zero flag
3:
	inc	de
2:	ex	af,af'
1:
	ld	a,(de)
	inc	de
	call	digit
	jr	c,3f
	add	hl,hl
	ld	c,l
	ld	b,h
	add	hl,hl
	add	hl,hl
	add	hl,bc
	ld	c,a
	ld	b,0
	add	hl,bc
	jr	1b
3:
	ex	af,af'
	ret	nz
	ex	de,hl
	ld	hl,0
	sbc	hl,de
	ret

; End file libc1.asm

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - libc2.asm Created 09.03.2019 Last Modified 31.01.2021

;
; For easier obtaining an exact copy of the binary executable
; file, all library functions are located in files libc1.asm,
; libc2.asm, libc3.asm, libc4.asm, libc5.asm.
;
	global	ncsv, cret, indir
	global	csv
;=========================================================
;7B8B _atol:	atol.asm
;=========================================================
	global	_atol
	global	almul
	global	aladd
	global	__ctype_

	psect	text
_atol:
	call ncsv
	defw -5
	ld	l,(ix+6)
	ld	h,(ix+7)
	push	hl
	pop	iy
	jr	l2
l3:
	inc	iy
l2:
	ld	a,(iy+0)
	cp	32
	jr	z,l3
	cp	9
	jr	z,l3
	ld	(ix+-4),0
	ld	(ix+-3),0
	ld	(ix+-2),0
	ld	(ix+-1),0
	ld	(ix+-5),0
	cp	45
	jr	nz,l6
	inc	(ix+-5)
	inc	iy
	jr	l6
l7:
	ld	a,(iy+0)
	ld	e,a
	rla
	sbc	a,a
	ld	d,a
	ld	hl,-48
	add	hl,de
	ex	de,hl
	ld	a,d
	rla
	sbc	a,a
	ld	l,a
	ld	h,a
	push	hl
	push	de
	ld	de,10
	ld	hl,0
	push	hl
	push	de
	ld	e,(ix+-4)
	ld	d,(ix+-3)
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	call	almul
	call	aladd
	ld	(ix+-4),e
	ld	(ix+-3),d
	ld	(ix+-2),l
	ld	(ix+-1),h
	inc	iy
l6:
	ld	a,(iy+0)
	ld	e,a
	rla
	sbc	a,a
	ld	d,a
	ld	hl,__ctype_+1
	add	hl,de
	bit	2,(hl)
	jr	nz,l7
	ld	a,(ix+-5)
	or	a
	ld	e,(ix+-4)
	ld	d,(ix+-3)
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	jp	z,cret
	push	hl
	push	de
	ld	hl,0
	pop	bc
	or	a
	sbc	hl,bc
	pop	bc
	ex	de,hl
	ld	hl,0
	sbc	hl,bc
	jp	cret

;=========================================================
;7C37 _blkclr:	blkclr.asm
;=========================================================
;	blkclr(ptr, size)
;	char *	ptr; unsigned short size;

;	Fills memory with size null bytes

	psect	text

	global	_blkclr

_blkclr:
	pop	de	;return address
	pop	hl	;pointer
	pop	bc	;count
	push	bc	;adjust stack
	push	hl
	push	de
	ld	e,0
1:
	ld	a,c	;check for finished
	or	b
	ret	z
	ld	(hl),e
	inc	hl
	dec	bc
	jr	1b

;=========================================================		
; 7C47 iregset:		iregset.asm
; 7C61 iregstore:
;=========================================================		
; routines to support the assignment versions of the long operations

	psect	text

	global	iregset, iregstore

iregset:
	ld	e,(hl)	;pick up arg
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ex	(sp),hl	;save pointer, get return address
	push	bc	;now put the hi word into hl
	ex	(sp),hl	;saving return address on stack again
	pop	bc	;now return address in bc
	exx
	pop	hl	;the pointer
	pop	bc	;the final return address
	pop	de	;now the low word of arg2
	ex	(sp),hl	;get the hi word, save pointer
	push	bc	;this is the return address again
	ex	(sp),hl	;into hl again
	pop	bc	;hi word now in bc
	ex	(sp),hl	;AHA! got return address on stack, ptr in hl
	push	hl	;now its easy, save pointer
	push	bc	;hi word
	push	de	;low word
	exx
	push	bc	;immediate return address
	ret		;finito

iregstore:
	ex	(sp),hl	;get pointer into hl
	pop	bc	;hi word in bc
	ld	(hl),b
	dec	hl
	ld	(hl),c
	dec	hl
	ld	(hl),d
	dec	hl
	ld	(hl),e	;all done
	push	bc	;restore to hl
	pop	hl
	ret		;and return with value in hl

;=========================================================
; 7C6D aladd:	ladd.asm
;=========================================================
	psect	text

	global	aladd, lladd
aladd:
lladd:
	exx
	pop	hl
	exx
	pop	bc
	ex	de,hl
	add	hl,bc
	ex	de,hl
	pop	bc
	adc	hl,bc
	exx
	push	hl
	exx
	ret

;=========================================================
; 7C7B aland:	land.asm
;=========================================================
	psect	text

	global	aland, lland

aland:
lland:
	exx
	pop	hl
	exx
	pop	bc
	ld	a,c
	and	e
	ld	e,a
	ld	a,b
	and	d
	ld	d,a
	pop	bc
	ld	a,c
	and	l
	ld	l,a
	ld	a,b
	and	h
	ld	h,a
	exx
	push	hl
	exx
	ret

;=========================================================
; 7C90 llrsh:	llrsh.asm
;=========================================================
;	logical long right shift
;	value in HLDE, count in B

	global	llrsh

	psect	text

llrsh:
	ld	a,b	;check for zero shift
	or	a
	ret	z
	cp	33
	jr	c,1f	;limit shift to 32 bits
	ld	b,32
1:
	srl	h
	rr	l
	rr	d
	rr	e
	djnz	1b
	ret

;=========================================================
; 7CA4 alor:	lor.asm
;=========================================================
	psect	text
	global	alor, llor

alor:
llor:
	exx
	pop	hl
	exx
	pop	bc
	ld	a,c
	or	e
	ld	e,a
	ld	a,b
	or	d
	ld	d,a
	pop	bc
	ld	a,c
	or	l
	ld	l,a
	ld	a,b
	or	h
	ld	h,a
	exx
	push	hl
	exx
	ret

;=========================================================
; 7CB9 arelop:	lrelop.asm
;=========================================================
; long relational operation - returns flags as though
; a long subtract was done.

	psect	text

	global	lrelop,arelop

arelop:
lrelop:
	exx			;select	alternate reg set
	pop	hl		;return	address
	exx			;get other set again
	pop	bc		;low word of 2nd arg
	ex	de,hl		;put hi	word of	1st in de
	ex	(sp),hl		;get hi	word of	2nd in hl
	ex	de,hl		;hi word of 1st	back in	hl
	ld	a,h		;test for differing signs
	xor	d
	jp	p,2f		;the same, so ok
	ld	a,h		;get the sign of the LHS
	or	1		;ensure zero flag is reset, set sign flag
	pop	hl		;unjunk stack
	jr	1f		;return	with sign of LHS
2:
	or	a
	sbc	hl,de		;set the flags
	pop	hl		;low word of 1st into hl again
	jr	nz,1f		;go return if not zero
	sbc	hl,bc		;now set flags on basis	of low word
	jr	z,1f		;if zero, all ok
	ld	a,2		;make non-zero
	rra			;rotate	carry into sign
	or	a		;set minus flag
	rlca			;put carry flag	back

1:
	exx			;get return address
	jp	(hl)		;and return with stack clean

;=========================================================
; 7CDC brelop:	brelop.asm
;=========================================================
; byte relational operation - returns flags correctly for
; comparision of words in a and c

	psect	text

	global	brelop

brelop:
	push	de
	ld	e,a
	xor	b	;compare signs
	jp	m,1f	;if different, return sign of lhs
	ld	a,e
	sbc	a,b
	pop	de
	ret
1:
	ld	a,e	;get sign of lhs
	and	80h	;mask out sign flag
	ld	d,a
	ld	a,e
	sbc	a,b	;set carry flag if appropriate
	ld	a,d
	inc	a	;set sign flag as appropriate and reset Z flag
	pop	de
	ret

;=========================================================
;7CF0 wrelop:	wrelop.asm
;=========================================================
; word relational operation - returns flags correctly for
; comparision of words in hl and de

	psect	text

	global	wrelop

wrelop:
	ld	a,h
	xor	d	;compare signs
	jp	m,1f	;if different, return sign of lhs
	sbc	hl,de	;just set flags as normal
	ret
1:
	ld	a,h	;get sign of lhs
	and	80h	;mask out sign flag
	sbc	hl,de	;set carry flag if appropriate
	inc	a	;set sign flag as appropriate and reset Z flag
	ret

;=========================================================
; 7CFF alsub:	lsub.asm
;=========================================================
	psect	text

	global	alsub, llsub

alsub:
llsub:
	exx
	pop	hl
	exx
	pop	bc
	ex	de,hl
	or	a
	sbc	hl,bc
	ex	de,hl
	pop	bc
	sbc	hl,bc
	exx
	push	hl
	exx
	ret

;=========================================================
; 7D0F alxor:	lxor.asm
;=========================================================		
	psect	text
	global	alxor, llxor

alxor:
llxor:
	exx
	pop	hl
	exx
	pop	bc
	ld	a,c
	xor	e
	ld	e,a
	ld	a,b
	xor	d
	ld	d,a
	pop	bc
	ld	a,c
	xor	l
	ld	l,a
	ld	a,b
	xor	h
	ld	h,a
	exx
	push	hl
	exx
	ret

;=========================================================
; 7D24 amod:	idiv.asm
; 7D29 lmod:	
; 7D33 adiv:	
; 7D80 negif:	
; 7D83 negat:	
;=========================================================		
; 16 bit divide and modulus routines

; called with dividend in hl and divisor in de
; returns with result in hl.

; adiv (amod) is signed divide (modulus), ldiv (lmod) is unsigned

	global	adiv,ldiv,amod,lmod

	psect	text
amod:
	call	adiv
	ex	de,hl	;put modulus in hl
	ret

lmod:
	call	ldiv
	ex	de,hl
	ret

ldiv:
	xor	a
	ex	af,af'
	ex	de,hl
	jr	dv1


adiv:
	ld	a,h
	xor	d	;set sign flag for quotient
	ld	a,h	;get sign of dividend
	ex	af,af'
	call	negif
	ex	de,hl
	call	negif

dv1:	ld	b,1
	ld	a,h
	or	l
	ret	z

dv8:	push	hl
	add	hl,hl
	jr	c,dv2
	ld	a,d
	cp	h
	jr	c,dv2
	jr	nz,dv6
	ld	a,e
	cp	l
	jr	c,dv2

dv6:	pop	af
	inc	b
	jr	dv8

dv2:	pop	hl
	ex	de,hl
	push	hl
	ld	hl,0
	ex	(sp),hl

dv4:	ld	a,h
	cp	d
	jr	c,dv3
	jr	nz,dv5

	ld	a,l
	cp	e
	jr	c,dv3

dv5:	sbc	hl,de

dv3:	ex	(sp),hl
	ccf
	adc	hl,hl
	srl	d
	rr	e
	ex	(sp),hl
	djnz	dv4
	pop	de
	ex	de,hl
	ex	af,af'
	call	m,negat
	ex	de,hl
	or	a	;test remainder sign bit
	call	m,negat
	ex	de,hl
	ret

negif:	bit	7,h
	ret	z
negat:	ld	b,h
	ld	c,l
	ld	hl,0
	or	a
	sbc	hl,bc
	ret

; End file libc2.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - libc3.asm Created 09.03.2019 Last Modified 31.01.2021

;
; For easier obtaining an exact copy of the binary executable
; file, all library functions are located in files libc1.asm,
; libc2.asm, libc3.asm, libc4.asm, libc5.asm.
;
global	ncsv, cret, indir
global	csv
;=========================================================
;7D8C lregset:	ldiv.asm
;7D9B iregset:	
;7DB2 sgndiv:	
;7DC3 asaldiv:	
;7DC9 store:	
;7DD8 aldiv:	
;7DDB dosdiv:	
;7DEB lldiv:	
;7DEE doudiv:	
;7DF7 aslldiv:	
;7DFF almod:	
;7E02 dosrem:	
;7E11 asalmod:	
;7E19 llmod:	
;7E24 asllmod:	
;7E2C negat:	
;7E3B negif:	
;7E50 divide:	
;=========================================================		
;	Long division routines for Z80

	global	lldiv,aldiv,almod,llmod,aslldiv,asaldiv,asllmod,asalmod

	psect	text

; Called with dividend in HLDE, divisor on stack under 2 return
; addresses. Returns with dividend in HL/HL', divisor in DE/DE'
; on return the HIGH words are selected.

lregset:
	pop	bc		;get top return address
	exx			;select other bank
	pop	bc		;return address of call to this module
	pop	de		;get low word of divisor
	exx			;select hi bank
	ex	de,hl		;dividend.low -> hl
	ex	(sp),hl		;divisor.high -> hl
	ex	de,hl		;dividend.high -> hl
	exx			;back to low bank
	push	bc		;put outer r.a. back on stack
	pop	hl		;return address
	ex	(sp),hl		;dividend.low -> hl
	exx
	push	bc		;top return address
	ret

; Much the same as lregset, except that on entry the dividend
; is pointed to by HL.
; The pointer is saved in iy for subsequent updating of memory

iregset:
	pop	de		;immediate return address
	call	lregset		;returns with hi words selected
	push	hl		;save a copy for 'ron
	ex	(sp),iy		;get it in iy, saving old iy
	ld	h,(iy+3)	;high order byte
	ld	l,(iy+2)	;byte 2
	exx			;back to low bank
	push	hl		;return address
	ld	h,(iy+1)	;byte 1
	ld	l,(iy+0)	;and LSB
	exx			;restore hi words
	ret			;now return

; Called with hi words selected, performs division on the absolute
; values of the dividend and divisor. Quotient is positive

sgndiv:
	call	negif		;make dividend positive
	exx
	ex	de,hl		;put divisor in HL/HL'
	exx
	ex	de,hl
	call	negif		;make divisor positive
	ex	de,hl		;restore divisor to DE/DE'
	exx
	ex	de,hl
	exx			;select high words again
	jp	divide		;do division

asaldiv:
	call	iregset
	call	dosdiv
store:
	ld	(iy+0),e
	ld	(iy+1),d
	ld	(iy+2),l
	ld	(iy+3),h
	pop	iy		;restore old iy
	ret

aldiv:	call	lregset		;get args

; Called with high words selected, performs signed division by
; the rule that the quotient is negative iff the signs of the
; dividend and divisor differ returns quotient in HL/DE

dosdiv:
	ld	a,h
	xor	d
	ex	af,af'		;sign bit is now sign of quotient
	call	sgndiv		;do signed division
	ex	af,af'		;get sign flag back
	push	bc		;high word
	exx
	pop	hl
	ld	e,c		;low word of quotient
	ld	d,b
	jp	m,negat		;negate quotient if necessary
	ret

lldiv:	call	lregset

; Called with high words selected, performs unsigned division
; returns with quotient in HL/DE

doudiv:
	call	divide		;unsigned division
	push	bc		;high word of quotien
	exx
	pop	hl
	ld	e,c		;low word
	ld	d,b
	ret

aslldiv:
	call	iregset
	call	doudiv
	jr	store

almod:
	call	lregset

; Called with high words selected, performs signed modulus - the rule
; is that the sign of the remainder is the sign of the dividend

dosrem:
	ld	a,h		;get sign of dividend
	ex	af,af'		;save it
	call	sgndiv		;do signed division
	push	hl		;high word
	exx
	pop	de
	ex	de,hl		;put high word in hl
	ex	af,af'		;get sign bit back
	or	a
	jp	m,negat		;negate if necessary
	ret

asalmod:
	call	iregset
	call	dosrem
	jr	store

llmod:
	call	lregset

; Called with high words selected, perform unsigned modulus

dourem:
	call	divide
	push	hl		;high word of remainder
	exx
	pop	de
	ex	de,hl		;high word in hl
	ret

asllmod:
	call	iregset
	call	dourem
	jr	store

;	Negate the long in HL/DE

negat:	push	hl		;save high word
	ld	hl,0
	or	a
	sbc	hl,de
	ex	de,hl
	pop	bc		;get high word back
	ld	hl,0
	sbc	hl,bc
	ret			;finito

negif:	;called with high word in HL, low word in HL'
	;returns with positive value

	bit	7,h		;check sign
	ret	z		;already positive
	exx			;select low word
	ld	c,l
	ld	b,h
	ld	hl,0
	or	a
	sbc	hl,bc
	exx
	ld	c,l
	ld	b,h
	ld	hl,0
	sbc	hl,bc
	ret			;finito

; Called with dividend in HL/HL', divisor in DE/DE', high words in
; selected register set
; returns with quotient in BC/BC', remainder in HL/HL', high words
; selected

divide:
	ld	bc,0		;initialize quotient
	ld	a,e		;check for zero divisor
	or	d
	exx
	ld	bc,0
	or	e
	or	d
	exx			;restor high words
	ret	z		;return with quotient == 0
	ld	a,1		;loop count
	jr	3f		;enter loop in middle
1:
	push	hl		;save divisor
	exx
	push	hl		;low word
	or	a		;clear carry
	sbc	hl,de		;subtract low word
	exx
	sbc	hl,de		;sbutract hi word
	exx
	pop	hl		;restore dividend
	exx
	pop	hl		;and hi word
	jr	c,2f		;finished - divisor is big enough
	exx
	inc	a		;increment count
	ex	de,hl		;put divisor in hl - still low word
	add	hl,hl		;shift left
	ex	de,hl		;put back in de
	exx			;get hi word
	ex	de,hl
	adc	hl,hl		;shift with carry
	ex	de,hl
3:
	bit	7,d		;test for max divisor
	jr	z,1b		;loop if msb not set

2:	;arrive here with shifted divisor, loop count in a, and low words
	;selected
	
3:
	push	hl		;save dividend
	exx
	push	hl		;low word
	or	a		;clear carry
	sbc	hl,de
	exx
	sbc	hl,de
	exx			;restore low word
	jr	nc,4f
	pop	hl		;restore low word of dividend
	exx
	pop	hl		;hi word
	exx			;restore low word
	jr	5f
4:
	inc	sp		;unjunk stack
	inc	sp
	inc	sp
	inc	sp
5:
	ccf			;complement carry bit
	rl	c		;shift in carry bit
	rl	b		;next byte
	exx			;hi word
	rl	c
	rl	b
	srl	d		;now shift divisor right
	rr	e
	exx			;get low word back
	rr	d
	rr	e
	exx			;select hi word again
	dec	a		;decrement loop count
	jr	nz,3b
	ret			;finished

;=========================================================
;7EAC aslr:	aslr.asm
;=========================================================
; Shift operations - the count is always in B,
; the quantity to be shifted is in HL, except for the assignment
; type operations, when it is in the memory location pointed to by
; HL

	global	aslr	;assign shift logical right

	psect	text

	global	shlr
aslr:
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	push	hl		;save for the store
	ex	de,hl
	call	shlr
	ex	de,hl
	pop	hl
	ld	(hl),d
	dec	hl
	ld	(hl),e
	ex	de,hl		;return value in hl
	ret

;=========================================================
;7EBB _movmem:	bmove.asm
;=========================================================		
;	bmove(from, to, count)

	global	_bmove, _movmem

	psect	text
_movmem:
_bmove:
	pop	hl		;return address
	exx
	pop	hl		;from
	pop	de		;to
	pop	bc		;count
	ld	a,b
	or	c
	jr	z,1f
	ldir
1:
	push	bc		;stack is as it was
	push	de
	push	hl
	exx
	jp	(hl)

; End file libc3.asm


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - libc4.asm Created 09.03.2019 Last Modified 31.01.2021

;
; For easier obtaining an exact copy of the binary executable
; file, all library functions are located in files libc1.asm,
; libc2.asm, libc3.asm, libc4.asm, libc5.asm.
;
	global	ncsv, cret, indir
	global	csv
;=========================================================
; 7ECB amul:	imul.asm
; 7EDE mult8b:	
;=========================================================		
;	16 bit integer multiply

;	on entry, left operand is in hl, right operand in de

	psect	text

	global	amul,lmul
amul:
lmul:
	ld	a,e
	ld	c,d
	ex	de,hl
	ld	hl,0
	ld	b,8
	call	mult8b
	ex	de,hl
	jr	3f
2:	add	hl,hl
3:
	djnz	2b
	ex	de,hl
1:
	ld	a,c
mult8b:
	srl	a
	jr	nc,1f
	add	hl,de
1:	ex	de,hl
	add	hl,hl
	ex	de,hl
	ret	z
	djnz	mult8b
	ret

; End file libc4.asm

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - libc5.asm Created 09.03.2019 Last Modified 31.01.2021

;
; For easier obtaining an exact copy of the binary executable
; file, all library functions are located in files libc1.asm,
; libc2.asm, libc3.asm, libc4.asm, libc5.asm.
;
;global	__Hbss
;=========================================================
; 7EEA alrsh:	alrsh.asm
;=========================================================		
; arithmetic long right shift
; value in HLDE, count in B

	global	alrsh

	psect	text

alrsh:
	ld	a,b		;check for zero shift
	or	a
	ret	z
	cp	33
	jr	c,1f		;limit shift to 32 bits
	ld	b,32
1:
	sra	h
	rr	l
	rr	d
	rr	e
	djnz	1b
	ret

;=========================================================
; 7EFE almul:	lmul.asm
; 7F26 mult8b:	
;=========================================================		
; Long multiplication for Z80

; Called with 1st arg in HLDE, 2nd arg on stack. Returns with
; result in HLDE, other argument removed from stack

	global	almul, llmul

	psect	text
almul:
llmul:
	ex	de,hl
	ex	(sp),hl		;return address now in hl
	exx
	pop	de		;low word in de
	pop	bc		;low word of multiplier in bc
	exx
	pop	bc		;hi word of multiplier
	push	hl		;restore return address
	ld	hl,0		;initialize product
	exx			;get lo words back
	ld	hl,0
	ld	a,c
	ld	c,b
	call	mult8b
	ld	a,c
	call	mult8b
	exx
	ld	a,c
	exx
	call	mult8b
	exx
	ld	a,b
	exx
	call	mult8b
	push	hl		;low word
	exx
	pop	de
	ret

mult8b:	ld	b,8
3:
	srl	a
	jr	nc,1f
	add	hl,de
	exx
	adc	hl,de
	exx
1:	ex	de,hl
	add	hl,hl
	ex	de,hl
	exx
	ex	de,hl
	adc	hl,hl
	ex	de,hl
	exx
	djnz	3b
	ret

;=========================================================
; 7F3D _brk:	sbrk.asm
; 7F45 _sbrk:	
; 7F71 _checksp:	
;=========================================================		
; NB This brk() does not check that the argument is reasonable.

	psect	text

	global	_sbrk,__Hbss, _brk, _checksp
_brk:
	pop	hl	;return address
	pop	de	;argument
	ld	(memtop),de	;store it
	push	de		;adjust stack
	jp	(hl)	;return
_sbrk:
	pop	bc
	pop	de
	push	de
	push	bc
	ld	hl,(memtop)
	ld	a,l
	or	h
	jr	nz,1f
	ld	hl,__Hbss
	ld	(memtop),hl
1:
	add	hl,de
	jr	c,2f		;if overflow, no room
	ld	bc,1024		;allow 1k bytes stack overhead
	add	hl,bc
	jr	c,2f		;if overflow, no room
	sbc	hl,sp
	jr	c,1f
2:
	ld	hl,-1		;no room at the inn
	ret

1:	ld	hl,(memtop)
	push	hl
	add	hl,de
	ld	(memtop),hl
	pop	hl
	ret

_checksp:
	ld	hl,(memtop)
	ld	bc,128
	add	hl,bc
	sbc	hl,sp
	ld	hl,1		;true if ok
	ret	c		;if carry, sp > memtop+128
	dec	hl		;make into 0
	ret

	psect	bss
memtop:	defs	2

;=========================================================
; 7F80 shar:	shar.asm
;=========================================================
; Shift operations - the count is always in B,
; the quantity to be shifted is in HL, except for the
; assignment type operations, when it is in the memory
; location pointed to by HL

	global	shar	;shift arithmetic right

	psect	text
shar:
	ld	a,b		;check for zero shift
	or	a
	ret	z
	cp	16		;16 bits is maximum shift
	jr	c,1f		;is ok
	ld	b,16
1:
	sra	h
	rr	l
	djnz	1b
	ret

;=========================================================
; 7F90 shll:	shll.asm
;=========================================================
; Shift operations - the count is always in B,
; the quantity to be shifted is in HL, except for the
; assignment type operations, when it is in the memory
; location pointed to by HL

	global	shll,shal	;shift left, arithmetic or logical

	psect	text
shll:
shal:
	ld	a,b		;check for zero shift
	or	a
	ret	z
	cp	16		;16 bits is maximum shift
	jr	c,1f		;is ok
	ld	b,16
1:
	add	hl,hl		;shift left
	djnz	1b
	ret

;=========================================================
; 7F9D shlr:	shlr.asm
;=========================================================
; Shift operations - the count is always in B,
; the quantity to be shifted is in HL, except for the
; assignment type operations, when it is in the memory
; location pointed to by HL

	global	shlr	;shift logical right

	psect	text
shlr:
	ld	a,b		;check for zero shift
	or	a
	ret	z
	cp	16		;16 bits is maximum shift
	jr	c,1f		;is ok
	ld	b,16
1:
	srl	h
	rr	l
	djnz	1b
	ret

;=========================================================
; 7FAD _strcat:	strcat.asm
;=========================================================
	psect	text

	global	_strcat

_strcat:
	pop	bc
	pop	de
	pop	hl
	push	hl
	push	de
	push	bc
	ld	c,e		;save destination pointer
	ld	b,d

1:	ld	a,(de)
	or	a
	jr	z,2f
	inc	de
	jr	1b

2:	ld	a,(hl)
	ld	(de),a
	or	a
	jr	z,3f
	inc	de
	inc	hl
	jr	2b

3:
	ld	l,c	;restore destination
	ld	h,b
	ret

;=========================================================
; 7FC8 _strcmp:	strcmp.asm
;=========================================================
	psect	text

	global	_strcmp

_strcmp:
	pop	bc
	pop	de
	pop	hl
	push	hl
	push	de
	push	bc

1:	ld	a,(de)
	cp	(hl)
	jr	nz,2f
	inc	de
	inc	hl
	or	a
	jr	nz,1b
	ld	hl,0
	ret

2:	ld	hl,1
	ret	nc
	dec	hl
	dec	hl
	ret

;=========================================================
; 7FE2 _strcpy:	strcpy.asm
;=========================================================
	psect	text

	global	_strcpy

_strcpy:
	pop	bc
	pop	de
	pop	hl
	push	hl
	push	de
	push	bc
	ld	c,e
	ld	b,d		;save destination pointer

1:	ld	a,(hl)
	ld	(de),a
	inc	de
	inc	hl
	or	a
	jr	nz,1b
	ld	l,c
	ld	h,b
	ret

;=========================================================
; 7FF4 _strlen:	strlen.asm
;=========================================================
	psect	text

	global	_strlen
_strlen:	pop	hl
	pop	de
	push	de
	push	hl
	ld	hl,0

1:	ld	a,(de)
	or	a
	ret	z
	inc	hl
	inc	de
	jr	1b

;=========================================================
; 8002 _strncpy:	strncpy.asm
;=========================================================		
	psect	text

	global	_strncpy, rcsv, cret

_strncpy:
	call	rcsv
	push	hl

1:
	ld	a,c
	or	b
	jr	z,2f
	dec	bc
	ld	a,(de)
	ld	(hl),a
	inc	hl
	or	a
	jr	z,1b
	inc	de
	jr	1b

2:	pop	hl
	jp	cret

;=========================================================
; 8018 csv:	csv.asm
; 8024 cret:	
; 802B indir:	
; 802C ncsv:	
;=========================================================		
	global	csv, cret, indir, ncsv

	psect	text

csv:	pop	hl		;return address
	push	iy
	push	ix
	ld	ix,0
	add	ix,sp		;new frame pointer
	jp	(hl)

cret:	ld	sp,ix
	pop	ix
	pop	iy
	ret

indir:	jp	(hl)

; New csv: allocates space for stack based on word following
; call ncsv

ncsv:
	pop	hl
	push	iy
	push	ix
	ld	ix,0
	add	ix,sp
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ex	de,hl
	add	hl,sp
	ld	sp,hl
	ex	de,hl
	jp	(hl)

;=========================================================
;8040 rcsv:	rcsv.asm
;=========================================================
	global	rcsv

ARG	equ	6		;offset of 1st arg

	psect	text
rcsv:
	ex	(sp),iy		;save iy, get return address
	push	ix
	ld	ix,0
	add	ix,sp		;new frame pointer
	ld	l,(ix+ARG+0)
	ld	h,(ix+ARG+1)
	ld	e,(ix+ARG+2)
	ld	d,(ix+ARG+3)
	ld	c,(ix+ARG+4)
	ld	b,(ix+ARG+5)
	jp	(iy)

; End file libc5.asm

/*
 *	Initial setup for stdio
 */

#include	<stdio.h>

#define	BUFSIZ	512
#define	MAXFILE	5	/* max number of files open */

/*
#define	FILL	0, "        ", "   ", 0, {0}, 0, {0}, 0, {0}, 0
*/

#define	FILL	0, "\t    ", "   ", 0, {0}, 0, {0}, 0, {0},(long)4,0

struct fcb {
    uchar	dr;		/*   +0 drive code				*/
    char	name[8];	/*   +1 file name				*/
    char	ft[3];		/*   +9 file type				*/
    uchar	ex;		/*  +12 file extent				*/
    char	fil[2];		/*  +13 not used				*/
    char	rc;		/*  +15 number of records in present extent	*/
    char	dm[16];		/*  +16 CP/M disk map				*/
    char	nr;		/*  +32 next record to read or write		*/
    uchar	ranrec[3];	/*  +33 random record number (24 bit no. )	*/
    long	rwp;		/*  +36 read/write pointer in bytes		*/
    uchar	use;		/*  +40 use flag				*/
};

/*	 flag values in fcb.use */

#define	U_READ	1	/* file open for reading   */
#define	U_WRITE	2	/* file open for writing   */
#define	U_RDWR	3	/* open for read and write */
#define	U_CON	4	/* device is console 	   */
#define	U_RDR	5	/* device is reader	   */
#define	U_PUN	6	/* device is punch	   */
#define	U_LST	7	/* list device		   */

extern char	_sibuf[BUFSIZ];

FILE	_iob[MAXFILE] =
{
	{
		_sibuf,
		0,
		_sibuf,
		_IOREAD|_IOMYBUF,
		0			/* stdin */
	},
	{
		(char *)0,
		0,
		(char *)0,
		_IOWRT|_IONBF,
		1			/* stdout */
	},
	{
		(char *)0,
		0,
		(char *)0,
		_IOWRT|_IONBF,
		2			/* stderr */
	},
};


struct fcb	_fcb[MAXFILE] =
{
	{ FILL },	/* stdin */
	{ FILL },	/* stdout */
	{ FILL },	/* stderr */
};

/* End of file setup.c */




/*=========================================================
 * ctype
 *========================================================*/

#include	<ctype.h>

unsigned char _ctype_[] = {
	0,
	_C,	_C,	_C,	_C,	_C,	_C,	_C,	_C,
	_C,	_S,	_S,	_S,	_S,	_S,	_C,	_C,
	_C,	_C,	_C,	_C,	_C,	_C,	_C,	_C,
	_C,	_C,	_C,	_C,	_C,	_C,	_C,	_C,
	_S,	_P,	_P,	_P,	_P,	_P,	_P,	_P,
	_P,	_P,	_P,	_P,	_P,	_P,	_P,	_P,
	_N,	_N,	_N,	_N,	_N,	_N,	_N,	_N,
	_N,	_N,	_P,	_P,	_P,	_P,	_P,	_P,
	_P,	_U|_X,	_U|_X,	_U|_X,	_U|_X,	_U|_X,	_U|_X,	_U,
	_U,	_U,	_U,	_U,	_U,	_U,	_U,	_U,
	_U,	_U,	_U,	_U,	_U,	_U,	_U,	_U,
	_U,	_U,	_U,	_P,	_P,	_P,	_P,	_P,
	_P,	_L|_X,	_L|_X,	_L|_X,	_L|_X,	_L|_X,	_L|_X,	_L,
	_L,	_L,	_L,	_L,	_L,	_L,	_L,	_L,
	_L,	_L,	_L,	_L,	_L,	_L,	_L,	_L,
	_L,	_L,	_L,	_P,	_P,	_P,	_P,	_C
};

/* End of file ctype_.c */


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 1.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; Data from file 1.asm
;=========================================================
	global	_buffer,     _lineno,     _progname,   _byte_AE0C, _cursect
	global	_word_AE0F,  _word_AE11,  _array_AE13, _word_AE53, _nstdpth
	global	_array_AE57, _array_AE97, _word_AED7,  _word_AED9, _array_AEDB
	global	_word_AF1B,  _word_AF1D,  _hashtab,    _word_AFE9, _lvlidx
	global	_word_AFEF,  _word_AFF1,  _byte_AFF3,  _word_AFF4, _word_AFF6
	global	_word_AFED,  _word_AFF8,  _byte_AFFA,  _word_AFFB, _array_AFFD
	global	_word_B011,  _byte_B013,  _byte_B014,  _word_B015, _word_B017
	global	_wflag,      _pflag,      _hflag,      _errcnt,    _bflag
	global	_beg_sbrk,   _eflag,      _rflag,      _word_B023

	psect	bss

;Source				;Change	name	;Base			;Current
;--------------------------	;-----------	;-----------------      ;----------------
_buffer:	defs	60			;ADA6 buffer	  	;ADA6 _buffer
_lineno:	defs	2			;ADE2 _lineno	  	;ADE2 _lineno
_progname:	defs	40			;ADE4 _progname		;ADE4 _progname
_byte_AE0C:	defs	1			;AE0C _byte_AE0C	;AE0C _byte_AE0C
_cursect:	defs	2	; AE0D		;AE0D _word_AE0D	;AE0D _cursect
_word_AE0F:	defs	2			;AE0F _word_AE0F	;AE0F _word_AE0F
_word_AE11:	defs	2			;AE11 _word_AE11	;AE11 _word_AE11
_array_AE13:	defs	64			;AE13 _array_AE13	;AE13 _array_AE13
_word_AE53:	defs	2			;AE53 _word_AE53	;AE53 _word_AE53
_nstdpth:	defs	2	; AE55		;AE55 _word_AE55	;AE55 _nstdpth
_array_AE57:	defs	64			;AE57 _array_AE57	;AE57 _array_AE57
_array_AE97:	defs	64			;AE97 _array_AE97	;AE97 _array_AE97
_word_AED7:	defs	2			;AED7 _word_AED7	;AED7 _word_AED7
_word_AED9:	defs	2			;AED9 _word_AED9	;AED9 _word_AED9
_array_AEDB:	defs	64			;AEDB _array_AEDB	;AEDB _array_AEDB
_word_AF1B:	defs	2			;AF1B _word_AF1B	;AF1B _word_AF1B
_word_AF1D:	defs	2			;AF1D _word_AF1D	;AF1D _word_AF1D
_hashtab:	defs	202	; AF1F		;AF1F _array_AF1F	;AF1F _hashtab
_word_AFE9:	defs	2			;AFE9 _word_AFE9	;AFE9 _word_AFE9
_lvlidx:	defs	2	; AFEB		;AFEB _word_AFEB	;AFEB _lvlidx
_word_AFED:	defs	2			;AFED _word_AFED	;AFED _word_AFEF
_word_AFEF:	defs	2			;AFEF _word_AFEF	;AFEF _word_AFF1
_word_AFF1:	defs	2			;AFF1 _word_AFF1	;AFF1 _byte_AFF3
_byte_AFF3:	defs	1			;AFF3 _byte_AFF3	;AFF2 _word_AFF4
_word_AFF4:	defs	2			;AFF4 _word_AFF4	;AFF4 _word_AFF6
_word_AFF6:	defs	2			;AFF6 _word_AFF6	;AFF6 _word_AFED
_word_AFF8:	defs	2			;AFF8 _word_AFF8	;AFF8 _word_AFF8
_byte_AFFA:	defs	1			;AFFA _byte_AFFA	;AFFA _byte_AFFA
_word_AFFB:	defs	2			;AFFB _word_AFFB	;AFFB _word_AFFB
_array_AFFD:	defs	014h			;AFFD _array_AFFD	;AFFD _array_AFFD
_word_B011:	defs	2			;B011 _word_B011	;B025 _word_B011
_byte_B013:	defs	1			;B013 _byte_B013	;B027 _byte_B013
_byte_B014:	defs	1			;B014 _byte_B014	;B028 _byte_B014
_word_B015:	defs	2			;B015 _word_B015	;B029 _word_B015
_word_B017:	defs	2			;B017 _word_B017	;B02B _word_B017
_wflag:		defs	1			;B019 _wflag	  	;B019 _wflag
_pflag:		defs	1			;B01A _pflag	  	;B01A _pflag
_hflag:		defs	1			;B01B _hflag	  	;B01B _hflag
_errcnt:	defs	2	; BO1C		;B01C _word_B01C	;B01C _errcnt
_bflag:		defs	1			;B01E _bflag	  	;B01E _bflag
_beg_sbrk:	defs	2			;B01F _beg_sbrk		;B01F _beg_sbrk
_eflag:		defs	1			;B021 _eflag	  	;B021 _eflag
_rflag:		defs	1			;B022 _rflag	  	;B022 _rflag
_word_B023:	defs	3			;B023		  	;B023 _word_B023
;
;Source				;Change	name	;Base			;Current
;--------------------------	;-----------	;-----------------      ;----------------
;					     /	;B026 spf		;B026 _spf
;					    ;	;B02E _byte_B02E	;B02E _left
;					    ;	;B02F _word_B02F	;B02F _ffile
;					    ;	;B031 _byte_B031	;B031 _base
; Variables are defined in other functions <	;B032 _buf_B032		;B032 __sibuf
;					    ;	;B232 __argc_		;B232 __argc_
;					    ;	;B234 memtop		;B234 memtop
;					     \	;B236 __Hbss		;B236 __Hbss

	psect	text

; End of data from file 1.asm

; End of file -  1.asm */

*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 3_1.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; Data from file 3_1.asm
;=========================================================
	global	_tnames

	psect	data

_tnames:
	defw	19f
	defw	29f
	defw	39f
	defw	49f
	defw	59f
	defw	69f
	defw	79f
	defw	89f
	defw	99f
	defw	109f
	defw	119f
	defw	129f
	defw	139f
	defw	149f
	defw	159f
	defw	169f
	defw	179f
	defw	189f
	defw	199f
	defw	209f
	defw	219f
	defw	229f
	defw	239f
	defw	249f
	defw	259f
	defw	269f
	defw	279f
	defw	289f
	defw	299f
	defw	309f
	defw	319f
	defw	329f
	defw	339f
	defw	349f
	defw	359f
	defw	369f
	defw	379f
	defw	389f
	defw	399f
	defw	409f
	defw	419f
	defw	429f
	defw	439f
	defw	449f
	defw	459f
	defw	469f
	defw	479f
	defw	489f
	defw	499f
	defw	509f
	defw	519f
	defw	529f
	defw	539f
	defw	549f
	defw	559f
	defw	569f
	defw	579f
	defw	589f
	defw	599f
	defw	609f
	defw	619f
	defw	629f
	defw	639f
	defw	649f
	defw	659f
	defw	669f
	defw	679f
	defw	689f
	defw	699f
	defw	709f
	defw	719f
	defw	729f

	global	_byte_A46A

_byte_A46A:
	defw	65

d_3_1as_A46C:
19:	defb	0

29:	defb	33,0
39:	defb	33,61,0
49:	defb	35,0
59:	defb	36,0
69:	defb	36,85,0
79:	defb	37,0
89:	defb	38,0
99:	defb	38,38,0
109:	defb	38,85,0
119:	defb	40,0
129:	defb	41,0
139:	defb	42,0
149:	defb	42,85,0
159:	defb	43,0
169:	defb	43,43,0
179:	defb	43,85,0
189:	defb	44,0
199:	defb	45,0
209:	defb	45,45,0
219:	defb	45,62,0
229:	defb	45,85,0
239:	defb	46,0
249:	defb	46,46,0
259:	defb	47,0
269:	defb	58,0
279:	defb	58,85,0
289:	defb	58,115,0
299:	defb	59,0
309:	defb	59,59,0
319:	defb	60,0
329:	defb	60,60,0
339:	defb	60,61,0
349:	defb	61,0
359:	defb	61,37,0
369:	defb	61,38,0
379:	defb	61,42,0
389:	defb	61,43,0
399:	defb	61,45,0
409:	defb	61,47,0
419:	defb	61,60,60,0
429:	defb	61,61,0
439:	defb	61,62,62,0
449:	defb	61,94,0
459:	defb	61,124,0
469:	defb	62,0
479:	defb	62,61,0
489:	defb	62,62,0
499:	defb	63,0
509:	defb	64,0
519:	defb	91,92,0
529:	defb	91,97,0
539:	defb	91,99,0
549:	defb	91,101,0
559:	defb	91,105,0
569:	defb	91,115,0
579:	defb	91,117,0
589:	defb	91,118,0
599:	defb	94,0
609:	defb	123,0
619:	defb	124,0
629:	defb	124,124,0
639:	defb	125,0
649:	defb	126,0
659:	defb	82,69,67,73,80,0
669:	defb	84,89,80,69,0
679:	defb	73,68,0
689:	defb	67,79,78,83,84,0
699:	defb	70,67,79,78,83,84,0
709:	defb	82,69,71,0
719:	defb	73,78,65,82,69,71,0

d_3_1as_A539:
729:	defb	66,73,84,70,73,69,76,68,0


	global	_array_A542

_array_A542:
	defb	0
	defb	97
	defb	108
	defb	102

	psect	text

; End of file 3_1.asm


/*
 * File 2.c Created 17.05.2019 Last Modified 01.04.2020
 */

extern char
  p_8ADB[], p_8B33[], p_8B34[], p_8B88[], p_8B8C[], p_8BB7[],
  p_8BE2[], p_8C23[], p_8C25[], p_8C67[], p_8CA1[], p_8CD7[],
  p_8D09[], p_8D0B[], p_8D3C[], p_8D3E[], p_8D70[], p_8D9E[],
  p_8DA1[], p_8DD0[], p_8DD2[], p_8E03[], p_8E34[], p_8E63[],
  p_8E90[], p_8EBB[], p_8EE5[], p_8F0D[], p_8F35[], p_8F5D[],
  p_8F82[], p_8FA5[], p_8FC4[], p_8FC8[], p_8FEA[], p_900C[],
  p_902D[], p_904D[], p_906D[], p_9087[], p_908C[], p_90A7[],
  p_90AB[], p_90CA[], p_90E9[], p_9107[], p_9125[], p_9143[],
  p_9160[], p_917D[], p_9199[], p_91B5[], p_91CE[], p_91D1[],
  p_91E9[], p_91ED[], p_9207[], p_9221[], p_923B[], p_9255[],
  p_926F[], p_9289[], p_92A3[], p_92BD[], p_92D7[], p_92F1[],
  p_930A[], p_9323[], p_933B[], p_9353[], p_936B[], p_9380[],
  p_9383[], p_9390[], p_939B[], p_93B3[], p_93CB[], p_93E2[],
  p_93F9[], p_940F[], p_9425[], p_943B[], p_9451[], p_9466[],
  p_947B[], p_9490[], p_94A4[], p_94B4[], p_94B6[], p_94C8[],
  p_94DA[], p_94EB[], p_94FC[], p_950D[], p_951E[], p_952F[],
  p_953F[], p_954F[], p_955F[], p_956B[], p_956E[], p_957D[],
  p_958C[], p_9597[], p_959B[], p_95AA[], p_95B9[], p_95C8[],
  p_95D6[], p_95E4[], p_95F2[], p_9600[], p_9609[], p_960D[],
  p_961A[], p_9627[], p_9634[], p_9641[], p_964E[], p_965B[],
  p_9668[], p_9675[], p_9682[], p_968E[], p_9699[], p_96A4[],
  p_96AF[], p_96B5[], p_96BA[], p_96C5[], p_96D0[], p_96DA[],
  p_96E4[], p_96EE[], p_96F8[], p_9702[], p_970C[], p_9712[],
  p_9716[], p_9720[], p_9729[], p_9732[], p_973B[], p_9744[],
  p_974D[], p_9756[], p_975E[], p_9766[], p_976B[], p_976E[],
  p_9776[], p_977E[], p_9786[], p_978E[], p_9796[], p_979E[],
  p_97A6[], p_97AD[], p_97B4[], p_97BB[], p_97C2[], p_97C9[],
  p_97D0[], p_97D7[], p_97DE[], p_97E5[], p_97EB[], p_97F1[],
  p_97F7[], p_97FD[], p_9802[], p_9807[], p_980C[], p_9811[],
  p_9816[], p_981B[], p_9820[], p_9824[], p_9828[], p_982C[],
  p_9830[], p_9834[], p_9838[], p_983C[], p_9840[], p_9844[],
  p_9848[], p_984C[], p_9850[], p_9851[], p_9854[], p_9858[],
  p_985C[], p_9860[], p_9864[], p_9867[], p_986A[], p_986B[],
  p_986D[], p_9870[], p_9873[], p_9876[], p_9879[], p_987B[];

char * array_805F[] = {
  0,		/*  0 		*/	
  0,		/*  1 		*/	
  p_986A, 	/*  2 "nz"	*/	
  0,		/*  3 		*/	
  0,		/*  4 		*/	
  0,		/*  5 		*/	
  p_983C,	/*  6 "mod"	*/	
  p_9838,	/*  7 "and"	*/	
  0,		/*  8 		*/	
  0,		/*  9 		*/	
  0,		/* 10 		*/	
  0,		/* 11 		*/	
  p_9834,	/* 12 "mul"	*/	
  0,		/* 13 		*/	
  p_9828,	/* 14 "add"	*/	
  p_9824,	/* 15 "inc"	*/	
  0,		/* 16 		*/	
  0,		/* 17 		*/	
  p_9820,	/* 18 "sub"	*/	
  p_9858,	/* 19 "dec"	*/	
  0,		/* 20 		*/	
  p_94B4,	/* 21 "0"	*/	
  0,		/* 22 		*/	
  0,		/* 23 		*/	
  p_9854,	/* 24 "div"	*/	
  0,		/* 25 		*/	
  0,		/* 26 		*/	
  0,		/* 27 		*/	
  0,		/* 28 		*/	
  0,		/* 29 		*/	
  p_9876,	/* 30 "lt"	*/	
  p_8DD0,	/* 31 "l"	*/	
  0,		/* 32 		*/	
  0,		/* 33 		*/	
  p_983C,	/* 34 "mod"	*/	
  p_9838,	/* 35 "and"	*/	
  p_9834,	/* 36 "mul"	*/	
  p_9828,	/* 37 "add"	*/	
  p_9820,	/* 38 "sub"	*/	
  p_9854,	/* 39 "div"	*/	
  p_8DD0,	/* 40 "l"	*/	
  p_986B,	/* 41 "z"	*/	
  p_8D09,	/* 42 "r"	*/	
  p_9850,	/* 43 "xor"	*/	
  p_9851,	/* 44 "or"	*/	
  0,		/* 45 		*/	
  p_9873,	/* 46 "ge"	*/	
  p_8D09,	/* 47 "r"	*/	
  0,		/* 48 		*/	
  0,		/* 49 		*/	
  0,		/* 50 		*/	
  0,		/* 51 		*/	
  0,		/* 52 		*/	
  0,		/* 53 		*/	
  0,		/* 54 		*/	
  0,		/* 55 		*/	
  0,		/* 56 		*/	
  0,		/* 57 		*/	
  p_9850,	/* 58 "xor" 	*/	
  0,		/* 59 		*/	
  p_9851,	/* 60 "or"	*/	
  0,		/* 61 		*/	
  0,		/* 62 		*/	
  p_9870,	/* 63 "-1"	*/	
  0,		/* 64 		*/	
  0,		/* 65 		*/	
  0,		/* 66 		*/	
  0,		/* 67 		*/	
  0,		/* 68 		*/	
  0,		/* 69 		*/	
  0,		/* 70 		*/	
  0		/* 71 		*/	
};

struct zzz {
  char		c_0;
  char		c_1;
  char		c_2;
  char		c_3;
  char		c_4;
  char		c_5;
  char 	      * p_6;
  char	      * p_8;
};

struct zzz array_80EF[] = {
  {    0,    0,    0,    0,    0,    0,      0,      0 },	/*   0 */
  {    0,    0,    0, 0x1C, 0x48, 0x48,      0, p_8D3C },	/*   1 */
  {    1,    0,    0, 0x2C, 0x49, 0x4A, p_9641, p_8B33 },	/*   2 */
  {    2,    0,    0, 0x23, 0x49, 0x4A, p_9668, p_8B33 },	/*   3 */
  {    3,    0,    0, 0x0F, 0x49, 0x4B, p_96D0, p_8B33 },	/*   4 */
  {    3,    0,    0, 0x0F, 0x49, 0x4C, p_96E4, p_8B33 },	/*   5 */
  {    3,    0,    0, 0x13, 0x49, 0x4B, p_96EE, p_8B33 },	/*   6 */
  {    0,    0, 0x12, 0x0A, 0x4D, 0x4E, p_8FEA, p_8B33 },	/*   7 */
  {    0,    0,    0,    5, 0x4F,    0, p_980C, p_8D3C },	/*   8 */
  {    0,    0,    0,    4, 0x50, 0x4F, p_97DE, p_8B33 },	/*   9 */
  {    0,    0,    0,    4, 0x51, 0x4F, p_9600, p_8B33 },	/*  10 */
  {    4,    0,    0, 0x0B, 0x52,    0,      0, p_8B33 },	/*  11 */
  {    5,    0,    0, 0x0B, 0x53,    0,      0, p_8B33 },	/*  12 */
  {    6,    0,    0, 0x0B, 0x54,    0,      0, p_8B33 },	/*  13 */
  {    3,    6,    0, 0x0B, 0x55,    0,      0, p_8B33 },	/*  14 */
  {    3,    0,    6, 0x0B, 0x56,    0, p_9744, p_8B33 },	/*  15 */
  {    0,    0,    0, 0x1A, 0x4F,    0, p_9867, p_8B33 },	/*  16 */
  {    3,    0,    0, 0x21, 0x49, 0x4A, p_9756, p_8B33 },	/*  17 */
  {    3,    0,    0, 0x46, 0x56,    0,      0, p_8B33 },	/*  18 */
  {    3,    0,    0, 0x31, 0x4A,    0, p_97D7, p_8B33 },	/*  19 */
  {    0,    0,    0, 0x57,    0,    0,      0, p_8B33 },	/*  20 */
  {    3,    0,    0, 0x55,    0,    0,      0, p_8B33 },	/*  21 */
  {    7,    0,    0, 0x21, 0x49, 0x4A, p_8BE2, p_8B33 },	/*  22 */
  {    8,    0,    0, 0x31, 0x58,    0, p_97D0, p_8B33 },	/*  23 */
  {    5,    0,    0, 0x31, 0x4A,    0, p_94C8, p_8B33 },	/*  24 */
  {    5,    0,    0, 0x53,    0,    0,      0, p_8B33 },	/*  25 */
  {    6,    0,    0, 0x21, 0x49, 0x4A, p_9107, p_8D3C },	/*  26 */
  {    6,    0,    0, 0x31, 0x59,    0, p_97C2, p_8B33 },	/*  27 */
  {    6,    0,    0, 0x5A,    0,    0,      0, p_8B33 },	/*  28 */
  {    0,    0,    0, 0x5B,    0,    0,      0, p_8B33 },	/*  29 */
  {    0,    1,    0, 0x55,    0,    0,      0, p_8D3C },	/*  30 */
  {    0,    0,    1, 0x55,    0,    0, p_979E, p_8D9E },	/*  31 */
  {    0,    0,    0, 0x1B, 0x4A,    0,      0, p_97FD },	/*  32 */
  {    0,    0,    0,    9, 0x5C,    0,      0, p_8D3C },	/*  33 */
  {    0,    0,    0, 0x43,    0,    0,      0, p_986D },	/*  34 */
  {    6,    0,    0, 0x14, 0x59,    0,      0, p_8D3C },	/*  35 */
  {    0,    0,    0, 0x0E, 0x59, 0x4A,      0, p_9811 },	/*  36 */
  {    0,    0,    0, 0x49,    0,    0,      0, p_8D3C },	/*  37 */
  {    3,    0,    0, 0x55,    0,    0,      0, p_8D3C },	/*  38 */
  {    3,    0, 0x1A, 0x56,    0,    0, p_9744, p_8D9E },	/*  39 */
  {    0,    0,    0, 0x5A,    0,    0,      0, p_97A6 },	/*  40 */
  {    0,    0,    0, 0x5E,    0,    0,      0, p_97A6 },	/*  41 */
  {    5,    0,    0, 0x53,    0,    0,      0, p_9796 },	/*  42 */
  {    3,    6,    0, 0x55,    0,    0, p_978E, p_9879 },	/*  43 */
  {    3,    0,    2, 0x56,    0,    0, p_94DA, p_9879 },	/*  44 */
  {    0,    0,    0, 0x57,    0,    0, p_97BB, p_9879 },	/*  45 */
  {    0,    0,    0, 0x5F,    0,    0,      0, p_987B },	/*  46 */
  {    0,    0,    0, 0x5A,    0,    0, p_9786, p_9879 },	/*  47 */
  {    4,    0, 0x10, 0x60,    0,    0, p_8CD7, p_9864 },	/*  48 */
  {    0,    0,    0, 0x11, 0x4E, 0x4E,      0, p_984C },	/*  49 */
  {    0,    0,    0, 0x17,    0,    0,      0, p_94B4 },	/*  50 */
  {    3,    0,    1, 0x62,    0,    0, p_977E, p_9776 },	/*  51 */
  {    3,    0,    1, 0x5C,    0,    0, p_970C, p_9702 },	/*  52 */
  {    6,    0, 0x0E, 0x5C,    0,    0, p_970C, p_9702 },	/*  53 */
  {    0,    0, 0x0E, 0x57,    0,    0, p_95C8, p_95E4 },	/*  54 */
  {    6,    0, 0x0E, 0x49,    0,    0, p_9451, p_9323 },	/*  55 */
  {    6,    0, 0x0E, 0x0D, 0x64,    0, p_8DA1, p_8D70 },	/*  56 */
  {    0,    0, 0x51, 0x65,    0,    0, p_8B8C, p_8CA1 },	/*  57 */
  {    0,    0, 0x18, 0x57,    0,    0, p_95C8, p_95E4 },	/*  58 */
  {    6,    0, 0x18, 0x49,    0,    0, p_9451, p_947B },	/*  59 */
  {    6,    0, 0x1D, 0x0D, 0x54,    0, p_906D, p_908C },	/*  60 */
  {    0,    0,    0, 0x63,    0,    0,      0, p_8D3C },	/*  61 */
  {    0,    0,    0, 0x47, 0x52,    0,      0, p_9380 },	/*  62 */
  {    1,    0,    0,    7, 0x5D, 0x4A, p_960D, p_8B33 },	/*  63 */
  {    0,    0,    0,    8, 0x68, 0x51, p_923B, p_8B33 },	/*  64 */
  {    0,    0,    0, 0x51,    0,    0, p_91E9, p_8D3C },	/*  65 */
  {    0,    0,    0,    1, 0x51,    0, p_9289, p_8B33 },	/*  66 */
  {    0,    0,    0, 0x3D, 0x69, 0x51, p_923B, p_8B33 },	/*  67 */
  {    0,    0,    0, 0x51,    0,    0, p_9609, p_8D3C },	/*  68 */
  {    0,    0,    0, 0x50,    0,    0, p_953F, p_8B33 },	/*  69 */
  {    3,    0,    0, 0x5D,    0,    0,      0, p_8D3C },	/*  70 */
  {    3,    0, 0x1A, 0x0D, 0x6B,    0, p_95AA, p_8D9E },	/*  71 */
  {    3,    0, 0x1A, 0x0D, 0x6C,    0, p_964E, p_8D9E },	/*  72 */
  {    3,    0, 0x5A, 0x49,    0,    0, p_977E, p_8D9E },	/*  73 */
  {    0,    0,    0, 0x1C, 0x48, 0x55,      0, p_956B },	/*  74 */
  {    0,    0,    0, 0x21, 0x49, 0x55, p_976E, p_956B },	/*  75 */
  {    3,    0,    0, 0x30, 0x69, 0x6D,      0, p_956B },	/*  76 */
  {    3,    0, 0x1A, 0x14, 0x50,    0, p_91D1, p_8D9E },	/*  77 */
  {    3,    0, 0x1A, 0x14, 0x51,    0, p_8FC8, p_8D9E },	/*  78 */
  {    3,    0,    0, 0x14, 0x55,    0,      0, p_9380 },	/*  79 */
  {    3,    0, 0x5A, 0x14, 0x5A,    0, p_96DA, p_8D9E },	/*  80 */
  {    9,    0, 0x52, 0x14, 0x53,    0, p_9425, p_96B5 },	/*  81 */
  {    3,    0, 0x5A, 0x14, 0x53,    0, p_96AF, p_8D9E },	/*  82 */
  {    3,    0,    0, 0x21, 0x5C, 0x56, p_96F8, p_956B },	/*  83 */
  {    3,    0, 0x5A, 0x6E,    0,    0, p_96C5, p_8D9E },	/*  84 */
  {    0,    0,    0, 0x1F, 0x55, 0x6F, p_961A, p_9380 },	/*  85 */
  {    0,    0,    0, 0x1F, 0x55, 0x70, p_8E63, p_9380 },	/*  86 */
  {    0,    0,    0, 0x28, 0x61, 0x6F, p_957D, p_9380 },	/*  87 */
  {    0,    0,    0, 0x28, 0x61, 0x70, p_8E34, p_9380 },	/*  88 */
  {    0,    0,    0, 0x0E, 0x56, 0x5D, p_97C9, p_9380 },	/*  89 */
  { 0x0A,    0,    0,    7, 0x56, 0x5D, p_9816, p_9380 },	/*  90 */
  {    0,    0,    0, 0x25, 0x61, 0x5D, p_973B, p_9380 },	/*  91 */
  { 0x0A,    0,    0, 0x23, 0x61, 0x5D, p_97B4, p_9380 },	/*  92 */
  {    3,    0, 0x1A, 0x0F, 0x49, 0x4B, p_951E, p_8D9E },	/*  93 */
  {    0,    0, 0x1B, 0x0F, 0x61, 0x71, p_956E, p_8D9E },	/*  94 */
  {    0,    0,    0, 0x3F, 0x56,    0, p_982C, p_9380 },	/*  95 */
  {    0,    0,    0, 0x15, 0x56,    0, p_9830, p_9380 },	/*  96 */
  {    3,    0,    1, 0x5C,    0,    0, p_970C, p_8D9E },	/*  97 */
  {    0,    0, 0x12, 0x0A, 0x4D, 0x4E, p_8EBB, p_981B },	/*  98 */
  {    0,    0,    0, 0x19, 0x72, 0x73, p_8FC4, p_9380 },	/*  99 */
  {    0,    0,    0, 0x72,    0,    0, p_96A4, p_8B33 },	/* 100 */
  {    5,    0,    0, 0x53,    0,    0,      0, p_8D3C },	/* 101 */
  {    6,    0,    0, 0x54,    0,    0,      0, p_8D3C },	/* 102 */
  {    3,    0,    0, 0x56,    0,    0,      0, p_8D3C },	/* 103 */
  {    0,    0,    0, 0x43,    0,    0,      0, p_976B },	/* 104 */
  {    0,    3,    0, 0x55,    0,    0,      0, p_8D3C },	/* 105 */
  {    0,    0,    3, 0x5D,    0,    0, p_977E, p_8D9E },	/* 106 */
  {    0, 0x0D,    0, 0x5A,    0,    0,      0, p_8D3C },	/* 107 */
  {    0, 0x0E, 0x0D, 0x5A,    0,    0, p_974D, p_8D9E },	/* 108 */
  {    0, 0x19,    0, 0x5A,    0,    0,      0, p_8D3C },	/* 109 */
  {    0,    0,    0, 0x64,    0,    0,      0, p_8D3C },	/* 110 */
  {    0,    0,    0, 0x0D, 0x59,    0,      0, p_8D3C },	/* 111 */
  {    0,    0,    0, 0x42,    0,    0,      0, p_986D },	/* 112 */
  {    0,    0,    0, 0x44,    0,    0, p_8F82, p_9848 },	/* 113 */
  {    0,    0,    0, 0x17,    0,    0,      0, p_8B33 },	/* 114 */
  {    0,    0,    0, 0x44,    0,    0,      0, p_986D },	/* 115 */
  {    0,    0,    0,    2, 0x67, 0x75,      0, p_91CE },	/* 116 */
  {    0,    0,    0,    2, 0x76, 0x75,      0, p_9802 },	/* 117 */
  {    0,    0,    0,    2, 0x56, 0x75, p_97EB, p_9802 },	/* 118 */
  { 0x0A,    0,    0,    2, 0x56, 0x5D, p_9807, p_91CE },	/* 119 */
  { 0x0A,    0,    0,    2, 0x56, 0x70, p_926F, p_9802 },	/* 120 */
  { 0x0B,    0,    1,    2, 0x49, 0x75, p_952F, p_91CE },	/* 121 */
  { 0x0B,    0, 0x1C,    2, 0x5C, 0x75, p_9143, p_91CE },	/* 122 */
  { 0x0B,    0,    1,    2, 0x52, 0x75, p_92BD, p_91CE },	/* 123 */
  { 0x0B,    0,    1,    2, 0x5D, 0x75, p_952F, p_91CE },	/* 124 */
  { 0x0B,    0,    0, 0x1E, 0x5D, 0x75, p_9699, p_986A },	/* 125 */
  { 0x0B,    0,    0, 0x2E, 0x5D, 0x75, p_9699, p_986B },	/* 126 */
  { 0x0C,    0,    1,    2, 0x5D, 0x75, p_902D, p_91CE },	/* 127 */
  { 0x0C,    0,    0, 0x1E, 0x5D, 0x75, p_968E, p_986A },	/* 128 */
  { 0x0C,    0,    0, 0x2E, 0x5D, 0x75, p_968E, p_986B },	/* 129 */
  { 0x0B,    0,    0,    2, 0x54, 0x64, p_959B, p_91CE },	/* 130 */
  {    0,    0,    1,    2, 0x54, 0x64, p_92A3, p_9802 },	/* 131 */
  {    0,    0, 0x52,    2, 0x53, 0x5F, p_9199, p_9802 },	/* 132 */
  {    0,    0,    0, 0x5C,    0,    0,      0, p_8D3C },	/* 133 */
  {    0,    0,    0, 0x0D, 0x54,    0,      0, p_97F1 },	/* 134 */
  {    0, 0x0E,    0, 0x5A,    0,    0,      0, p_9380 },	/* 135 */
  {    0, 0x0D, 0x0E, 0x5A,    0,    0, p_974D, p_8D9E },	/* 136 */
  {    0,    0,    0, 0x0F, 0x63, 0x4A,      0, p_9634 },	/* 137 */
  {    0,    0,    0, 0x0E, 0x57, 0x78,      0, p_9811 },	/* 138 */
  {    0,    0,    0, 0x57,    0,    0,      0, p_9844 },	/* 139 */
  {    0,    0,    9, 0x0E, 0x5C, 0x78, p_970C, p_97F7 },	/* 140 */
  { 0x0D,    0,    0, 0x0F, 0x57, 0x4A,      0, p_9390 },	/* 141 */
  { 0x0E,    0,    0, 0x45,    0,    0,      0, p_986D },	/* 142 */
  { 0x0D,    0,    0, 0x25, 0x57, 0x4A, p_96D0, p_8D3C },	/* 143 */
  {    0,    0,    0, 0x25, 0x57, 0x5E, p_9729, p_8D3C },	/* 144 */
  {    0,    0,    0, 0x21, 0x57, 0x59, p_97AD, p_8D3C },	/* 145 */
  {    0,    0,    0, 0x21, 0x57, 0x5C, p_9720, p_8D3C },	/* 146 */
  {    0,    0,    0, 0x21, 0x5C, 0x57, p_9732, p_8C23 },	/* 147 */
  {    0,    0,    0, 0x1B, 0x4A,    0,      0, p_985C },	/* 148 */
  {    0,    0,    0, 0x42,    0,    0,      0, p_986D },	/* 149 */
  {    0,    0,    0, 0x43,    0,    0,      0, p_9860 },	/* 150 */
  {    5,    0,    0, 0x53,    0,    0, p_954F, p_8B33 },	/* 151 */
  {    3,    0,    0, 0x49,    0,    0,      0, p_8D3C },	/* 152 */
  {    3,    0,    0, 0x0D, 0x5A,    0,      0, p_9087 },	/* 153 */
  { 0x0F,    0,    0, 0x43,    0,    0,      0, p_976B },	/* 154 */
  { 0x10,    0,    0, 0x43,    0,    0,      0, p_8B33 },	/* 155 */
  {    3,    0,    0, 0x25, 0x49, 0x6F, p_96D0, p_8D3C },	/* 156 */
  {    3,    0,    0, 0x25, 0x49, 0x4C, p_96E4, p_8D3C },	/* 157 */
  {    0,    0, 0x52, 0x47, 0x54,    0, p_8BB7, p_97E5 },	/* 158 */
  {    0,    0,    0, 0x21, 0x65, 0x64, p_8E90, p_9380 },	/* 159 */
  {    6,    0,    0, 0x30, 0x69, 0x6D,      0, p_956B },	/* 160 */
  {    0,    0, 0x18, 0x59,    0,    0, p_977E, p_8D9E },	/* 161 */
  {    6,    0, 0x18, 0x5C,    0,    0, p_970C, p_8D9E },	/* 162 */
  {    6,    0, 0x18, 0x49,    0,    0, p_9451, p_8D9E },	/* 163 */
  {    0,    0,    0, 0x1C, 0x48, 0x5A,      0, p_956B },	/* 164 */
  {    0,    0, 0x18, 0x57,    0,    0, p_95C8, p_8D9E },	/* 165 */
  {    6,    0, 0x17, 0x22, 0x52, 0x64, p_9255, p_9380 },	/* 166 */
  {    6,    0, 0x17,    6, 0x54, 0x64, p_940F, p_9380 },	/* 167 */
  {    0,    0,    0, 0x2F, 0x5A, 0x6F, p_9490, p_9380 },	/* 168 */
  {    0,    0,    0, 0x1F, 0x54, 0x6F, p_95D6, p_9380 },	/* 169 */
  {    6,    0,    1, 0x28, 0x52, 0x70, p_9255, p_9380 },	/* 170 */
  {    0,    0,    1, 0x1F, 0x54, 0x70, p_92D7, p_9380 },	/* 171 */
  {    0,    0,    0, 0x13, 0x66, 0x6F, p_9383, p_9380 },	/* 172 */
  {    0,    0,    0, 0x0F, 0x66, 0x6F, p_939B, p_9380 },	/* 173 */
  {    2,    0,    0, 0x23, 0x66, 0x4A, p_94EB, p_9380 },	/* 174 */
  {    2,    0,    0,    7, 0x5A, 0x4A, p_958C, p_9380 },	/* 175 */
  {    1,    0,    0, 0x2C, 0x66, 0x4A, p_94FC, p_9380 },	/* 176 */
  {    1,    0,    0, 0x3C, 0x5A, 0x4A, p_95B9, p_9380 },	/* 177 */
  {    6,    0, 0x5C,    7, 0x5D, 0x5D, p_8D3E, p_90A7 },	/* 178 */
  {    6,    0,    1, 0x23, 0x66, 0x5D, p_8D0B, p_9380 },	/* 179 */
  {    6,    0, 0x1D, 0x0F, 0x63, 0x4A, p_90CA, p_9380 },	/* 180 */
  {    6,    0, 0x1D, 0x13, 0x63, 0x4A, p_8F5D, p_9380 },	/* 181 */
  {    6,    0, 0x18, 0x0D, 0x6B,    0, p_9125, p_8D9E },	/* 182 */
  {    6,    0, 0x1D, 0x0D, 0x6C,    0, p_8EE5, p_8D9E },	/* 183 */
  {    6,    0, 0x1D, 0x0D, 0x54,    0, p_906D, p_8D9E },	/* 184 */
  {    6,    0, 0x1A, 0x52,    0,    0, p_8F0D, p_9380 },	/* 185 */
  {    6,    0, 0x18, 0x14, 0x50,    0, p_91D1, p_8D9E },	/* 186 */
  {    6,    0, 0x18, 0x14, 0x51,    0, p_8FA5, p_8D9E },	/* 187 */
  {    0,    0, 0x18, 0x25, 0x57, 0x5E, p_93CB, p_8D9E },	/* 188 */
  {    6,    0,    0, 0x25, 0x66, 0x6F, p_965B, p_9380 },	/* 189 */
  {    6,    0,    0, 0x26, 0x66, 0x6F, p_9627, p_9380 },	/* 190 */
  {    6,    0,    0, 0x25, 0x66, 0x4C, p_9675, p_9380 },	/* 191 */
  {    6,    0,    0, 0x26, 0x63, 0x5E, p_950D, p_9380 },	/* 192 */
  {    6,    0,    0, 0x25, 0x63, 0x5E, p_9682, p_9380 },	/* 193 */
  {    6,    0,    0, 0x21, 0x5C, 0x5A, p_96F8, p_956B },	/* 194 */
  {    6,    0,    0, 0x21, 0x49, 0x5A, p_9466, p_956B },	/* 195 */
  {    6,    0,    0, 0x21, 0x52, 0x5E, p_90AB, p_956B },	/* 196 */
  {    6,    0,    0, 0x12, 0x54, 0x5E, p_955F, p_9380 },	/* 197 */
  {    0,    0,    0, 0x0E, 0x5A, 0x6F, p_9390, p_9380 },	/* 198 */
  {    0,    0,    0, 0x0E, 0x5A, 0x4C, p_96BA, p_9380 },	/* 199 */
  {    6, 0x1D, 0x0E, 0x0E, 0x5A, 0x59, p_94B6, p_8D9E },	/* 200 */
  {    6,    0,    0, 0x0E, 0x54, 0x5E, p_9716, p_9380 },	/* 201 */
  {    0,    0, 0x0E, 0x15, 0x5E,    0, p_936B, p_8D9E },	/* 202 */
  {    0,    0,    0, 0x21, 0x57, 0x5A, p_95F2, p_956B },	/* 203 */
  {    6,    0, 0x58, 0x6E,    0,    0, p_9353, p_8D9E },	/* 204 */
  { 0x11,    0, 0x58, 0x14, 0x6A,    0, p_94A4, p_8D9E },	/* 205 */
  { 0x12,    0, 0x18, 0x14, 0x56,    0, p_90E9, p_8D9E },	/* 206 */
  {    0,    0,    0,    9, 0x5B,    0,      0, p_8D3C },	/* 207 */
  { 0x13,    0, 0x52, 0x14, 0x53,    0, p_9425, p_9597 },	/* 208 */
  {    6,    0,    0, 0x14, 0x5A,    0,      0, p_9380 },	/* 209 */
  {    6,    0,    0, 0x14, 0x53,    0,      0, p_9597 },	/* 210 */
  {    8,    0,    1, 0x15, 0x53,    0, p_943B, p_9380 },	/* 211 */
  {    5,    0, 0x0F, 0x5C,    0,    0, p_930A, p_8D9E },	/* 212 */
  {    0,    0, 0x0F, 0x43,    0,    0, p_93F9, p_8D9E },	/* 213 */
  {    5,    0, 0x0F, 0x49,    0,    0, p_8E03, p_8D9E },	/* 214 */
  {    5,    0,    0, 0x6E,    0,    0,      0, p_8D3C },	/* 215 */
  {    5,    0,    0, 0x30, 0x69, 0x6D,      0, p_956B },	/* 216 */
  {    5,    0, 0x54, 0x0D, 0x54,    0, p_8B34, p_90A7 },	/* 217 */
  {    7,    0, 0x0C, 0x0E, 0x53, 0x4A, p_8C67, p_9380 },	/* 218 */
  {    5,    0, 0x52, 0x22, 0x52, 0x5F, p_91B5, p_981B },	/* 219 */
  {    5,    0, 0x52, 0x0F, 0x52,    0, p_933B, p_981B },	/* 220 */
  {    5,    0, 0x52,    6, 0x53, 0x5F, p_93B3, p_9380 },	/* 221 */
  {    7,    0, 0x4F, 0x28, 0x52, 0x70, p_904D, p_8D9E },	/* 222 */
  {    7,    0, 0x54, 0x1F, 0x53, 0x70, p_917D, p_9380 },	/* 223 */
  {    5,    0,    0, 0x21, 0x5C, 0x53, p_92F1, p_956B },	/* 224 */
  {    5,    0,    0, 0x21, 0x49, 0x53, p_8DD2, p_956B },	/* 225 */
  {    5,    0, 0x51, 0x21, 0x52, 0x5F, p_8ADB, p_8B88 },	/* 226 */
  {    7,    0, 0x11, 0x15, 0x5F,    0, p_8C25, p_8B88 },	/* 227 */
  { 0x14,    0, 0x54, 0x14, 0x64,    0, p_900C, p_90A7 },	/* 228 */
  { 0x14,    0, 0x54, 0x14, 0x56,    0, p_8F35, p_90A7 },	/* 229 */
  { 0x15,    0, 0x4F, 0x14, 0x64,    0, p_975E, p_8D9E },	/* 230 */
  { 0x15,    0, 0x4F, 0x14, 0x55,    0, p_93E2, p_8D9E },	/* 231 */
  { 0x16,    0, 0x52, 0x14, 0x53,    0, p_91ED, p_9380 },	/* 232 */
  { 0x17,    0, 0x52, 0x14, 0x54,    0, p_9207, p_981B },	/* 233 */
  { 0x18,    0, 0x52, 0x14, 0x56,    0, p_9221, p_981B },	/* 234 */
  { 0x19,    0, 0x52, 0x14, 0x53,    0, p_9425, p_9380 },	/* 235 */
  {    0,    0,    0, 0x14, 0x53,    0,      0, p_9380 },	/* 236 */
  {    0,    0,    0, 0x43,    0,    0,      0, p_9766 },	/* 237 */
  {    0,    0,    0, 0x76,    0,    0,      0, p_8D3C },	/* 238 */
  {    0,    0,    0, 0x0D, 0x77,    0,      0, p_9712 },	/* 239 */
  {    3,    0,    0, 0x0D, 0x54,    0,      0, p_9087 },	/* 240 */
  { 0x1A,    0,    0, 0x43,    0,    0,      0, p_8B33 },	/* 241 */
  { 0x1B,    0,    0, 0x43,    0,    0,      0, p_8B33 },	/* 242 */
  {    0, 0x0D,    0, 0x5B,    0,    0,      0, p_8D3C },	/* 243 */
  {    0,    0, 0x0D, 0x0D, 0x54,    0, p_974D, p_8D9E },	/* 244 */
  {    0, 0x0E,    0, 0x5B,    0,    0,      0, p_8D3C },	/* 245 */
  {    0,    0,    0, 0x0D, 0x54,    0,      0, p_8D3C },	/* 246 */
  {    4,    0, 0x0C, 0x21, 0x60, 0x52, p_9160, p_956B },	/* 247 */
  {    0,    0, 0x18, 0x5C,    0,    0, p_977E, p_8D9E },	/* 248 */
  {    0,    0,    0, 0x0D, 0x5A,    0,      0, p_8D3C },	/* 249 */
  {    4,    0,    0, 0x6E,    0,    0,      0, p_9840 },	/* 250 */
  { 0x1C,    0,    0, 0x14, 0x5B,    0,      0, p_8D3C },	/* 251 */
  { 0x1D,    0,    0, 0x43,    0,    0,      0, p_976B },	/* 252 */
  { 0x1E,    0,    0, 0x43,    0,    0,      0, p_8B33 },	/* 253 */
};
  
char p_8ADB[] = {
  'p','o','p',' ','d','e','\n',
  'l','d',' ','(','h','l',')',',','e','\n',
  'i','n','c','\t','h','l','\n',
  'l','d',' ','(','h','l',')',',','d','\n',
  'i','n','c',' ','h','l','\n',
  'p','o','p',' ','b','c','\n',
  'l','d',' ','(','h','l',')',',','c','\n',
  'i','n','c',' ','h','l','\n',
  'l','d',' ','(','h','l',')',',','b','\n',
  'l','d','\t','l',',','c','\n',
  'l','d','\t','h',',','b'};
char p_8B33[] = { 0 };
char p_8B34[] = {
  'l','d',' ','X','0','0','0','N',',','(','G','L',')','\n',
  'i','n','c',' ','G','L','\n',
  'l','d',' ','X','0','0','1','N',',','(','G','L',')','\n',
  'i','n','c',' ','G','L','\n',
  'l','d',' ','X','1','N',',','(','G','L',')','\n',
  'i','n','c','\t','G','L','\n',
  'l','d',' ','X','0','1','1','N',',','(','G','L',')','\n',
  'l','d',' ','X','0','1','0','N',','};
char p_8B88[] = "X1N";
char p_8B8C[] = {
  'l','d',' ','e',',','(','h','l',')','\n',
  'i','n','c',' ','h','l','\n',
  'l','d',' ','d',',','(','h','l',')','\n',
  'd','e','c',' ','h','l','\n',
  'e','x',' ','d','e',',','h','l','\n'};
char p_8BB7[] = {
  'g','l','o','b','a','l',' ','b','f','e','x','t','\n',
  'c','a','l','l',' ','b','f','e','x','t','\n',
  'd','e','f','b',' ','T','N','+','(','C','N','.','s','h','l','.','4',')',0};

char p_8BE2[] = {
  'l','d',' ','L',',','.','l','o','w','.','V','R','\n',
  'l','d',' ','~','+','1','L',',','.','h','i','g','h','.','V','R','\n',
  'l','d',' ','~','+','2','L',',','.','l','o','w','.','V','+','2','R','\n',
  'l','d',' ','~','+','3','L',',','.','h','i','g','h','.','V','+','2'};
char p_8C23[] =	 "R";
char p_8C25[] =	 "ld hl,ON\n"
	         "pop bc\n"
	         "or a\n"
	         "sbc hl,bc\n"
	         "pop\tbc\n"
	         "ex de,hl\n"
	         "ld hl,ON\n"
	         "sbc hl,bc";
char p_8C67[] =	 "ex de,hl\n"
	         "ld bc,VR\n"
	         "add hl,bc\n"
	         "ex de,hl\n"
	         "ld bc,V+2R\n"
	         "adc hl,bc";
char p_8CA1[] =	 "ex X10N,GL\n"
	         "global bfins\n"
	         "call bfins\n"
	         "defb TN+(CN.shl.4)";
 char p_8CD7[] ={'l','d',' ','h','l',',','-','Z','N','\n',
	         'a','d','d','\t','h','l',',','s','p','\n',
	         'l','d',' ','s','p',',','h','l','\n',
	         'e','x',' ','d','e',',','h','l','\n',
	         'l','d',' ','b','c',',','Z','N','\n',
	         'l','d','i'};
char p_8D09[] =	 "r";
char p_8D0B[] = {'l','d',' ','a',',','G','0','L','\n',
	         'O','N',' ','R','\n',
	         'l','d',' ','G','0','L',',','a','\n',
	         'l','d',' ','a',',','G','1','L','\n',
	         'O','N','\t','~','+','1','R','\n',
	         'l','d',' ','G','1','L',',','a','\n'};
 char p_8D3C[] = "L";
 char p_8D3E[] = "ld a,L\n"
	         "ON R\n"
	         "ld X00N,a\n"
	         "ld a,~+1L\n"
	         "ON\t~+1R\n"
	         "ld X01N,a";
char p_8D70[] = {'e','x',' ','d','e',',','h','l','\n',
	         'l','d',' ','(','X','N',')',',','G','1','L','\n',
	         'd','e','c',' ','X','N','\n',
	         'l','d',' ','(','X','N',')',',','G','0','L','\n',
	         'e','x','\t','d','e',','};
char p_8D9E[] =	 "XN";
char p_8DA1[] = {'e','x',' ','d','e',',','h','l','\n',
	         'l','d',' ','G','0','L',',','(','X','N',')','\n',
	         'i','n','c',' ','X','N','\n',
	         'l','d',' ','G','1','L',',','(','X','N',')','\n',
	         'e','x','\t','d','e',',','h'};
char p_8DD0[] =	 "l";
char p_8DD2[] =	 "ld L,G00R\n"
	         "ld ~+1L,G01R\n"
	         "ld ~+2L,G10R\n"
	         "ld ~+3L,G11R";
char p_8E03[] =	 "ld X00N,L\n"
	         "ld X01N,~+1L\n"
	         "ld X10N,~+2L\n"
	         "ld X11N,~+3L";
char p_8E34[] =	 "inc GR\n"
	         "dec GR\n"
	         "jr z,2f\n"
	         "1:\n"
	         "sONAN GL\n"
	         "djnz 1b\n"
	         "2:\n"
	         "L";
char p_8E63[] =	 "inc GR\n"
	         "dec GR\n"
	         "jr z,2f\n"
	         "1:\n"
	         "sONAN GL\n"
	         "djnz 1b\n"
	         "2:";
char p_8E90[] =	 "global bfins\n"
	         "call bfins\n"
	         "defb TL+(CL.shl.4)";
char p_8EBB[] =	 "call L\n"
	         "exx\n"
	         "ld hl,R\n"
	         "add hl,sp\n"
	         "ld sp,hl\n"
	         "exx";
char p_8EE5[] =	 "ld X0N,(GL)\n"
	         "inc GL\n"
	         "ld X1N,(GL)\n"
	         "dec GL\n"
	         "L";
char p_8F0D[] =	 "ld XN,(GL)\n"
	         "inc GL\n"
	         "ld\tG1L,(GL)\n"
	         "ld G0L,XN";
char p_8F35[] =	 "ld e,a\n"
	         "rla\n"
	         "sbc a,a\n"
	         "ld d,a\n"
	         "ld l,a\n"
	         "ld h,a";
char p_8F5D[] =	 "ld XN,-VR\n"
	         "add\tGL,XN\n"
	         "L\n"
	         "or a\n"
	         "sbc GL,XN";
char p_8F82[] =	 "psect data\n"
	         "eFN: deff SN\n"
	         "psect text";
char p_8FA5[] = {'U','0',':','\n',
	         'l','d',' ','X','N',',','1','\n',
	         'j','p',' ','U','2','f','\n',
	         'U','1',':','\n',
	         'l','d',' ','X','N',',','0','\n'};
char p_8FC4[] =	 "U2:";
char p_8FC8[] =	 "U0:\n"
	         "ld XN,1\n"
	         "p U2f\n"
	         "U1:\n"
	         "ld XN,0\n"
	         "U2:";
char p_8FEA[] =	 "call L\n"
	         "ld hl,R\n"
	         "add hl,sp\n"
	         "ld\tsp,hl";
char p_900C[] =	 "ld a,d\n"
	         "rla\n"
	         "sbc a,a\n"
	         "ld l,a\n"
	         "ld h,a";
char p_902D[] =	 "ld XN,L\n"
	         "or ~+1L\n"
	         "or ~+2L\n"
	         "or ~+3L";
char p_904D[] =	 "global\tasANlONsh\n"
	         "call\tasANlONsh";
char p_906D[] = {'l','d',' ','X','0','N',',','(','G','L',')','\n',
	         'i','n','c',' ','G','L','\n',
	         'l','d',' ','X','1','N',','};
char p_9087[] =	 "(GL)";
char p_908C[] = {'l','d',' ','(','G','L',')',',','X','1','N','\n',
	         'd','e','c',' ','G','L','\n',
	         'l','d',' ','(','G','L',')',','};
char p_90A7[] =	 "X0N";
char p_90AB[] =	 "ld (GL),G0R\n"
	         "inc GL\n"
	         "ld (GL),G1R";
char p_90CA[] =	 "ld XN,VR\n"
	         "add GL,XN\n"
	         "L\n"
	         "sbc GL,XN";
char p_90E9[] =	 "ld X0N,a\n"
	         "rla\n"
	         "sbc a,a\n"
	         "ld X1N,a";
char p_9107[] =	 "ld L,.low.VR\n"
	         "ld ~+1L,.high.VR";
char p_9125[] =	 "ld X0N,(GL+0)\n"
	         "ld X1N,(GL+1)\n"
	         "L";
char p_9143[] =	 "ld X0N,(L)\n"
	         "ld\ta,X00N\n"
	         "or X01N";
char p_9160[] =	 "push hl\n"
	         "ld XN,ZN\n"
	         "ldir\n"
	         "pop hl";
char p_917D[] =	 "global\tANlONsh\n"
	         "call ANlONsh";
char p_9199[] =	 "global\tALrelop\n"
	         "call ALrelop";
char p_91B5[] = {'g','l','o','b','a','l','\t','a','s','A','N','l','O','N','\n',
		 'c','a','l','l',' ','a','s','A','N','l'};
char p_91CE[] =	 "ON";
char p_91D1[] = {'l','d',' ','X','N',',','1','\n',
	         'j','p',' ','L',',','U','0','f','\n',
	         'd','e','c','\t','X','N','\n'};
char p_91E9[] =	 "U0:";
char p_91ED[] =	 "global\tALltof\n"
	         "call ALltof";
char p_9207[] =	 "global\tALitof\n"
	         "call ALitof";
char p_9221[] =	 "global\tALbtof\n"
	         "call ALbtof";
char p_923B[] =	 "U1:jp ~-1U1f\n"
	         "U0:jp ~-1U0f";
char p_9255[] =	 "global\tasANON\n"
	         "call asANON";
char p_926F[] =	 "global\tbrelop\n"
	         "call brelop";
char p_9289[] =	 "U1:jp ~-1U0f\n"
	         "U0:jp ~-1U1f";
char p_92A3[] =	 "global wrelop\n"
	         "call wrelop";
char p_92BD[] =	 "ld XN,(GL)\n"
	         "inc GL\n"
	         "or\t(GL)";
char p_92D7[] =	 "global\tshANON\n"
	         "call shANON";
char p_92F1[] =	 "ld (L),G0R\n"
	         "ld\t(~+2L),G1R";
char p_930A[] =	 "ld X0N,(L)\n"
	         "ld\tX1N,(~+2L)";
char p_9323[] =	 "ld L,X0N\n"
	         "ld ~+1L,X1N;XN";
char p_933B[] =	 "global\tlANON\n"
	         "call lANON";
char p_9353[] =	 "ld X0N,G10L\n"
	         "ld X1N,G11L";
char p_936B[] = {'l','d',' ','X','N',',','O','N','\n',
	         'o','r',' ','a','\n',
	         's','b','c',' ','X','N',','};
char p_9380[] =	 "GL";
char p_9383[] = {'d','e','c',' ','G','L','V','-','-','R','\n',
	         'L','\n'};
char p_9390[] =  "inc GLV--R";
char p_939B[] =  "inc GLV--R\n"
	         "L\n"
	         "dec GLV--R";
char p_93B3[] =  "global\tANlON\n"
	         "call ANlON";
char p_93CB[] =  "add L,GR\n"
	         "push\tL\n"
	         "pop XN";
char p_93E2[] =  "ld hl,0\n"
	         "ld d,l\n"
	         "ld e,GL";
char p_93F9[] =  "ld X0N,VN\n"
	         "ld X1N,V+2N";
char p_940F[] =  "global\tANON\n"
	         "call ANON";
char p_9425[] =  "global\tftol\n"
	         "call ftol";
char p_943B[] =  "ld a,h\n"
	         "xor 80h\n"
	         "ld h,a";
char p_9451[] =  "ld X0N,L\n"
	         "ld X1N,~+1L";
char p_9466[] =  "ld L,G0R\n"
	         "ld ~+1L,G1R";
char p_947B[] =  "ld L,X0N\n"
	         "ld ~+1L,X1N";
char p_9490[] =  "srAN G1L\rrr G0LV--R";
char p_94A4[] = {'l','d',' ','X','0','N',',','L','\n',
	         'l','d',' ','G','1','N',','};
char p_94B4[] =  "0";
char p_94B6[] =  "ld XN,R\n"
	         "add XN,GL";
char p_94C8[] =  "defw VL\n"
	         "defw V+2L";
char p_94DA[] =  "ld XN,GL\n"
	         "push bc";
char p_94EB[] =  "res TR&7CR,G0L\n"
	         "L";
char p_94FC[] =  "set TR&7CR,G0L\n"
	         "L";
char p_950D[] =  "or a\n"
	         "sbc GL,GR\n"
	         "L";
char p_951E[] =  "ld XN,L\n"
	         "ON LV--R";
char p_952F[] =  "ld XN,L\n"
	         "or ~+1L";
char p_953F[] =  "jp L,U0f\n"
	         "jp U1f";
char p_954F[] =  "push hl\n"
	         "push de";
char p_955F[] = {'o','r',' ','a','\n',
	         's','b','c',' ','G','L',','};
char p_956B[] =  "GR";
char p_956E[] =  "ld XN,a\n"
	         "ON a\n"
	         "L";
char p_957D[] =  "sONAN GLV--R\n"
	         "L";
char p_958C[] = {'r','e','s',' ','T','R','&','7','C','R',','};
char p_9597[] =  "G0L";
char p_959B[] =  "or a\n"
	         "sbc hl,de";
char p_95AA[] =  "ld XN,(GL+0)\n"
	         "L";
char p_95B9[] =  "set TR&7CR,G0L";
char p_95C8[] =  "push L\n"
	         "pop XN";
char p_95D6[] =  "add hl,hlV--R";
char p_95E4[] =  "push XN\n"
	         "pop L";
char p_95F2[] =  "push GR\n"
	         "pop L";
char p_9600[] = {'U','0',':','\n',
	         'j','p',' ','R','\n'};
char p_9609[] =  "U1:";
char p_960D[] =  "bit\tTR&7CR,L";
char p_961A[] =  "sONAN GLV--R";
char p_9627[] =  "dec GLV--R\n"
	         "L";
char p_9634[] =  "inc hlV--R\n"
	         "L";
char p_9641[] =  "set\tTR&7CR,L";
char p_964E[] =  "ld XN,(GL)\n"
	         "L";
char p_965B[] =  "inc GLV--R\n"
	         "L";
char p_9668[] =  "res\tTR&7CR,L";
char p_9675[] =  "dec GLV++R\n"
	         "L";
char p_9682[] =  "add GL,GR\n"
	         "L";
char p_968E[] =  "bit 7,~+3L";
char p_9699[] =  "bit 7,~+1L";
char p_96A4[] =  "jp U2f\n"
	         "U0:";
char p_96AF[] = {'l','d',' ','X','N',','};
char p_96B5[] =  "G00L";
char p_96BA[] =  "dec GLV++R";
char p_96C5[] =  "ld XN,G10L";
char p_96D0[] =  "inc LV--R";
char p_96DA[] =  "ld XN,G0L";
char p_96E4[] =  "dec LV++R";
char p_96EE[] =  "dec LV--R";
char p_96F8[] =  "ld (L),GR";
char p_9702[] =  "ld (L),XN";
char p_970C[] = {'l','d',' ','X','N',','};
char p_9712[] =  "(L)";
char p_9716[] =  "add GL,GR";
char p_9720[] =  "ld L,(R)";
char p_9729[] =  "add L,GR";
char p_9732[] =  "ld (L),R";
char p_973B[] =  "ON a,R\n"
		 "L";
char p_9744[] =  "ld XN,GL";
char p_974D[] =  "ex de,hl";
char p_9756[] =  "ld L,VR";
char p_975E[] =  "ld hl,0";
char p_9766[] = {'.','l','o','w','.'};
char p_976B[] =  "VN";
char p_976E[] =  "ld L,GR";
char p_9776[] =  "ld L,XN";
char p_977E[] =  "ld XN,L";
char p_9786[] =  "push GL";
char p_978E[] =  "push hl";
char p_9796[] =  "G00L;GL";
char p_979E[] =  "ld a,GL";
char p_97A6[] =  "G0L;GL";
char p_97AD[] =  "ld L,R";
char p_97B4[] =  "ON R\n"
	         "L";
char p_97BB[] =  "push L";
char p_97C2[] =  "defw L";
char p_97C9[] =  "ON a,R";
char p_97D0[] =  "deff L";
char p_97D7[] =  "defb L";
char p_97DE[] =  "jp L,R";
char p_97E5[] =  "X111N";
char p_97EB[] =  "or GL";
char p_97F1[] =  "indir";
char p_97F7[] =  "XN+SR";
char p_97FD[] =  "VL9f";
char p_9802[] =  "ALON";
char p_9807[] =  "cp R";
char p_980C[] =  "jp L";
char p_9811[] =  "L+VR";
char p_9816[] =  "ON R";
char p_981B[] =  "X11N";
char p_9820[] =  "sub";
char p_9824[] =  "inc";
char p_9828[] =  "add";
char p_982C[] =  "cpl";
char p_9830[] =  "neg";
char p_9834[] =  "mul";
char p_9838[] =  "and";
char p_983C[] =  "mod";
char p_9840[] =  "G1L";
char p_9844[] =  "L+0";
char p_9848[] =  "eFN";
char p_984C[] =  "L+R";
char p_9850[] = {'x'};
char p_9851[] =  "or";
char p_9854[] =  "div";
char p_9858[] =  "dec";
char p_985C[] =  "VL9";
char p_9860[] =  "lVN";
char p_9864[] =  "ZN";
char p_9867[] =  "L:";
char p_986A[] = {'n'};
char p_986B[] =  "z";
char p_986D[] =  "SN";
char p_9870[] =  "-1";
char p_9873[] =  "ge";
char p_9876[] =  "lt";
char p_9879[] =  "2";
char p_987B[] =  "4";

/* End file 2.c */


/*
 * File 3.c Created 17.05.2019 Last Modified 21.01.2021
 */

#include "stdio.h"

#define	offsetof(ty, mem)	((int)&(((ty *)0)->mem))

struct zzz {
  char		c_0;
  char		c_1;
  char		c_2;
  char		c_3;
  char		c_4;
  char		c_5;
  char 	      * p_6;
  char	      * p_8;
};

struct t {
  char  a1[ 4];  char  a2[ 5];  char  a3[ 1];  char  a4[ 2];  char  a5[ 2];
  char  a6[14];  char  a7[17];  char  a8[ 4];  char  a9[13];  char a10[20];
  char a11[ 2];  char a12[14];  char a13[26];  char a14[18];  char a15[18];
  char a16[ 1];  char a17[ 2];  char a18[16];  char a19[16];  char a20[20];
  char a21[16];  char a22[ 1];  char a23[ 3];  char a24[14];  char a25[ 2];
  char a26[ 2];  char a27[14];  char a28[14];  char a29[ 1];  char a30[ 5];
  char a31[16];  char a32[ 1];  char a33[23];  char a34[14];  char a35[16];
  char a36[14];  char a37[24];  char a38[16];  char a39[14];  char a40[16];
  char a41[ 5];  char a42[16];  char a43[16];  char a44[16];  char a45[ 1];
  char a46[ 5];  char a47[16];  char a48[16];  char a49[ 2];  char a50[ 1];
  char a51[ 1];  char a52[ 1];  char a53[ 1];  char a54[ 1];  char a55[ 1];
  char a56[ 1];  char a57[ 1];  char a58[16];  char a59[ 1];  char a60[16];
  char a61[ 4];  char a62[ 1];  char a63[16];  char a64[ 1];  char a65[ 1];
  char a66[25];  char a67[30];  char a68[25];  char a69[16];  char a70[ 2];
  char a71[15];
};

int array_987D[] = {
  offsetof(struct t,  a1), offsetof(struct t,  a1), offsetof(struct t,  a2),
  offsetof(struct t,  a3), offsetof(struct t,  a4), offsetof(struct t,  a5),
  offsetof(struct t,  a6), offsetof(struct t,  a7), offsetof(struct t,  a8),
  offsetof(struct t,  a9), offsetof(struct t, a10), offsetof(struct t, a11),
  offsetof(struct t, a12), offsetof(struct t, a13), offsetof(struct t, a14),
  offsetof(struct t, a15), offsetof(struct t, a16), offsetof(struct t, a17),
  offsetof(struct t, a18), offsetof(struct t, a19), offsetof(struct t, a20),
  offsetof(struct t, a21), offsetof(struct t, a22), offsetof(struct t, a23),
  offsetof(struct t, a24), offsetof(struct t, a25), offsetof(struct t, a26),
  offsetof(struct t, a27), offsetof(struct t, a28), offsetof(struct t, a29),
  offsetof(struct t, a30), offsetof(struct t, a31), offsetof(struct t, a32),
  offsetof(struct t, a33), offsetof(struct t, a34), offsetof(struct t, a35),
  offsetof(struct t, a36), offsetof(struct t, a37), offsetof(struct t, a38),
  offsetof(struct t, a39), offsetof(struct t, a40), offsetof(struct t, a41),
  offsetof(struct t, a42), offsetof(struct t, a43), offsetof(struct t, a44),
  offsetof(struct t, a45), offsetof(struct t, a46), offsetof(struct t, a47),
  offsetof(struct t, a48), offsetof(struct t, a49), offsetof(struct t, a50),
  offsetof(struct t, a51), offsetof(struct t, a52), offsetof(struct t, a53),
  offsetof(struct t, a54), offsetof(struct t, a55), offsetof(struct t, a56),
  offsetof(struct t, a57), offsetof(struct t, a58), offsetof(struct t, a59),
  offsetof(struct t, a60), offsetof(struct t, a61), offsetof(struct t, a62),
  offsetof(struct t, a63), offsetof(struct t, a64), offsetof(struct t, a65),
  offsetof(struct t, a66), offsetof(struct t, a67), offsetof(struct t, a68),
  offsetof(struct t, a69), offsetof(struct t, a70), offsetof(struct t, a71)
};

struct t array_990D = {
  { 0x51, 0x68, 0x69,    0 },		/*  a1[ 4] = "Qhi"		*/
  { 0x50, 0x51, 0x68, 0x69,    0 },	/*  a2[ 5] = "PQhi"		*/
  {    0 },				/*  a3[ 1] = ""			*/
  { 0x48,    0 },			/*  a4[ 2] = "H"		*/
  { 0x48,    0 },			/*  a4[ 2] = "H"		*/
  { 0x48, 0x4E, 0x53, 0x54, 0x5A,	/*  a6[14] = "HNSTZ]^_djprs"	*/
    0x5D, 0x5E, 0x5F, 0x64, 0x6A,
    0x70, 0x72, 0x73,    0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/*  a7[17] = "HNSTUVZ]^_dgjprs" */
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x67, 0x6A, 0x70, 0x72,
    0x73,    0 },
  { 0x51, 0x68, 0x69,    0 },		/*  a8[ 4] = "Qhi"		*/
  { 0x48, 0x4E, 0x54, 0x59, 0x5A,	/*  a9[13] = "HNTYZ]^djprs"	*/
    0x5D, 0x5E, 0x64, 0x6A, 0x70,
    0x72, 0x73,    0 },
  { 0x48, 0x4E, 0x52, 0x53, 0x54,	/* a10[20] = "HNRSTUVZ[]^_`djnprs" */
    0x55, 0x56, 0x5A, 0x5B, 0x5D,
    0x5E, 0x5F, 0x60, 0x64, 0x6A,
    0x6E, 0x70, 0x72, 0x73,    0 },
  { 0x48,    0 },			/* a11[ 2] = "H"		*/
  { 0x48, 0x4E, 0x53, 0x54, 0x5A,	/* a12[14] = "HNSTZ]^_djprs"	*/
    0x5D, 0x5E, 0x5F, 0x64, 0x6A,
    0x70, 0x72, 0x73,    0 },
  { 0x48, 0x49, 0x4D, 0x4E, 0x52,	/* a13[26] = "HIMNRSTUVZ[\\]^_\\abcdfjprs" */
    0x53, 0x54, 0x55, 0x56, 0x5A,
    0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
    0x60, 0x61, 0x62, 0x63, 0x64,
    0x66, 0x6A, 0x70, 0x72, 0x73,
       0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a14[18] = "HNSTUVYZ]^_djprsw" */
    0x56, 0x59, 0x5A, 0x5D, 0x5E,
    0x5F, 0x64, 0x6A, 0x70, 0x72,
    0x73, 0x77,    0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a15[18] = "HNSTUVZ]^_djklprs" */
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x6B, 0x6C, 0x70,
    0x72, 0x73,    0 },
  {    0 },				/* a16[ 1] = ""			*/
  { 0x4E,    0 },			/* a17[ 2] = "N"		*/
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a18[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a19[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  { 0x48, 0x4E, 0x52, 0x53, 0x54,	/* a20[20] = "HNRSTUVYZ[]^_`djprs" */
    0x55, 0x56, 0x59, 0x5A, 0x5B,
    0x5D, 0x5E, 0x5F, 0x60, 0x64,
    0x6A, 0x70, 0x72, 0x73,    0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a21[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  {    0 },				/* a22[ 1] = ""			*/
  { 0x4E, 0x74,    0 },			/* a23[ 3] = "Nt"		*/
  { 0x48, 0x4E, 0x53, 0x54, 0x5A,	/* a24[14] = "HNSTZ]^_djprs"	*/
    0x5D, 0x5E, 0x5F, 0x64, 0x6A,
    0x70, 0x72, 0x73,    0 },
  { 0x6D,    0 },			/* a25[ 2] = "m"		*/
  { 0x48,    0 },			/* a26[ 2] = "H"		*/
  { 0x48, 0x4E, 0x4F, 0x54, 0x59,	/* a27[14] = "HNOTYZ]^djprs"	*/
    0x5A, 0x5D, 0x5E, 0x64, 0x6A,
    0x70, 0x72, 0x73,    0 },
  { 0x48, 0x4E, 0x54, 0x55, 0x56,	/* a28[14] = "HNTUVZ]^djprs"	*/
    0x5A, 0x5D, 0x5E, 0x64, 0x6A,
    0x70, 0x72, 0x73,    0 },
  {    0 },				/* a29[ 1] = ""			*/
  { 0x50, 0x51, 0x68, 0x69,    0 },	/* a30[ 5] = "PQhi"		*/
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a31[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  {    0 },				/* a32[ 1] = ""			*/
  { 0x48, 0x4E, 0x52, 0x53, 0x54,	/* a33[23] = "HNRSTUVWZ[]^_`cdfjprsw" */
    0x55, 0x56, 0x57, 0x5A, 0x5B,
    0x5D, 0x5E, 0x5F, 0x60, 0x63,
    0x64, 0x66, 0x6A, 0x70, 0x72,
    0x73, 0x77,    0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x5A,	/* a34[14] = "HNSTZ]^_djprs"	*/
    0x5D, 0x5E, 0x5F, 0x64, 0x6A,
    0x70, 0x72, 0x73,    0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a35[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x5A,	/* a36[14] = "HNSTZ]^_djprs"	*/
    0x5D, 0x5E, 0x5F, 0x64, 0x6A,
    0x70, 0x72, 0x73,    0 },
  { 0x48, 0x49, 0x4E, 0x53, 0x54,	/* a37[24] = "HINSTUVWZ]^_abcdfjprsvw" */
    0x55, 0x56, 0x57, 0x5A, 0x5D,
    0x5E, 0x5F, 0x61, 0x62, 0x63,
    0x64, 0x66, 0x6A, 0x70, 0x72,
    0x73, 0x76, 0x77,    0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a38[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x5A,	/* a39[14] = "HNSTZ]^_djprs"	*/
    0x5D, 0x5E, 0x5F, 0x64, 0x6A,
    0x70, 0x72, 0x73,    0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a40[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  { 0x50, 0x51, 0x68, 0x69,    0 },	/* a41[ 5] = "PQhi"		*/
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a42[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a43[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a44[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  {    0 },				/* a45[ 1] = ""			*/
  { 0x50, 0x51, 0x68, 0x69,    0 },	/* a46[ 5] = "PQhi"		*/
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a47[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a48[16]="HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  { 0x48,    0 },			/* a49[ 2] = "H"		*/
  {    0 },				/* a50[ 1] = ""			*/				
  {    0 },				/* a51[ 1] = ""			*/
  {    0 },				/* a52[ 1] = ""			*/
  {    0 },				/* a53[ 1] = ""			*/
  {    0 },				/* a54[ 1] = ""			*/
  {    0 },				/* a55[ 1] = ""			*/
  {    0 },				/* a56[ 1] = ""			*/
  {    0 },				/* a57[ 1] = ""			*/
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a58[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  {    0 },				/* a59[ 1] = ""			*/
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a60[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  { 0x51, 0x68, 0x69,    0 },		/* a61[ 4] = "Qhi"		*/
  {    0 },				/* a62[ 1] = ""			*/
  { 0x48, 0x4E, 0x53, 0x54, 0x55,	/* a63[16] = "HNSTUVZ]^_djprs"	*/
    0x56, 0x5A, 0x5D, 0x5E, 0x5F,
    0x64, 0x6A, 0x70, 0x72, 0x73,
       0 },
  {    0 },				/* a64[ 1] = ""			*/
  {    0 },				/* a65[ 1] = ""			*/
  { 0x48, 0x4D, 0x4E, 0x4F, 0x52,	/* a66[25] = "HMNORSTUVZ[\\]^_`acdfjprs" */
    0x53, 0x54, 0x55, 0x56, 0x5A,
    0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
    0x60, 0x61, 0x63, 0x64, 0x66,
    0x6A, 0x70, 0x72, 0x73,    0 },
  { 0x48, 0x49, 0x4A, 0x4B, 0x4C,	/* a67[30] = "HIJKLNOSTUVYZ]^_abcdfjopqrsux" */
    0x4E, 0x4F, 0x53, 0x54, 0x55,
    0x56, 0x59, 0x5A, 0x5D, 0x5E,
    0x5F, 0x61, 0x62, 0x63, 0x64,
    0x66, 0x6A, 0x6F, 0x70, 0x71,
    0x72, 0x73, 0x75, 0x78,    0 },
  { 0x48, 0x4D, 0x4E, 0x52, 0x53,	/* a68[25] = "HMNRSTUVXZ[\\]^_`acdfjprs" */
    0x54, 0x55, 0x56, 0x58, 0x5A,
    0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
    0x60, 0x61, 0x63, 0x64, 0x66,
    0x6A, 0x70, 0x72, 0x73,    0 },
  { 0x48, 0x4E, 0x54, 0x57, 0x5A,	/* a69[16] = "HNTWZ]^cdfjprsw"	*/
    0x5D, 0x5E, 0x63, 0x64, 0x66,
    0x6A, 0x70, 0x72, 0x73, 0x77,
       0 },
  { 0x48,    0 },			/* a70[ 2] = "H"		*/
  { 0x48, 0x4E, 0x54, 0x5A, 0x5D,	/* a71[15] = "HNTZ]^cdefjprs"	*/
    0x5E, 0x63, 0x64, 0x65, 0x66,
    0x6A, 0x70, 0x72, 0x73,    0 },
};

int  array_9BD4[] = {
  -66,  -65,  -68,    0,   89,  -69,  -65,  -68,    0,    0,
    1,    0,   -8,    0,    3,   62, -221,  141, -167,  231,
  251, -151,  264,  -70, -106,  276, -100,    0,    5,   64,
 -221,  141,  -90,  163,  170,  234,  251, -151,  264,  -63,
  -70,  274,  278, -100,    0,  -64,  -65,  -68,    0,  -28,
  -47,  141,  -33,  172,  239,  251,  264,  -70, -106, -102,
 -100,    0,    8,   68, -245, -215,  141,  -84,  163,  174,
 -250,  234,  251, -151, -243,  264,  -70,  -98,  274,  278,
 -100,    0,   13,    0,    3,   62, -221,  141, -167,  231,
  251, -151,  264,  -70, -106,  276, -100,    0,    9,   58,
  
   60,   68,  116,  118,  141,  143,  163,  176,  229, -111,
  241,  251, -151,  253,  255,  257,  259,  264,  266,  -70,
  274,  278, -100,    0,    5,   64,  121,  141,  -89,  163,
  -36,  182,  234,  251, -151,  264,  -70,  274,  278, -100,
  283,    0,   18,   64, -220,  141,  147,  163,  187,  234,
  251, -151,  264,  -70, -141, -137,  274,  278, -100,    0,
    0,  -49,    0,    5,   64, -221,  141,  -90,  163, -197,
  234,  251, -151,  264,  -70,  274,  278, -100,    0,   23,
   64, -220,  141,  147,  163,  189,  234,  251, -151,  264,
  -70,  274,  278, -100,    0,    9,   68, -245,  123,  141,
  
  149,  163,  -35,  191, -251,  234,  251, -151, -243,  264,
  -70,  274,  278, -100,    0,    5,   64,  132,  141,  -96,
  163, -202,  234,  251, -151,  264,  -70,  274,  278, -100,
    0,    0,  -50, -114,    0,    3,   62, -221,  141, -167,
  231,  251, -151,  264,  -70, -106,  276, -100,    0,  -99,
    0,  -16,    0,  -28,  -47, -148,  141,  -32, -161,  239,
  251,  264,  -70, -106, -102, -100,    0,   27,   73,  141,
  -74,  163, -164,  247,  251,  264,  -70,  274,  279, -100,
    0,    0,  102,  -69,  -65,  -68,    0,    5,   64, -223,
  141,  155,  163,  200,  234,  251, -151,  264,  -70,  274,
  
  278, -100,    0,    0,   30,   76, -245,  134,  141,  157,
  163,  165,  202, -247,  234,  251, -151, -243,  -54,  264,
  269,  -70,  274,  278, -100, -139,    0,    3,   62, -219,
  141, -166,  231,  251, -151,  264,  -70, -106,  276, -100,
    0,   38,   64, -219,  141,  -92,  163,  209,  234,  251,
 -151,  264,  -70,  274,  278, -100,    0,    3,   62, -219,
  141, -166,  231,  251, -151,  264,  -70, -106,  276, -100,
    0,   42, -238,   82,  137,  141,  159,  163,  168,  211,
  241,  251, -151,  -51, -152,  262,  264,  271,  -70,  274,
  278, -100,  281, -139,    0,   23,   64, -219,  141,  -92,
  
  163,  217,  234,  251, -151,  264,  -70,  274,  278, -100,
    0,    3,   62, -219,  141, -166,  231,  251, -151,  264,
  -70, -106,  276, -100,    0,    5,   64, -222,  141,  161,
  163, -170,  234,  251, -151,  264,  -70,  274,  278, -100,
    0,   89,  -69,  -65,  -68,    0,    5,   64, -222,  141,
  161,  163, -170,  234,  251, -151,  264,  -70,  274,  278,
 -100,    0,    5,   64, -219,  141,  -92,  163, -179,  234,
  251, -151,  264,  -70,  274,  278, -100,    0,   48,   64,
 -219,  141,  -92,  163,  219,  234,  251, -151,  264,  -70,
  274,  278, -100,    0,    0,  109,  -69,  -65,  -68,    0,
  
    5,   64, -223,  141,  155,  163,  221,  234,  251, -151,
  264,  -70,  274,  278, -100,    0,    5,   64, -216,  141,
  -76,  163, -160,  234,  251, -151,  264,  -70,  274,  278,
 -100,    0,   52,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    5,   64, -221,  141,  -90,  163, -178,  234,
  251, -151,  264,  -70,  274,  278, -100,    0,    0,    5,
   64, -221,  141,  -90,  163,  223,  234,  251, -151,  264,
  -70,  274,  278, -100,    0,  -67,  -65,  -68,    0,    0,
    5,   64, -227,  141,  -95,  163, -202,  234,  251, -151,
  264,  -70,  274,  278, -100,    0,    0,    0,    9, -133,
  
   68, -149, -245, -212,  141,  -97,  163,  225, -248, -112,
  234,  251, -151, -243,  -52,  -53,  264,  -61,  -70,  274,
  278, -100,    0,    5, -237, -104, -252, -242,   64, -150,
  139,  141,  -73,  163,  -34,  227,  241,  251, -151,  -51,
 -152,  -55,  264,  272,  -70, -241,  274, -155,  278, -100,
 -253, -154,    0,    9, -133,   68, -245, -212,  141,  -97,
  163, -115,  225, -248, -113,  234,  251, -151, -243,  -52,
  -53,  264,  -61,  -70,  274,  278, -100,    0,   56,   87,
  141, -142, -165,  239,  251,  -54,  264,  269,  -70, -106,
 -102, -100, -139,    0,  -18,    0,  -28,  -47,  141, -158,
 
  239,  251,  -57,  264,  -62,  -61,  -70, -106, -102, -100,
    0
};

int array_A162[] = {
    0,    9,  -10,   25,  -28,   21,   25,  -28,    7,   21,
   25,   28,  -29,   11,   12,   13,   14,  -15,    4,    5,
   21,   25,  -28,    6,   21,   25,  -28,    1,   21,  -28,
   17,   20,   21,   22,   25,   26,   28,  -29,    3,   21,
   25,  -28,    4,    5,   20,   21,   25,  -28,    2,   21,
   25,  -28,   19,   23,   24,  -27,   20,  -28,  239, -240,
  133, -134,   46,  -47,   43,   44,   46,  -47,   43,   44,
   46,   47,  -48,   43,   44,  -47,   43,   44,   45,   46,
   47,  -48,   43,   44,   45,   46,  -47,   45,  -47,  116,
  117,  118,  119,  120,  121,  122,  123,  124,  127,  130,
  
  131, -132,  117,  118,  120,  125,  128,  131, -132,  117,
  118,  120,  126,  129,  131, -132,  245, -246,  212,  214,
 -217,  218, -221,  228,  229,  230,  231,  232,  233,  234,
  235, -236,  211, -227,  224,  225, -226,  214, -219,  213,
 -214,  135, -136,   71,   72,   73,  -97,   93,  -94,   77,
   78,   79,   80,   81,  -82,   85,  -86,   75,  -83,   73,
  -91,   87,  -88,   30,  -31,  145,  146, -147,  143, -144,
  175, -178,  161, -207,  185, -204,  162,  163,  182,  183,
  184, -185,  161,  198,  199,  200, -201,  173, -180,  172,
 -181,  161,  185,  186,  187,  205,  206,  208,  209, -210,
 
  169, -171,  159,  165,  185,  194,  195,  196, -203,  174,
 -179,  163,  165,  188,  189,  191, -193,  190, -192,  176,
 -179,  168, -171,  177, -178,  162, -185,  161, -163,  248,
 -249,   40,   41,  -42,   38,   39,   40,   41,  -42,   40,
  -41,   37,   38,   39,   40,   41,  -42,   38,   39,   40,
  -41,  109, -110,  243, -244,   51,  -52,  152, -153,   53,
   55,  -56,   54,  -55,  107, -108,   59,   60,  -61,   58,
  -61,   58,   59,  -61,  105, -106,  101, -102,  101,  102,
 -103,  156, -157,  138, -140
};

/* End file 3.c */


/*
 * File 4.c Created 21.01.2021 Last Modified 21.01.2021
 */

#include "stdio.h"

int dopetab[72] = { /* array_A7C0 */
  0x000C,   /*  0000 0000 0000 1100	 0  0	""      NULSTR		*/  
  0x0227,   /*  0000 0010 0010 0111	 1  1	"!"	NOT 		*/  
  0x0468,   /*  0000 0100 0110 1000	 2  2	"!="    NEQL	EQUOP	*/  
  0x0014,   /*  0000 0000 0001 0100	 3  3	"#"     HASHSIGN	*/  
  0x4208,   /*  0100 0010 0000 1000	 4  4	"$"     DOLLAR		*/  
  0x4004,   /*  0100 0010 0000 1000	 5  5	"$U"    DOLLARU		*/  
       8,   /*  0000 0000 0000 1000	 6  6	"%"    -MOD 		*/  
  0x2848,   /*  0010 1000 0100 1000	 7  7	"&"    -BAND	BITWOP	*/  
  0x4328,   /*  0100 0011 0010 1000	 8  8	"&&"	LAND 	LOGICOP	*/
       4,   /*  0000 0000 0000 0100	 9  9	"&U"    GADDR		*/  
  0x4008,   /*  0100 0000 0000 1000	10  A	"("	LPAREN 		*/  
  0x4004,   /*  0100 0000 0000 0100	11  B	")"	RPAREN		*/  
  0x2048,   /*  0010 0000 0100 1000	12  C	"*"    +MUL   	ARITMOP */  
  0x1004,   /*  0001 0000 0000 0100	13  D	"*U"    MULU		*/  
  0x2C48,   /*  0010 1100 0100 1000	14  E	"+"    -ADD   	ARITMOP */  
       8,   /*  0000 0000 0000 1000	15  F	"++" 	INCR   		*/  
       4,   /*  0000 0000 0000 0100	16 10	"+U"    PLUSU		*/  
       8,   /*  0000 0000 0000 1000	17 11	","     COMMA		*/  
  0x0C08,   /*  0000 1100 0000 1000	18 12	"-"    -SUB   	ARITMOP */  
       8,   /*  0000 0000 0000 1000	19 13	"--" 	DECR   		*/  
  0x0208,   /*  0000 0010 0000 1000	20 14	"->"    TCAST		*/  
  0x0C07,   /*  0000 1100 0000 0111	21 15	"-U"    MINUSU		*/  
       8,   /*  0000 0000 0000 1000	22 16	"."     DOT		*/  
  0x0030,   /*  0000 0000 0011 0000	23 17	".."    TDOT		*/  
       8,   /*  0000 0000 0000 1000	24 18	"/"    -DIV	ARITMOP */  
  0x4008,   /*  0100 0000 0000 1000	25 19	":"     COLON		*/  
  0x4004,   /*  0100 0010 0000 1000	26 1A	":U"    COLONU		*/  
  0x4004,   /*  0100 0010 0000 1000	27 1B	":s"    COLONS		*/  
  0x4108,   /*  0100 0001 0000 1000	28 1C	";"     SCOLON		*/  
  0x000C,   /*  0000 0000 0000 1100	29 1D	";;"    TSCOLON		*/  
  0x0428,   /*  0000 0100 0010 1000	30 1E	"<"     LT	RELOP	*/  
  0x0C88,   /*  0000 1100 1000 1000	31 1F	"<<"   -LSHIFT  SHIFTOP	*/  
  0x0428,   /*  0000 0100 0010 1000	32 20	"<="  	LEQ  	RELOP	*/  
       8,   /*  0000 0000 0000 1000	33 21	"="   	ASSIGN		*/  
  0x0408,   /*  0000 0100 0000 1000	34 22	"=%"  	ASMOD		*/  
  0x0C08,   /*  0000 1100 0000 1000	35 23	"=&"  	ASAND		*/  
  0x0C08,   /*  0000 1100 0000 1000	36 24	"=*"  	ASMUL		*/  
  0x0C08,   /*  0000 1100 0000 1000	37 25	"=+"  	ASADD		*/  
  0x0C08,   /*  0000 1100 0000 1000	38 26	"=-"  	ASSUB		*/  
       8,   /*  0000 0000 0000 1000	39 27	"=/"  	ASDIV		*/  
  0x0C88,   /*  0000 1100 1000 1000	40 28	"=<<" 	ASLSHIFT	*/  
  0x0468,   /*  0000 0100 0110 1000	41 29	"=="  	EQL  	EQUOP	*/  
  0x0088,   /*  0000 0000 1000 1000	42 2A	"=>>" 	ASRSHIFT	*/  
  0x0C08,   /*  0000 1100 0000 1000	43 2B	"=^"  	ASEXOR		*/  
  0x0C08,   /*  0000 1100 0000 1000	44 2C	"=|"  	ASEOR		*/  
  0x0428,   /*  0000 0100 0010 1000	45 2D	">"   	GT  	RELOP	*/  
  0x0428,   /*  0000 0100 0010 1000	46 2E	">="  	GEQ	RELOP	*/  
  0x0088,   /*  0000 0000 1000 1000	47 2F	">>"   -RSHIFT  SHIFTOP	*/  
  0x4308,   /*  0100 0011 0000 1000	48 30	"?"     QUEST		*/  
  0x4004,   /*  0100 0010 0000 1000	49 31	"@"     ATGIGN		*/  
  
  0x000C,   /*  0000 0000 0000 1100	50 32	"[\\"   CASE		*/  
  0x000C,   /*  0000 0000 0000 1100	51 33	"[a"    UNKNOWN		*/  
  0x000C,   /*  0000 0000 0000 1100	52 34	"[c"    ENUM		*/  
  0x000C,   /*  0000 0000 0000 1100	53 35	"[e"    EXPR		*/  
  0x000C,   /*  0000 0000 0000 1100	54 36	"[i"    INIT		*/  
  0x000C,   /*  0000 0000 0000 1100	55 37	"[s"    STRUCT		*/  
  0x000C,   /*  0000 0000 0000 1100	56 38	"[u"    UNION		*/  
  
  0x000C,   /*  0000 0000 0000 1100	57 39	"[v"    		*/  
  0x2848,   /*  0010 1000 0100 1000	58 3A	"^"    -BXOR   	BITWOP	*/  
  0x000C,   /*  0000 0000 0000 1100	59 3B	"{"     LBRACE		*/  
  0x2848,   /*  0010 1000 0100 1000	60 3C	"|"    -BOR	BITWOP	*/  
  0x4328,   /*  0100 0011 0010 1000	61 3D	"||" 	LOR   	LOGICOP	*/
  0x000C,   /*  0000 0000 0000 1100	62 3E	"}"     RBRACE		*/  
  0x0C07,   /*  0000 1100 0000 0111	63 3F	"~"  	BNOT	BITWOP	*/  
       4,   /*  0000 0000 0000 0100	64 40	"RECIP"	   		*/
       0,   /*  0000 0000 0000 0000	65 41	"TYPE"     		*/
  0x1002,   /*  0001 0000 0000 0010	66 42	"ID"	   		*/
  0x0010,   /*  0000 0000 0001 0000	67 43	"CONST"    		*/
       3,   /*  0000 0000 0000 0011	68 44	"FCONST"   		*/
       2,   /*  0000 0000 0000 0010	69 45	"REG"      		*/
  0x4004,   /*  0100 0010 0000 1000	70 46	"INAREG"   		*/
       4    /*  0000 0000 0000 0100	71 47	"BITFIELD" 		*/
};

/*
char array_A542[] = {0, 'a', 'l', 'f'};

char *off_A592[] = {"", "bss", "text", "data"};

struct type {
  char	* t_str;
  int	  t_size;
  int	  t_alig;
  char	  t_flag;
};

 *
 *	Initializaion of type pointers
 */

/* sub_1680
struct type vars[14] = { 
  {"i",  2, 0, 1}, {"s",  2, 0, 1}, {"c",  1, 0, 1},
  {"l",  4, 0, 1}, {"ui", 2, 0, 2}, {"us", 2, 0, 2},
  {"uc", 1, 0, 2}, {"ul", 4, 0, 2}, {"f",  4, 0, 3},
  {"d",  4, 0, 3}, {"x",  2, 0, 1}, {"ux", 2, 0, 2},
  {"b",  0, 0, 0}, {"v",  0, 0, 0}
};
*/

/* End file 4.c */


*Title Disassembling CGEN.COM Hi-Tech C v3.09
*Heading Checking recreated code with original

; File - 5.asm Created 09.03.2019 Last Modified 31.01.2021

;=========================================================
; Data from file 5.asm
;=========================================================
	global	_off_AACA

	psect	data

_off_AACA:
	defw	19f
	defw	29f
	defw	39f
	defw	49f
	defw	59f
	defw	69f
	defw	79f
	defw	89f
	defw	99f
	defw	109f
	defw	119f
	defw	129f
	defw	139f
	defw	149f
	defw	159f

	global	_array_AAE8

_array_AAE8:
	defw	   0,  1,   2,   4,   8,  16,  32,  64, 128, 256
	defw	 512,  1,   6,  24,  96, 120, 102, 126, 127,   0
	defw	 121, 97,  25,   7, 126,  30,  63,  62, 127,  30

global	_array_AB24

_array_AB24:
	defb	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0
	defb	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0
	defb	 0,  0,  1,  0,  2,  3,  4,  5,  6,  7
	defb	13, 14, 12, 14, 12, 15,  1, 17,  0,  0
	defb	15,  1, 14,  1, 13,  1, 12,  1

global	_array_AB54

_array_AB54:
	defb	14
	defb	13
	defb	12
	defb	0
	defb	0
	defb	0

	defb	13
	defb	12
	defb	0
	defb	0
	defb	0
	defb	0

	defb	1
	defb	4
	defb	5
	defb	2
	defb	3
	defb	6

	defb	4
	defb	5
	defb	2
	defb	3
	defb	6
	defb	0

	defb	21
	defb	22
	defb	23
	defb	0
	defb	0
	defb	0

	defb	12
	defb	13
	defb	0
	defb	0
	defb	0
	defb	0

19:	defb	0
29:	defb	97,0
39:	defb	99,0
49:	defb	98,0
59:	defb	101,0
69:	defb	100,0
79:	defb	108,0
89:	defb	104,0
99:	defb	105,120,0
109:	defb	105,121,0
119:	defb	115,112,0
129:	defb	97,102,0
139:	defb	98,99,0
149:	defb	100,101,0
159:	defb	104,108,0

	psect	text

; End of file 5.asm


